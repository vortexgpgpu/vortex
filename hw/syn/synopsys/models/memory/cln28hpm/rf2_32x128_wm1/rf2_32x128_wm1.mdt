// fastscan_memcomp Version: 4.0.5-EAC10 
// common_memcomp Version: 4.0.5.2-amci
// lang compiler Version: 4.1.6-EAC2 Oct 30 2012 16:32:37
//
//       CONFIDENTIAL AND PROPRIETARY SOFTWARE OF ARM PHYSICAL IP, INC.
//      
//       Copyright (c) 1993 - 2019 ARM Physical IP, Inc.  All Rights Reserved.
//      
//       Use of this Software is subject to the terms and conditions of the
//       applicable license agreement with ARM Physical IP, Inc.
//       In addition, this Software is protected by patents, copyright law 
//       and international treaties.
//      
//       The copyright notice(s) in this Software does not indicate actual or
//       intended publication of this Software.
//
//      Fastscan model for High Density Two Port Register File SVT MVT Compiler
//
//       Instance Name:              rf2_32x128_wm1
//       Words:                      32
//       Bits:                       128
//       Mux:                        2
//       Drive:                      6
//       Write Mask:                 On
//       Write Thru:                 Off
//       Extra Margin Adjustment:    On
//       Redundant Columns:          2
//       Test Muxes                  On
//       Power Gating:               Off
//       Retention:                  On
//       Pipeline:                   Off
//       Read Disturb Test:	        Off
//       
//       Creation Date:  Thu Oct 17 15:30:00 2019
//       Version: 	r4p0
//      Modeling Assumptions: This is Sequential Synchronous Mentor model
//          with Mentor ATPG primitives used to test UTI and generate test
//          vectors.
//
//      Modeling Limitations: None.
//
//      Known Bugs: None.
//
//      Known Work Arounds: N/A
//
model rf2_32x128_wm1_scanflop (Q, SI, D, SE, CLK, Xout) (
   input (SI) ()
   input (D) ()
   input (SE) ()
   input (CLK) ()
   input (Xout) ()
   output (Q) (
     primitive = _tiex  mx_tiex (mx);
     primitive = _tie0  m0_tie0 (m0_0);
     primitive = _tie0  m1_tie0 (m0_1);
     primitive = _mux m1 (D, SI, SE, n1);
     primitive = _mux m2 (n1, mx, Xout, n2);
     primitive = _dff  r1 ( m0_0, m0_1, CLK, n2, Q,  );
   )
)
model rf2_32x128_wm1_bitcell (CLK, WRITE, READ, WA, RA, D, Xout, Q) (
   intern (WA_ram, RA_ram) (array = 4:0;)
   input (CLK) ()
   intern (READ_ram) ()
   input (WRITE) ()
   input (READ) ()
   input (D) ()
   input (WA, RA) (array = 4:0;)
   input (Xout) ()
   output (Q) (
 
 
   primitive = _tiex  mx_tiex ( mx );
   primitive = _mux  WRITE_MUX ( WRITE, mx, Xout, WRITE_ram );
   primitive = _mux  D_mux ( D, mx, Xout, D_ram );
   primitive = _mux  AA0_mux ( WA[0], mx, Xout, WA_ram[0] );
   primitive = _mux  AA1_mux ( WA[1], mx, Xout, WA_ram[1] );
   primitive = _mux  AA2_mux ( WA[2], mx, Xout, WA_ram[2] );
   primitive = _mux  AA3_mux ( WA[3], mx, Xout, WA_ram[3] );
   primitive = _mux  AA4_mux ( WA[4], mx, Xout, WA_ram[4] );
   primitive = _mux  READ_MUX ( READ, mx, Xout, READ_ram );
   primitive = _mux  RA0_mux ( RA[0], mx, Xout, RA_ram[0] );
   primitive = _mux  RA1_mux ( RA[1], mx, Xout, RA_ram[1] );
   primitive = _mux  RA2_mux ( RA[2], mx, Xout, RA_ram[2] );
   primitive = _mux  RA3_mux ( RA[3], mx, Xout, RA_ram[3] );
   primitive = _mux  RA4_mux ( RA[4], mx, Xout, RA_ram[4] );
           data_size = 1;
           address_size = 5;
           min_address = 0;
           max_address = 31;
           edge_trigger = w;
           read_write_conflict = XW;
           // Verilog RAM has no Set or Reset pin : 
           primitive = _cram mem ( , ,
             // Following write port will Hold in-memory data when not writing.
             _write { , , } (CLK, WRITE_ram, WA_ram, D_ram),
             // Following read port will Hold output data after reading.
             _read { , , ,} ( , READ_ram, , RA_ram, Q)
           );	 
   )
)
model rf2_32x128_wm1 (CENYA, AYA, CENYB, WENYB, AYB, QA, SOA, SOB, CLKA, CENA, AA,
    CLKB, CENB, WENB, AB, DB, EMAA, EMASA, EMAB, TENA, TCENA, TAA, TENB, TCENB, TWENB,
    TAB, TDB, RET1N, SIA, SEA, DFTRAMBYP, SIB, SEB, COLLDISN) (
  input (CLKA) ()
  input (CENA) ()
  input (AA) (array = 4 : 0; )
  input (CLKB) ()
  input (CENB) ()
  input (WENB) (array = 127 : 0; )
  input (AB) (array = 4 : 0; )
  input (DB) (array = 127 : 0; )
  input (EMAA) (array = 2 : 0; used=false;fault=none;)
  input (EMASA) (used=false;fault=none;)
  input (EMAB) (array = 2 : 0; used=false;fault=none;)
  input (TENA) ()
  input (TCENA) ()
  input (TAA) (array = 4 : 0; )
  input (TENB) ()
  input (TCENB) ()
  input (TWENB) (array = 127 : 0; )
  input (TAB) (array = 4 : 0; )
  input (TDB) (array = 127 : 0; )
  input (RET1N) (used=false;fault=none;)
  input (SIA) (array = 1 : 0; )
  input (SEA) ()
  input (DFTRAMBYP) ()
  input (SIB) (array = 1 : 0; )
  input (SEB) ()
  input (COLLDISN) (used=false;fault=none;)
   intern (mtie_sel0) (primitive = _tie0  m0_sel0 ( mtie_sel0 );)
   intern (tiex_readq) (primitive = _tiex mtiex_readq(tiex_readq);)
   intern (mlc_bmuxsel) (primitive = _tie0  m0_bmuxsel ( mlc_bmuxsel );)
   intern (BUS_SIA) (array = 1 : 0; 
      primitive = _buf wbSIA0 (SIA[0], BUS_SIA[0]);
      primitive = _buf wbSIA1 (SIA[1], BUS_SIA[1]);
   )
   intern (BUS_AA) (array = 4 : 0; 
      primitive = _buf  bBUS_AA0 ( AA[0], BUS_AA[0]);
      primitive = _buf  bBUS_AA1 ( AA[1], BUS_AA[1]);
      primitive = _buf  bBUS_AA2 ( AA[2], BUS_AA[2]);
      primitive = _buf  bBUS_AA3 ( AA[3], BUS_AA[3]);
      primitive = _buf  bBUS_AA4 ( AA[4], BUS_AA[4]);
   )
  intern (BMUX_AA) ( array = 4 : 0;
    primitive = _mux maA0(TAA[0],  BUS_AA[0], TENA, BMUX_AA[0]);
    primitive = _mux maA1(TAA[1],  BUS_AA[1], TENA, BMUX_AA[1]);
    primitive = _mux maA2(TAA[2],  BUS_AA[2], TENA, BMUX_AA[2]);
    primitive = _mux maA3(TAA[3],  BUS_AA[3], TENA, BMUX_AA[3]);
    primitive = _mux maA4(TAA[4],  BUS_AA[4], TENA, BMUX_AA[4]);
  )
  intern (BMUXSEL_AA) ( array = 4 : 0;
    primitive = _mux mBMUXSEL_AA0(mlc_bmuxsel,  BMUX_AA[0], DFTRAMBYP, BMUXSEL_AA[0]);
    primitive = _mux mBMUXSEL_AA1(mlc_bmuxsel,  BMUX_AA[1], DFTRAMBYP, BMUXSEL_AA[1]);
    primitive = _mux mBMUXSEL_AA2(mlc_bmuxsel,  BMUX_AA[2], DFTRAMBYP, BMUXSEL_AA[2]);
    primitive = _mux mBMUXSEL_AA3(mlc_bmuxsel,  BMUX_AA[3], DFTRAMBYP, BMUXSEL_AA[3]);
    primitive = _mux mBMUXSEL_AA4(mlc_bmuxsel,  BMUX_AA[4], DFTRAMBYP, BMUXSEL_AA[4]);
  )
  output (AYA) ( array = 4 : 0;
    primitive = _buf bAYA0(BMUXSEL_AA[0], AYA[0]);
    primitive = _buf bAYA1(BMUXSEL_AA[1], AYA[1]);
    primitive = _buf bAYA2(BMUXSEL_AA[2], AYA[2]);
    primitive = _buf bAYA3(BMUXSEL_AA[3], AYA[3]);
    primitive = _buf bAYA4(BMUXSEL_AA[4], AYA[4]);
 )

  intern (BMUX_CENA) (primitive = _mux mBMUX_CENA(TCENA,  CENA, TENA, BMUX_CENA);)
  intern (BMUXSEL_CENA) (primitive = _mux mBMUXSEL_CENA(mlc_bmuxsel,  BMUX_CENA, DFTRAMBYP, BMUXSEL_CENA);)
  output (CENYA) (primitive = _buf bCENYA(BMUXSEL_CENA, CENYA);)
  intern (BMUX_AA_n) (array = 4 : 1;
    primitive = _inv  iBMUX_AA_n1 ( BMUX_AA[1], BMUX_AA_n[1] );
    primitive = _inv  iBMUX_AA_n2 ( BMUX_AA[2], BMUX_AA_n[2] );
    primitive = _inv  iBMUX_AA_n3 ( BMUX_AA[3], BMUX_AA_n[3] );
    primitive = _inv  iBMUX_AA_n4 ( BMUX_AA[4], BMUX_AA_n[4] );
  )

  intern (A_max) (array = 4 : 0; 
    primitive = _tie1  bA_max0 ( A_max[0] );
    primitive = _tie1  bA_max1 ( A_max[1] );
    primitive = _tie1  bA_max2 ( A_max[2] );
    primitive = _tie1  bA_max3 ( A_max[3] );
    primitive = _tie1  bA_max4 ( A_max[4] );
  )

  intern (A_max_n) (array = 4 : 0; 
  primitive = _inv  bA_max_n0( A_max[0], A_max_n[0] );
  primitive = _inv  bA_max_n1( A_max[1], A_max_n[1] );
  primitive = _inv  bA_max_n2( A_max[2], A_max_n[2] );
  primitive = _inv  bA_max_n3( A_max[3], A_max_n[3] );
  primitive = _inv  bA_max_n4( A_max[4], A_max_n[4] );
  )

  intern (AA_m) (array = 4 : 0; 
    primitive = _and  aAA_m0(BMUX_AA[0], A_max_n[0], AA_m[0] );
    primitive = _and  aAA_m1(BMUX_AA[1], A_max_n[1], AA_m[1] );
    primitive = _and  aAA_m2(BMUX_AA[2], A_max_n[2], AA_m[2] );
    primitive = _and  aAA_m3(BMUX_AA[3], A_max_n[3], AA_m[3] );
    primitive = _and  aAA_m4(BMUX_AA[4], A_max_n[4], AA_m[4] );
  )

  intern (m_AA) (array = 4 : 1; 
    primitive = _and  am_AA1(BMUX_AA_n[1], A_max[1], m_AA[1] );
    primitive = _and  am_AA2(BMUX_AA_n[2], A_max[2], m_AA[2] );
    primitive = _and  am_AA3(BMUX_AA_n[3], A_max[3], m_AA[3] );
    primitive = _and  am_AA4(BMUX_AA_n[4], A_max[4], m_AA[4] );
  )

  intern (EQ_A) (array = 4 : 1; 
    primitive = _nor  nEQ_A1(m_AA[1], AA_m[1], EQ_A[1] );
    primitive = _nor  nEQ_A2(m_AA[2], AA_m[2], EQ_A[2] );
    primitive = _nor  nEQ_A3(m_AA[3], AA_m[3], EQ_A[3] );
    primitive = _nor  nEQ_A4(m_AA[4], AA_m[4], EQ_A[4] );
  )

  intern (XoutAi) (array = 3 : 0;
  primitive = _and  aXoutAi0(AA_m[0], EQ_A[4], EQ_A[3], EQ_A[2], EQ_A[1], XoutAi[0]);
  primitive = _and  aXoutAi1(AA_m[1], EQ_A[4], EQ_A[3], EQ_A[2], XoutAi[1]);
  primitive = _and  aXoutAi2(AA_m[2], EQ_A[4], EQ_A[3], XoutAi[2]);
  primitive = _and  aXoutAi3(AA_m[3], EQ_A[4], XoutAi[3]);
  )
  intern (XoutAifTemp) (primitive = _or oXoutAifTemp (AA_m[4], XoutAi[0], XoutAi[1], XoutAi[2], XoutAi[3], XoutAifTemp);)
  intern (XoutAif) (primitive = _and oXoutAif (XoutAifTemp, NOT_CENA, XoutAif);)

  intern (nscanshiftA) ( 
  primitive = _nor nnscanshiftA (DFTRAMBYP, SEA, nscanshiftA);)
  intern (XoutaddrA) ( 
  primitive = _and aXoutaddrA (nscanshiftA, XoutAif, XoutaddrA);)
  intern (XoutAiff) ( 
  primitive = _or oXoutAiff (XoutaddrA, XoutA, XoutAiff);)

  intern (NOT_CENA) (primitive = _inv iNOT_CENA(BMUX_CENA, NOT_CENA);)
  intern (NOT_DFTRAMBYP) (primitive = _inv iNOT_DFTRAMBYP(DFTRAMBYP, NOT_DFTRAMBYP);) 
  intern (READA) (array = 127:0;
  primitive = _buf bREADA0(NOT_CENA, READA[0]);
  primitive = _buf bREADA1(NOT_CENA, READA[1]);
  primitive = _buf bREADA2(NOT_CENA, READA[2]);
  primitive = _buf bREADA3(NOT_CENA, READA[3]);
  primitive = _buf bREADA4(NOT_CENA, READA[4]);
  primitive = _buf bREADA5(NOT_CENA, READA[5]);
  primitive = _buf bREADA6(NOT_CENA, READA[6]);
  primitive = _buf bREADA7(NOT_CENA, READA[7]);
  primitive = _buf bREADA8(NOT_CENA, READA[8]);
  primitive = _buf bREADA9(NOT_CENA, READA[9]);
  primitive = _buf bREADA10(NOT_CENA, READA[10]);
  primitive = _buf bREADA11(NOT_CENA, READA[11]);
  primitive = _buf bREADA12(NOT_CENA, READA[12]);
  primitive = _buf bREADA13(NOT_CENA, READA[13]);
  primitive = _buf bREADA14(NOT_CENA, READA[14]);
  primitive = _buf bREADA15(NOT_CENA, READA[15]);
  primitive = _buf bREADA16(NOT_CENA, READA[16]);
  primitive = _buf bREADA17(NOT_CENA, READA[17]);
  primitive = _buf bREADA18(NOT_CENA, READA[18]);
  primitive = _buf bREADA19(NOT_CENA, READA[19]);
  primitive = _buf bREADA20(NOT_CENA, READA[20]);
  primitive = _buf bREADA21(NOT_CENA, READA[21]);
  primitive = _buf bREADA22(NOT_CENA, READA[22]);
  primitive = _buf bREADA23(NOT_CENA, READA[23]);
  primitive = _buf bREADA24(NOT_CENA, READA[24]);
  primitive = _buf bREADA25(NOT_CENA, READA[25]);
  primitive = _buf bREADA26(NOT_CENA, READA[26]);
  primitive = _buf bREADA27(NOT_CENA, READA[27]);
  primitive = _buf bREADA28(NOT_CENA, READA[28]);
  primitive = _buf bREADA29(NOT_CENA, READA[29]);
  primitive = _buf bREADA30(NOT_CENA, READA[30]);
  primitive = _buf bREADA31(NOT_CENA, READA[31]);
  primitive = _buf bREADA32(NOT_CENA, READA[32]);
  primitive = _buf bREADA33(NOT_CENA, READA[33]);
  primitive = _buf bREADA34(NOT_CENA, READA[34]);
  primitive = _buf bREADA35(NOT_CENA, READA[35]);
  primitive = _buf bREADA36(NOT_CENA, READA[36]);
  primitive = _buf bREADA37(NOT_CENA, READA[37]);
  primitive = _buf bREADA38(NOT_CENA, READA[38]);
  primitive = _buf bREADA39(NOT_CENA, READA[39]);
  primitive = _buf bREADA40(NOT_CENA, READA[40]);
  primitive = _buf bREADA41(NOT_CENA, READA[41]);
  primitive = _buf bREADA42(NOT_CENA, READA[42]);
  primitive = _buf bREADA43(NOT_CENA, READA[43]);
  primitive = _buf bREADA44(NOT_CENA, READA[44]);
  primitive = _buf bREADA45(NOT_CENA, READA[45]);
  primitive = _buf bREADA46(NOT_CENA, READA[46]);
  primitive = _buf bREADA47(NOT_CENA, READA[47]);
  primitive = _buf bREADA48(NOT_CENA, READA[48]);
  primitive = _buf bREADA49(NOT_CENA, READA[49]);
  primitive = _buf bREADA50(NOT_CENA, READA[50]);
  primitive = _buf bREADA51(NOT_CENA, READA[51]);
  primitive = _buf bREADA52(NOT_CENA, READA[52]);
  primitive = _buf bREADA53(NOT_CENA, READA[53]);
  primitive = _buf bREADA54(NOT_CENA, READA[54]);
  primitive = _buf bREADA55(NOT_CENA, READA[55]);
  primitive = _buf bREADA56(NOT_CENA, READA[56]);
  primitive = _buf bREADA57(NOT_CENA, READA[57]);
  primitive = _buf bREADA58(NOT_CENA, READA[58]);
  primitive = _buf bREADA59(NOT_CENA, READA[59]);
  primitive = _buf bREADA60(NOT_CENA, READA[60]);
  primitive = _buf bREADA61(NOT_CENA, READA[61]);
  primitive = _buf bREADA62(NOT_CENA, READA[62]);
  primitive = _buf bREADA63(NOT_CENA, READA[63]);
  primitive = _buf bREADA64(NOT_CENA, READA[64]);
  primitive = _buf bREADA65(NOT_CENA, READA[65]);
  primitive = _buf bREADA66(NOT_CENA, READA[66]);
  primitive = _buf bREADA67(NOT_CENA, READA[67]);
  primitive = _buf bREADA68(NOT_CENA, READA[68]);
  primitive = _buf bREADA69(NOT_CENA, READA[69]);
  primitive = _buf bREADA70(NOT_CENA, READA[70]);
  primitive = _buf bREADA71(NOT_CENA, READA[71]);
  primitive = _buf bREADA72(NOT_CENA, READA[72]);
  primitive = _buf bREADA73(NOT_CENA, READA[73]);
  primitive = _buf bREADA74(NOT_CENA, READA[74]);
  primitive = _buf bREADA75(NOT_CENA, READA[75]);
  primitive = _buf bREADA76(NOT_CENA, READA[76]);
  primitive = _buf bREADA77(NOT_CENA, READA[77]);
  primitive = _buf bREADA78(NOT_CENA, READA[78]);
  primitive = _buf bREADA79(NOT_CENA, READA[79]);
  primitive = _buf bREADA80(NOT_CENA, READA[80]);
  primitive = _buf bREADA81(NOT_CENA, READA[81]);
  primitive = _buf bREADA82(NOT_CENA, READA[82]);
  primitive = _buf bREADA83(NOT_CENA, READA[83]);
  primitive = _buf bREADA84(NOT_CENA, READA[84]);
  primitive = _buf bREADA85(NOT_CENA, READA[85]);
  primitive = _buf bREADA86(NOT_CENA, READA[86]);
  primitive = _buf bREADA87(NOT_CENA, READA[87]);
  primitive = _buf bREADA88(NOT_CENA, READA[88]);
  primitive = _buf bREADA89(NOT_CENA, READA[89]);
  primitive = _buf bREADA90(NOT_CENA, READA[90]);
  primitive = _buf bREADA91(NOT_CENA, READA[91]);
  primitive = _buf bREADA92(NOT_CENA, READA[92]);
  primitive = _buf bREADA93(NOT_CENA, READA[93]);
  primitive = _buf bREADA94(NOT_CENA, READA[94]);
  primitive = _buf bREADA95(NOT_CENA, READA[95]);
  primitive = _buf bREADA96(NOT_CENA, READA[96]);
  primitive = _buf bREADA97(NOT_CENA, READA[97]);
  primitive = _buf bREADA98(NOT_CENA, READA[98]);
  primitive = _buf bREADA99(NOT_CENA, READA[99]);
  primitive = _buf bREADA100(NOT_CENA, READA[100]);
  primitive = _buf bREADA101(NOT_CENA, READA[101]);
  primitive = _buf bREADA102(NOT_CENA, READA[102]);
  primitive = _buf bREADA103(NOT_CENA, READA[103]);
  primitive = _buf bREADA104(NOT_CENA, READA[104]);
  primitive = _buf bREADA105(NOT_CENA, READA[105]);
  primitive = _buf bREADA106(NOT_CENA, READA[106]);
  primitive = _buf bREADA107(NOT_CENA, READA[107]);
  primitive = _buf bREADA108(NOT_CENA, READA[108]);
  primitive = _buf bREADA109(NOT_CENA, READA[109]);
  primitive = _buf bREADA110(NOT_CENA, READA[110]);
  primitive = _buf bREADA111(NOT_CENA, READA[111]);
  primitive = _buf bREADA112(NOT_CENA, READA[112]);
  primitive = _buf bREADA113(NOT_CENA, READA[113]);
  primitive = _buf bREADA114(NOT_CENA, READA[114]);
  primitive = _buf bREADA115(NOT_CENA, READA[115]);
  primitive = _buf bREADA116(NOT_CENA, READA[116]);
  primitive = _buf bREADA117(NOT_CENA, READA[117]);
  primitive = _buf bREADA118(NOT_CENA, READA[118]);
  primitive = _buf bREADA119(NOT_CENA, READA[119]);
  primitive = _buf bREADA120(NOT_CENA, READA[120]);
  primitive = _buf bREADA121(NOT_CENA, READA[121]);
  primitive = _buf bREADA122(NOT_CENA, READA[122]);
  primitive = _buf bREADA123(NOT_CENA, READA[123]);
  primitive = _buf bREADA124(NOT_CENA, READA[124]);
  primitive = _buf bREADA125(NOT_CENA, READA[125]);
  primitive = _buf bREADA126(NOT_CENA, READA[126]);
  primitive = _buf bREADA127(NOT_CENA, READA[127]);
  )
   intern (x_detection_CENA) (primitive = _xor xx_detection_CENA(BMUX_CENA, BMUX_CENA, x_detection_CENA);)
   intern (x_detection_CLKA) (primitive = _xor xx_detection_CLKA(CLKA, CLKA, x_detection_CLKA);)
   intern (aSEA) (primitive = _and  a1SEA ( SEA, DFTRAMBYPinv, aSEA );)
   intern (acendftA) (primitive = _and  a1cendft[A] (x_detection_CENA, DFTRAMBYPinv, acendftA );)
   intern (acendftCA) (primitive = _and  a1cendftCA ( x_detection_CLKA, DFTRAMBYPinv, acendftCA );)
   intern (XoutA) (primitive = _or  oXoutA ( aSEA, acendftA, XoutA );)
  intern (READ_QA) (array = 127:0; 
  primitive = _mux mREAD_QA0(QA[0],  INT_QA[0], READA[0], READ_QA[0]);
  primitive = _mux mREAD_QA1(QA[1],  INT_QA[1], READA[1], READ_QA[1]);
  primitive = _mux mREAD_QA2(QA[2],  INT_QA[2], READA[2], READ_QA[2]);
  primitive = _mux mREAD_QA3(QA[3],  INT_QA[3], READA[3], READ_QA[3]);
  primitive = _mux mREAD_QA4(QA[4],  INT_QA[4], READA[4], READ_QA[4]);
  primitive = _mux mREAD_QA5(QA[5],  INT_QA[5], READA[5], READ_QA[5]);
  primitive = _mux mREAD_QA6(QA[6],  INT_QA[6], READA[6], READ_QA[6]);
  primitive = _mux mREAD_QA7(QA[7],  INT_QA[7], READA[7], READ_QA[7]);
  primitive = _mux mREAD_QA8(QA[8],  INT_QA[8], READA[8], READ_QA[8]);
  primitive = _mux mREAD_QA9(QA[9],  INT_QA[9], READA[9], READ_QA[9]);
  primitive = _mux mREAD_QA10(QA[10],  INT_QA[10], READA[10], READ_QA[10]);
  primitive = _mux mREAD_QA11(QA[11],  INT_QA[11], READA[11], READ_QA[11]);
  primitive = _mux mREAD_QA12(QA[12],  INT_QA[12], READA[12], READ_QA[12]);
  primitive = _mux mREAD_QA13(QA[13],  INT_QA[13], READA[13], READ_QA[13]);
  primitive = _mux mREAD_QA14(QA[14],  INT_QA[14], READA[14], READ_QA[14]);
  primitive = _mux mREAD_QA15(QA[15],  INT_QA[15], READA[15], READ_QA[15]);
  primitive = _mux mREAD_QA16(QA[16],  INT_QA[16], READA[16], READ_QA[16]);
  primitive = _mux mREAD_QA17(QA[17],  INT_QA[17], READA[17], READ_QA[17]);
  primitive = _mux mREAD_QA18(QA[18],  INT_QA[18], READA[18], READ_QA[18]);
  primitive = _mux mREAD_QA19(QA[19],  INT_QA[19], READA[19], READ_QA[19]);
  primitive = _mux mREAD_QA20(QA[20],  INT_QA[20], READA[20], READ_QA[20]);
  primitive = _mux mREAD_QA21(QA[21],  INT_QA[21], READA[21], READ_QA[21]);
  primitive = _mux mREAD_QA22(QA[22],  INT_QA[22], READA[22], READ_QA[22]);
  primitive = _mux mREAD_QA23(QA[23],  INT_QA[23], READA[23], READ_QA[23]);
  primitive = _mux mREAD_QA24(QA[24],  INT_QA[24], READA[24], READ_QA[24]);
  primitive = _mux mREAD_QA25(QA[25],  INT_QA[25], READA[25], READ_QA[25]);
  primitive = _mux mREAD_QA26(QA[26],  INT_QA[26], READA[26], READ_QA[26]);
  primitive = _mux mREAD_QA27(QA[27],  INT_QA[27], READA[27], READ_QA[27]);
  primitive = _mux mREAD_QA28(QA[28],  INT_QA[28], READA[28], READ_QA[28]);
  primitive = _mux mREAD_QA29(QA[29],  INT_QA[29], READA[29], READ_QA[29]);
  primitive = _mux mREAD_QA30(QA[30],  INT_QA[30], READA[30], READ_QA[30]);
  primitive = _mux mREAD_QA31(QA[31],  INT_QA[31], READA[31], READ_QA[31]);
  primitive = _mux mREAD_QA32(QA[32],  INT_QA[32], READA[32], READ_QA[32]);
  primitive = _mux mREAD_QA33(QA[33],  INT_QA[33], READA[33], READ_QA[33]);
  primitive = _mux mREAD_QA34(QA[34],  INT_QA[34], READA[34], READ_QA[34]);
  primitive = _mux mREAD_QA35(QA[35],  INT_QA[35], READA[35], READ_QA[35]);
  primitive = _mux mREAD_QA36(QA[36],  INT_QA[36], READA[36], READ_QA[36]);
  primitive = _mux mREAD_QA37(QA[37],  INT_QA[37], READA[37], READ_QA[37]);
  primitive = _mux mREAD_QA38(QA[38],  INT_QA[38], READA[38], READ_QA[38]);
  primitive = _mux mREAD_QA39(QA[39],  INT_QA[39], READA[39], READ_QA[39]);
  primitive = _mux mREAD_QA40(QA[40],  INT_QA[40], READA[40], READ_QA[40]);
  primitive = _mux mREAD_QA41(QA[41],  INT_QA[41], READA[41], READ_QA[41]);
  primitive = _mux mREAD_QA42(QA[42],  INT_QA[42], READA[42], READ_QA[42]);
  primitive = _mux mREAD_QA43(QA[43],  INT_QA[43], READA[43], READ_QA[43]);
  primitive = _mux mREAD_QA44(QA[44],  INT_QA[44], READA[44], READ_QA[44]);
  primitive = _mux mREAD_QA45(QA[45],  INT_QA[45], READA[45], READ_QA[45]);
  primitive = _mux mREAD_QA46(QA[46],  INT_QA[46], READA[46], READ_QA[46]);
  primitive = _mux mREAD_QA47(QA[47],  INT_QA[47], READA[47], READ_QA[47]);
  primitive = _mux mREAD_QA48(QA[48],  INT_QA[48], READA[48], READ_QA[48]);
  primitive = _mux mREAD_QA49(QA[49],  INT_QA[49], READA[49], READ_QA[49]);
  primitive = _mux mREAD_QA50(QA[50],  INT_QA[50], READA[50], READ_QA[50]);
  primitive = _mux mREAD_QA51(QA[51],  INT_QA[51], READA[51], READ_QA[51]);
  primitive = _mux mREAD_QA52(QA[52],  INT_QA[52], READA[52], READ_QA[52]);
  primitive = _mux mREAD_QA53(QA[53],  INT_QA[53], READA[53], READ_QA[53]);
  primitive = _mux mREAD_QA54(QA[54],  INT_QA[54], READA[54], READ_QA[54]);
  primitive = _mux mREAD_QA55(QA[55],  INT_QA[55], READA[55], READ_QA[55]);
  primitive = _mux mREAD_QA56(QA[56],  INT_QA[56], READA[56], READ_QA[56]);
  primitive = _mux mREAD_QA57(QA[57],  INT_QA[57], READA[57], READ_QA[57]);
  primitive = _mux mREAD_QA58(QA[58],  INT_QA[58], READA[58], READ_QA[58]);
  primitive = _mux mREAD_QA59(QA[59],  INT_QA[59], READA[59], READ_QA[59]);
  primitive = _mux mREAD_QA60(QA[60],  INT_QA[60], READA[60], READ_QA[60]);
  primitive = _mux mREAD_QA61(QA[61],  INT_QA[61], READA[61], READ_QA[61]);
  primitive = _mux mREAD_QA62(QA[62],  INT_QA[62], READA[62], READ_QA[62]);
  primitive = _mux mREAD_QA63(QA[63],  INT_QA[63], READA[63], READ_QA[63]);
  primitive = _mux mREAD_QA64(QA[64],  INT_QA[64], READA[64], READ_QA[64]);
  primitive = _mux mREAD_QA65(QA[65],  INT_QA[65], READA[65], READ_QA[65]);
  primitive = _mux mREAD_QA66(QA[66],  INT_QA[66], READA[66], READ_QA[66]);
  primitive = _mux mREAD_QA67(QA[67],  INT_QA[67], READA[67], READ_QA[67]);
  primitive = _mux mREAD_QA68(QA[68],  INT_QA[68], READA[68], READ_QA[68]);
  primitive = _mux mREAD_QA69(QA[69],  INT_QA[69], READA[69], READ_QA[69]);
  primitive = _mux mREAD_QA70(QA[70],  INT_QA[70], READA[70], READ_QA[70]);
  primitive = _mux mREAD_QA71(QA[71],  INT_QA[71], READA[71], READ_QA[71]);
  primitive = _mux mREAD_QA72(QA[72],  INT_QA[72], READA[72], READ_QA[72]);
  primitive = _mux mREAD_QA73(QA[73],  INT_QA[73], READA[73], READ_QA[73]);
  primitive = _mux mREAD_QA74(QA[74],  INT_QA[74], READA[74], READ_QA[74]);
  primitive = _mux mREAD_QA75(QA[75],  INT_QA[75], READA[75], READ_QA[75]);
  primitive = _mux mREAD_QA76(QA[76],  INT_QA[76], READA[76], READ_QA[76]);
  primitive = _mux mREAD_QA77(QA[77],  INT_QA[77], READA[77], READ_QA[77]);
  primitive = _mux mREAD_QA78(QA[78],  INT_QA[78], READA[78], READ_QA[78]);
  primitive = _mux mREAD_QA79(QA[79],  INT_QA[79], READA[79], READ_QA[79]);
  primitive = _mux mREAD_QA80(QA[80],  INT_QA[80], READA[80], READ_QA[80]);
  primitive = _mux mREAD_QA81(QA[81],  INT_QA[81], READA[81], READ_QA[81]);
  primitive = _mux mREAD_QA82(QA[82],  INT_QA[82], READA[82], READ_QA[82]);
  primitive = _mux mREAD_QA83(QA[83],  INT_QA[83], READA[83], READ_QA[83]);
  primitive = _mux mREAD_QA84(QA[84],  INT_QA[84], READA[84], READ_QA[84]);
  primitive = _mux mREAD_QA85(QA[85],  INT_QA[85], READA[85], READ_QA[85]);
  primitive = _mux mREAD_QA86(QA[86],  INT_QA[86], READA[86], READ_QA[86]);
  primitive = _mux mREAD_QA87(QA[87],  INT_QA[87], READA[87], READ_QA[87]);
  primitive = _mux mREAD_QA88(QA[88],  INT_QA[88], READA[88], READ_QA[88]);
  primitive = _mux mREAD_QA89(QA[89],  INT_QA[89], READA[89], READ_QA[89]);
  primitive = _mux mREAD_QA90(QA[90],  INT_QA[90], READA[90], READ_QA[90]);
  primitive = _mux mREAD_QA91(QA[91],  INT_QA[91], READA[91], READ_QA[91]);
  primitive = _mux mREAD_QA92(QA[92],  INT_QA[92], READA[92], READ_QA[92]);
  primitive = _mux mREAD_QA93(QA[93],  INT_QA[93], READA[93], READ_QA[93]);
  primitive = _mux mREAD_QA94(QA[94],  INT_QA[94], READA[94], READ_QA[94]);
  primitive = _mux mREAD_QA95(QA[95],  INT_QA[95], READA[95], READ_QA[95]);
  primitive = _mux mREAD_QA96(QA[96],  INT_QA[96], READA[96], READ_QA[96]);
  primitive = _mux mREAD_QA97(QA[97],  INT_QA[97], READA[97], READ_QA[97]);
  primitive = _mux mREAD_QA98(QA[98],  INT_QA[98], READA[98], READ_QA[98]);
  primitive = _mux mREAD_QA99(QA[99],  INT_QA[99], READA[99], READ_QA[99]);
  primitive = _mux mREAD_QA100(QA[100],  INT_QA[100], READA[100], READ_QA[100]);
  primitive = _mux mREAD_QA101(QA[101],  INT_QA[101], READA[101], READ_QA[101]);
  primitive = _mux mREAD_QA102(QA[102],  INT_QA[102], READA[102], READ_QA[102]);
  primitive = _mux mREAD_QA103(QA[103],  INT_QA[103], READA[103], READ_QA[103]);
  primitive = _mux mREAD_QA104(QA[104],  INT_QA[104], READA[104], READ_QA[104]);
  primitive = _mux mREAD_QA105(QA[105],  INT_QA[105], READA[105], READ_QA[105]);
  primitive = _mux mREAD_QA106(QA[106],  INT_QA[106], READA[106], READ_QA[106]);
  primitive = _mux mREAD_QA107(QA[107],  INT_QA[107], READA[107], READ_QA[107]);
  primitive = _mux mREAD_QA108(QA[108],  INT_QA[108], READA[108], READ_QA[108]);
  primitive = _mux mREAD_QA109(QA[109],  INT_QA[109], READA[109], READ_QA[109]);
  primitive = _mux mREAD_QA110(QA[110],  INT_QA[110], READA[110], READ_QA[110]);
  primitive = _mux mREAD_QA111(QA[111],  INT_QA[111], READA[111], READ_QA[111]);
  primitive = _mux mREAD_QA112(QA[112],  INT_QA[112], READA[112], READ_QA[112]);
  primitive = _mux mREAD_QA113(QA[113],  INT_QA[113], READA[113], READ_QA[113]);
  primitive = _mux mREAD_QA114(QA[114],  INT_QA[114], READA[114], READ_QA[114]);
  primitive = _mux mREAD_QA115(QA[115],  INT_QA[115], READA[115], READ_QA[115]);
  primitive = _mux mREAD_QA116(QA[116],  INT_QA[116], READA[116], READ_QA[116]);
  primitive = _mux mREAD_QA117(QA[117],  INT_QA[117], READA[117], READ_QA[117]);
  primitive = _mux mREAD_QA118(QA[118],  INT_QA[118], READA[118], READ_QA[118]);
  primitive = _mux mREAD_QA119(QA[119],  INT_QA[119], READA[119], READ_QA[119]);
  primitive = _mux mREAD_QA120(QA[120],  INT_QA[120], READA[120], READ_QA[120]);
  primitive = _mux mREAD_QA121(QA[121],  INT_QA[121], READA[121], READ_QA[121]);
  primitive = _mux mREAD_QA122(QA[122],  INT_QA[122], READA[122], READ_QA[122]);
  primitive = _mux mREAD_QA123(QA[123],  INT_QA[123], READA[123], READ_QA[123]);
  primitive = _mux mREAD_QA124(QA[124],  INT_QA[124], READA[124], READ_QA[124]);
  primitive = _mux mREAD_QA125(QA[125],  INT_QA[125], READA[125], READ_QA[125]);
  primitive = _mux mREAD_QA126(QA[126],  INT_QA[126], READA[126], READ_QA[126]);
  primitive = _mux mREAD_QA127(QA[127],  INT_QA[127], READA[127], READ_QA[127]);
  )
  intern (AAXOR) (array = 4 : 0;
    primitive = _xor xAAXOR0(BMUX_AA[0], BMUX_AA[0], AAXOR[0]);
    primitive = _xor xAAXOR1(BMUX_AA[1], BMUX_AA[1], AAXOR[1]);
    primitive = _xor xAAXOR2(BMUX_AA[2], BMUX_AA[2], AAXOR[2]);
    primitive = _xor xAAXOR3(BMUX_AA[3], BMUX_AA[3], AAXOR[3]);
    primitive = _xor xAAXOR4(BMUX_AA[4], BMUX_AA[4], AAXOR[4]);
  )
   intern (xA_addr_temp) (primitive = _or oxA_addr_temp( AAXOR[0], AAXOR[1], AAXOR[2], AAXOR[3], AAXOR[4], xA_addr_temp);)
   intern (xA_addr) (primitive = _and oxA_addr(NOT_CENA,xA_addr_temp,xA_addr);)
   intern (READ_QAX) (array = 127 : 0;
     primitive = _mux mREAD_QAX0 (READ_QA[0], tiex_readq, xA_addr, READ_QAX[0]);
     primitive = _mux mREAD_QAX1 (READ_QA[1], tiex_readq, xA_addr, READ_QAX[1]);
     primitive = _mux mREAD_QAX2 (READ_QA[2], tiex_readq, xA_addr, READ_QAX[2]);
     primitive = _mux mREAD_QAX3 (READ_QA[3], tiex_readq, xA_addr, READ_QAX[3]);
     primitive = _mux mREAD_QAX4 (READ_QA[4], tiex_readq, xA_addr, READ_QAX[4]);
     primitive = _mux mREAD_QAX5 (READ_QA[5], tiex_readq, xA_addr, READ_QAX[5]);
     primitive = _mux mREAD_QAX6 (READ_QA[6], tiex_readq, xA_addr, READ_QAX[6]);
     primitive = _mux mREAD_QAX7 (READ_QA[7], tiex_readq, xA_addr, READ_QAX[7]);
     primitive = _mux mREAD_QAX8 (READ_QA[8], tiex_readq, xA_addr, READ_QAX[8]);
     primitive = _mux mREAD_QAX9 (READ_QA[9], tiex_readq, xA_addr, READ_QAX[9]);
     primitive = _mux mREAD_QAX10 (READ_QA[10], tiex_readq, xA_addr, READ_QAX[10]);
     primitive = _mux mREAD_QAX11 (READ_QA[11], tiex_readq, xA_addr, READ_QAX[11]);
     primitive = _mux mREAD_QAX12 (READ_QA[12], tiex_readq, xA_addr, READ_QAX[12]);
     primitive = _mux mREAD_QAX13 (READ_QA[13], tiex_readq, xA_addr, READ_QAX[13]);
     primitive = _mux mREAD_QAX14 (READ_QA[14], tiex_readq, xA_addr, READ_QAX[14]);
     primitive = _mux mREAD_QAX15 (READ_QA[15], tiex_readq, xA_addr, READ_QAX[15]);
     primitive = _mux mREAD_QAX16 (READ_QA[16], tiex_readq, xA_addr, READ_QAX[16]);
     primitive = _mux mREAD_QAX17 (READ_QA[17], tiex_readq, xA_addr, READ_QAX[17]);
     primitive = _mux mREAD_QAX18 (READ_QA[18], tiex_readq, xA_addr, READ_QAX[18]);
     primitive = _mux mREAD_QAX19 (READ_QA[19], tiex_readq, xA_addr, READ_QAX[19]);
     primitive = _mux mREAD_QAX20 (READ_QA[20], tiex_readq, xA_addr, READ_QAX[20]);
     primitive = _mux mREAD_QAX21 (READ_QA[21], tiex_readq, xA_addr, READ_QAX[21]);
     primitive = _mux mREAD_QAX22 (READ_QA[22], tiex_readq, xA_addr, READ_QAX[22]);
     primitive = _mux mREAD_QAX23 (READ_QA[23], tiex_readq, xA_addr, READ_QAX[23]);
     primitive = _mux mREAD_QAX24 (READ_QA[24], tiex_readq, xA_addr, READ_QAX[24]);
     primitive = _mux mREAD_QAX25 (READ_QA[25], tiex_readq, xA_addr, READ_QAX[25]);
     primitive = _mux mREAD_QAX26 (READ_QA[26], tiex_readq, xA_addr, READ_QAX[26]);
     primitive = _mux mREAD_QAX27 (READ_QA[27], tiex_readq, xA_addr, READ_QAX[27]);
     primitive = _mux mREAD_QAX28 (READ_QA[28], tiex_readq, xA_addr, READ_QAX[28]);
     primitive = _mux mREAD_QAX29 (READ_QA[29], tiex_readq, xA_addr, READ_QAX[29]);
     primitive = _mux mREAD_QAX30 (READ_QA[30], tiex_readq, xA_addr, READ_QAX[30]);
     primitive = _mux mREAD_QAX31 (READ_QA[31], tiex_readq, xA_addr, READ_QAX[31]);
     primitive = _mux mREAD_QAX32 (READ_QA[32], tiex_readq, xA_addr, READ_QAX[32]);
     primitive = _mux mREAD_QAX33 (READ_QA[33], tiex_readq, xA_addr, READ_QAX[33]);
     primitive = _mux mREAD_QAX34 (READ_QA[34], tiex_readq, xA_addr, READ_QAX[34]);
     primitive = _mux mREAD_QAX35 (READ_QA[35], tiex_readq, xA_addr, READ_QAX[35]);
     primitive = _mux mREAD_QAX36 (READ_QA[36], tiex_readq, xA_addr, READ_QAX[36]);
     primitive = _mux mREAD_QAX37 (READ_QA[37], tiex_readq, xA_addr, READ_QAX[37]);
     primitive = _mux mREAD_QAX38 (READ_QA[38], tiex_readq, xA_addr, READ_QAX[38]);
     primitive = _mux mREAD_QAX39 (READ_QA[39], tiex_readq, xA_addr, READ_QAX[39]);
     primitive = _mux mREAD_QAX40 (READ_QA[40], tiex_readq, xA_addr, READ_QAX[40]);
     primitive = _mux mREAD_QAX41 (READ_QA[41], tiex_readq, xA_addr, READ_QAX[41]);
     primitive = _mux mREAD_QAX42 (READ_QA[42], tiex_readq, xA_addr, READ_QAX[42]);
     primitive = _mux mREAD_QAX43 (READ_QA[43], tiex_readq, xA_addr, READ_QAX[43]);
     primitive = _mux mREAD_QAX44 (READ_QA[44], tiex_readq, xA_addr, READ_QAX[44]);
     primitive = _mux mREAD_QAX45 (READ_QA[45], tiex_readq, xA_addr, READ_QAX[45]);
     primitive = _mux mREAD_QAX46 (READ_QA[46], tiex_readq, xA_addr, READ_QAX[46]);
     primitive = _mux mREAD_QAX47 (READ_QA[47], tiex_readq, xA_addr, READ_QAX[47]);
     primitive = _mux mREAD_QAX48 (READ_QA[48], tiex_readq, xA_addr, READ_QAX[48]);
     primitive = _mux mREAD_QAX49 (READ_QA[49], tiex_readq, xA_addr, READ_QAX[49]);
     primitive = _mux mREAD_QAX50 (READ_QA[50], tiex_readq, xA_addr, READ_QAX[50]);
     primitive = _mux mREAD_QAX51 (READ_QA[51], tiex_readq, xA_addr, READ_QAX[51]);
     primitive = _mux mREAD_QAX52 (READ_QA[52], tiex_readq, xA_addr, READ_QAX[52]);
     primitive = _mux mREAD_QAX53 (READ_QA[53], tiex_readq, xA_addr, READ_QAX[53]);
     primitive = _mux mREAD_QAX54 (READ_QA[54], tiex_readq, xA_addr, READ_QAX[54]);
     primitive = _mux mREAD_QAX55 (READ_QA[55], tiex_readq, xA_addr, READ_QAX[55]);
     primitive = _mux mREAD_QAX56 (READ_QA[56], tiex_readq, xA_addr, READ_QAX[56]);
     primitive = _mux mREAD_QAX57 (READ_QA[57], tiex_readq, xA_addr, READ_QAX[57]);
     primitive = _mux mREAD_QAX58 (READ_QA[58], tiex_readq, xA_addr, READ_QAX[58]);
     primitive = _mux mREAD_QAX59 (READ_QA[59], tiex_readq, xA_addr, READ_QAX[59]);
     primitive = _mux mREAD_QAX60 (READ_QA[60], tiex_readq, xA_addr, READ_QAX[60]);
     primitive = _mux mREAD_QAX61 (READ_QA[61], tiex_readq, xA_addr, READ_QAX[61]);
     primitive = _mux mREAD_QAX62 (READ_QA[62], tiex_readq, xA_addr, READ_QAX[62]);
     primitive = _mux mREAD_QAX63 (READ_QA[63], tiex_readq, xA_addr, READ_QAX[63]);
     primitive = _mux mREAD_QAX64 (READ_QA[64], tiex_readq, xA_addr, READ_QAX[64]);
     primitive = _mux mREAD_QAX65 (READ_QA[65], tiex_readq, xA_addr, READ_QAX[65]);
     primitive = _mux mREAD_QAX66 (READ_QA[66], tiex_readq, xA_addr, READ_QAX[66]);
     primitive = _mux mREAD_QAX67 (READ_QA[67], tiex_readq, xA_addr, READ_QAX[67]);
     primitive = _mux mREAD_QAX68 (READ_QA[68], tiex_readq, xA_addr, READ_QAX[68]);
     primitive = _mux mREAD_QAX69 (READ_QA[69], tiex_readq, xA_addr, READ_QAX[69]);
     primitive = _mux mREAD_QAX70 (READ_QA[70], tiex_readq, xA_addr, READ_QAX[70]);
     primitive = _mux mREAD_QAX71 (READ_QA[71], tiex_readq, xA_addr, READ_QAX[71]);
     primitive = _mux mREAD_QAX72 (READ_QA[72], tiex_readq, xA_addr, READ_QAX[72]);
     primitive = _mux mREAD_QAX73 (READ_QA[73], tiex_readq, xA_addr, READ_QAX[73]);
     primitive = _mux mREAD_QAX74 (READ_QA[74], tiex_readq, xA_addr, READ_QAX[74]);
     primitive = _mux mREAD_QAX75 (READ_QA[75], tiex_readq, xA_addr, READ_QAX[75]);
     primitive = _mux mREAD_QAX76 (READ_QA[76], tiex_readq, xA_addr, READ_QAX[76]);
     primitive = _mux mREAD_QAX77 (READ_QA[77], tiex_readq, xA_addr, READ_QAX[77]);
     primitive = _mux mREAD_QAX78 (READ_QA[78], tiex_readq, xA_addr, READ_QAX[78]);
     primitive = _mux mREAD_QAX79 (READ_QA[79], tiex_readq, xA_addr, READ_QAX[79]);
     primitive = _mux mREAD_QAX80 (READ_QA[80], tiex_readq, xA_addr, READ_QAX[80]);
     primitive = _mux mREAD_QAX81 (READ_QA[81], tiex_readq, xA_addr, READ_QAX[81]);
     primitive = _mux mREAD_QAX82 (READ_QA[82], tiex_readq, xA_addr, READ_QAX[82]);
     primitive = _mux mREAD_QAX83 (READ_QA[83], tiex_readq, xA_addr, READ_QAX[83]);
     primitive = _mux mREAD_QAX84 (READ_QA[84], tiex_readq, xA_addr, READ_QAX[84]);
     primitive = _mux mREAD_QAX85 (READ_QA[85], tiex_readq, xA_addr, READ_QAX[85]);
     primitive = _mux mREAD_QAX86 (READ_QA[86], tiex_readq, xA_addr, READ_QAX[86]);
     primitive = _mux mREAD_QAX87 (READ_QA[87], tiex_readq, xA_addr, READ_QAX[87]);
     primitive = _mux mREAD_QAX88 (READ_QA[88], tiex_readq, xA_addr, READ_QAX[88]);
     primitive = _mux mREAD_QAX89 (READ_QA[89], tiex_readq, xA_addr, READ_QAX[89]);
     primitive = _mux mREAD_QAX90 (READ_QA[90], tiex_readq, xA_addr, READ_QAX[90]);
     primitive = _mux mREAD_QAX91 (READ_QA[91], tiex_readq, xA_addr, READ_QAX[91]);
     primitive = _mux mREAD_QAX92 (READ_QA[92], tiex_readq, xA_addr, READ_QAX[92]);
     primitive = _mux mREAD_QAX93 (READ_QA[93], tiex_readq, xA_addr, READ_QAX[93]);
     primitive = _mux mREAD_QAX94 (READ_QA[94], tiex_readq, xA_addr, READ_QAX[94]);
     primitive = _mux mREAD_QAX95 (READ_QA[95], tiex_readq, xA_addr, READ_QAX[95]);
     primitive = _mux mREAD_QAX96 (READ_QA[96], tiex_readq, xA_addr, READ_QAX[96]);
     primitive = _mux mREAD_QAX97 (READ_QA[97], tiex_readq, xA_addr, READ_QAX[97]);
     primitive = _mux mREAD_QAX98 (READ_QA[98], tiex_readq, xA_addr, READ_QAX[98]);
     primitive = _mux mREAD_QAX99 (READ_QA[99], tiex_readq, xA_addr, READ_QAX[99]);
     primitive = _mux mREAD_QAX100 (READ_QA[100], tiex_readq, xA_addr, READ_QAX[100]);
     primitive = _mux mREAD_QAX101 (READ_QA[101], tiex_readq, xA_addr, READ_QAX[101]);
     primitive = _mux mREAD_QAX102 (READ_QA[102], tiex_readq, xA_addr, READ_QAX[102]);
     primitive = _mux mREAD_QAX103 (READ_QA[103], tiex_readq, xA_addr, READ_QAX[103]);
     primitive = _mux mREAD_QAX104 (READ_QA[104], tiex_readq, xA_addr, READ_QAX[104]);
     primitive = _mux mREAD_QAX105 (READ_QA[105], tiex_readq, xA_addr, READ_QAX[105]);
     primitive = _mux mREAD_QAX106 (READ_QA[106], tiex_readq, xA_addr, READ_QAX[106]);
     primitive = _mux mREAD_QAX107 (READ_QA[107], tiex_readq, xA_addr, READ_QAX[107]);
     primitive = _mux mREAD_QAX108 (READ_QA[108], tiex_readq, xA_addr, READ_QAX[108]);
     primitive = _mux mREAD_QAX109 (READ_QA[109], tiex_readq, xA_addr, READ_QAX[109]);
     primitive = _mux mREAD_QAX110 (READ_QA[110], tiex_readq, xA_addr, READ_QAX[110]);
     primitive = _mux mREAD_QAX111 (READ_QA[111], tiex_readq, xA_addr, READ_QAX[111]);
     primitive = _mux mREAD_QAX112 (READ_QA[112], tiex_readq, xA_addr, READ_QAX[112]);
     primitive = _mux mREAD_QAX113 (READ_QA[113], tiex_readq, xA_addr, READ_QAX[113]);
     primitive = _mux mREAD_QAX114 (READ_QA[114], tiex_readq, xA_addr, READ_QAX[114]);
     primitive = _mux mREAD_QAX115 (READ_QA[115], tiex_readq, xA_addr, READ_QAX[115]);
     primitive = _mux mREAD_QAX116 (READ_QA[116], tiex_readq, xA_addr, READ_QAX[116]);
     primitive = _mux mREAD_QAX117 (READ_QA[117], tiex_readq, xA_addr, READ_QAX[117]);
     primitive = _mux mREAD_QAX118 (READ_QA[118], tiex_readq, xA_addr, READ_QAX[118]);
     primitive = _mux mREAD_QAX119 (READ_QA[119], tiex_readq, xA_addr, READ_QAX[119]);
     primitive = _mux mREAD_QAX120 (READ_QA[120], tiex_readq, xA_addr, READ_QAX[120]);
     primitive = _mux mREAD_QAX121 (READ_QA[121], tiex_readq, xA_addr, READ_QAX[121]);
     primitive = _mux mREAD_QAX122 (READ_QA[122], tiex_readq, xA_addr, READ_QAX[122]);
     primitive = _mux mREAD_QAX123 (READ_QA[123], tiex_readq, xA_addr, READ_QAX[123]);
     primitive = _mux mREAD_QAX124 (READ_QA[124], tiex_readq, xA_addr, READ_QAX[124]);
     primitive = _mux mREAD_QAX125 (READ_QA[125], tiex_readq, xA_addr, READ_QAX[125]);
     primitive = _mux mREAD_QAX126 (READ_QA[126], tiex_readq, xA_addr, READ_QAX[126]);
     primitive = _mux mREAD_QAX127 (READ_QA[127], tiex_readq, xA_addr, READ_QAX[127]);
  )
     intern (DA_scan) (array = 127 : 0;
     primitive = _mux mDA_scan0(READ_QAX[0], QA[1], DFTRAMBYP, DA_scan[0]);
     primitive = _mux mDA_scan1(READ_QAX[1], QA[2], DFTRAMBYP, DA_scan[1]);
     primitive = _mux mDA_scan2(READ_QAX[2], QA[3], DFTRAMBYP, DA_scan[2]);
     primitive = _mux mDA_scan3(READ_QAX[3], QA[4], DFTRAMBYP, DA_scan[3]);
     primitive = _mux mDA_scan4(READ_QAX[4], QA[5], DFTRAMBYP, DA_scan[4]);
     primitive = _mux mDA_scan5(READ_QAX[5], QA[6], DFTRAMBYP, DA_scan[5]);
     primitive = _mux mDA_scan6(READ_QAX[6], QA[7], DFTRAMBYP, DA_scan[6]);
     primitive = _mux mDA_scan7(READ_QAX[7], QA[8], DFTRAMBYP, DA_scan[7]);
     primitive = _mux mDA_scan8(READ_QAX[8], QA[9], DFTRAMBYP, DA_scan[8]);
     primitive = _mux mDA_scan9(READ_QAX[9], QA[10], DFTRAMBYP, DA_scan[9]);
     primitive = _mux mDA_scan10(READ_QAX[10], QA[11], DFTRAMBYP, DA_scan[10]);
     primitive = _mux mDA_scan11(READ_QAX[11], QA[12], DFTRAMBYP, DA_scan[11]);
     primitive = _mux mDA_scan12(READ_QAX[12], QA[13], DFTRAMBYP, DA_scan[12]);
     primitive = _mux mDA_scan13(READ_QAX[13], QA[14], DFTRAMBYP, DA_scan[13]);
     primitive = _mux mDA_scan14(READ_QAX[14], QA[15], DFTRAMBYP, DA_scan[14]);
     primitive = _mux mDA_scan15(READ_QAX[15], QA[16], DFTRAMBYP, DA_scan[15]);
     primitive = _mux mDA_scan16(READ_QAX[16], QA[17], DFTRAMBYP, DA_scan[16]);
     primitive = _mux mDA_scan17(READ_QAX[17], QA[18], DFTRAMBYP, DA_scan[17]);
     primitive = _mux mDA_scan18(READ_QAX[18], QA[19], DFTRAMBYP, DA_scan[18]);
     primitive = _mux mDA_scan19(READ_QAX[19], QA[20], DFTRAMBYP, DA_scan[19]);
     primitive = _mux mDA_scan20(READ_QAX[20], QA[21], DFTRAMBYP, DA_scan[20]);
     primitive = _mux mDA_scan21(READ_QAX[21], QA[22], DFTRAMBYP, DA_scan[21]);
     primitive = _mux mDA_scan22(READ_QAX[22], QA[23], DFTRAMBYP, DA_scan[22]);
     primitive = _mux mDA_scan23(READ_QAX[23], QA[24], DFTRAMBYP, DA_scan[23]);
     primitive = _mux mDA_scan24(READ_QAX[24], QA[25], DFTRAMBYP, DA_scan[24]);
     primitive = _mux mDA_scan25(READ_QAX[25], QA[26], DFTRAMBYP, DA_scan[25]);
     primitive = _mux mDA_scan26(READ_QAX[26], QA[27], DFTRAMBYP, DA_scan[26]);
     primitive = _mux mDA_scan27(READ_QAX[27], QA[28], DFTRAMBYP, DA_scan[27]);
     primitive = _mux mDA_scan28(READ_QAX[28], QA[29], DFTRAMBYP, DA_scan[28]);
     primitive = _mux mDA_scan29(READ_QAX[29], QA[30], DFTRAMBYP, DA_scan[29]);
     primitive = _mux mDA_scan30(READ_QAX[30], QA[31], DFTRAMBYP, DA_scan[30]);
     primitive = _mux mDA_scan31(READ_QAX[31], QA[32], DFTRAMBYP, DA_scan[31]);
     primitive = _mux mDA_scan32(READ_QAX[32], QA[33], DFTRAMBYP, DA_scan[32]);
     primitive = _mux mDA_scan33(READ_QAX[33], QA[34], DFTRAMBYP, DA_scan[33]);
     primitive = _mux mDA_scan34(READ_QAX[34], QA[35], DFTRAMBYP, DA_scan[34]);
     primitive = _mux mDA_scan35(READ_QAX[35], QA[36], DFTRAMBYP, DA_scan[35]);
     primitive = _mux mDA_scan36(READ_QAX[36], QA[37], DFTRAMBYP, DA_scan[36]);
     primitive = _mux mDA_scan37(READ_QAX[37], QA[38], DFTRAMBYP, DA_scan[37]);
     primitive = _mux mDA_scan38(READ_QAX[38], QA[39], DFTRAMBYP, DA_scan[38]);
     primitive = _mux mDA_scan39(READ_QAX[39], QA[40], DFTRAMBYP, DA_scan[39]);
     primitive = _mux mDA_scan40(READ_QAX[40], QA[41], DFTRAMBYP, DA_scan[40]);
     primitive = _mux mDA_scan41(READ_QAX[41], QA[42], DFTRAMBYP, DA_scan[41]);
     primitive = _mux mDA_scan42(READ_QAX[42], QA[43], DFTRAMBYP, DA_scan[42]);
     primitive = _mux mDA_scan43(READ_QAX[43], QA[44], DFTRAMBYP, DA_scan[43]);
     primitive = _mux mDA_scan44(READ_QAX[44], QA[45], DFTRAMBYP, DA_scan[44]);
     primitive = _mux mDA_scan45(READ_QAX[45], QA[46], DFTRAMBYP, DA_scan[45]);
     primitive = _mux mDA_scan46(READ_QAX[46], QA[47], DFTRAMBYP, DA_scan[46]);
     primitive = _mux mDA_scan47(READ_QAX[47], QA[48], DFTRAMBYP, DA_scan[47]);
     primitive = _mux mDA_scan48(READ_QAX[48], QA[49], DFTRAMBYP, DA_scan[48]);
     primitive = _mux mDA_scan49(READ_QAX[49], QA[50], DFTRAMBYP, DA_scan[49]);
     primitive = _mux mDA_scan50(READ_QAX[50], QA[51], DFTRAMBYP, DA_scan[50]);
     primitive = _mux mDA_scan51(READ_QAX[51], QA[52], DFTRAMBYP, DA_scan[51]);
     primitive = _mux mDA_scan52(READ_QAX[52], QA[53], DFTRAMBYP, DA_scan[52]);
     primitive = _mux mDA_scan53(READ_QAX[53], QA[54], DFTRAMBYP, DA_scan[53]);
     primitive = _mux mDA_scan54(READ_QAX[54], QA[55], DFTRAMBYP, DA_scan[54]);
     primitive = _mux mDA_scan55(READ_QAX[55], QA[56], DFTRAMBYP, DA_scan[55]);
     primitive = _mux mDA_scan56(READ_QAX[56], QA[57], DFTRAMBYP, DA_scan[56]);
     primitive = _mux mDA_scan57(READ_QAX[57], QA[58], DFTRAMBYP, DA_scan[57]);
     primitive = _mux mDA_scan58(READ_QAX[58], QA[59], DFTRAMBYP, DA_scan[58]);
     primitive = _mux mDA_scan59(READ_QAX[59], QA[60], DFTRAMBYP, DA_scan[59]);
     primitive = _mux mDA_scan60(READ_QAX[60], QA[61], DFTRAMBYP, DA_scan[60]);
     primitive = _mux mDA_scan61(READ_QAX[61], QA[62], DFTRAMBYP, DA_scan[61]);
     primitive = _mux mDA_scan62(READ_QAX[62], QA[63], DFTRAMBYP, DA_scan[62]);
     primitive = _mux mDA_scan63(READ_QAX[63], mtie_sel0, DFTRAMBYP, DA_scan[63]);
     primitive = _mux mDA_scan64(READ_QAX[64], mtie_sel0, DFTRAMBYP, DA_scan[64]);
     primitive = _mux mDA_scan65(READ_QAX[65], QA[64], DFTRAMBYP, DA_scan[65]);
     primitive = _mux mDA_scan66(READ_QAX[66], QA[65], DFTRAMBYP, DA_scan[66]);
     primitive = _mux mDA_scan67(READ_QAX[67], QA[66], DFTRAMBYP, DA_scan[67]);
     primitive = _mux mDA_scan68(READ_QAX[68], QA[67], DFTRAMBYP, DA_scan[68]);
     primitive = _mux mDA_scan69(READ_QAX[69], QA[68], DFTRAMBYP, DA_scan[69]);
     primitive = _mux mDA_scan70(READ_QAX[70], QA[69], DFTRAMBYP, DA_scan[70]);
     primitive = _mux mDA_scan71(READ_QAX[71], QA[70], DFTRAMBYP, DA_scan[71]);
     primitive = _mux mDA_scan72(READ_QAX[72], QA[71], DFTRAMBYP, DA_scan[72]);
     primitive = _mux mDA_scan73(READ_QAX[73], QA[72], DFTRAMBYP, DA_scan[73]);
     primitive = _mux mDA_scan74(READ_QAX[74], QA[73], DFTRAMBYP, DA_scan[74]);
     primitive = _mux mDA_scan75(READ_QAX[75], QA[74], DFTRAMBYP, DA_scan[75]);
     primitive = _mux mDA_scan76(READ_QAX[76], QA[75], DFTRAMBYP, DA_scan[76]);
     primitive = _mux mDA_scan77(READ_QAX[77], QA[76], DFTRAMBYP, DA_scan[77]);
     primitive = _mux mDA_scan78(READ_QAX[78], QA[77], DFTRAMBYP, DA_scan[78]);
     primitive = _mux mDA_scan79(READ_QAX[79], QA[78], DFTRAMBYP, DA_scan[79]);
     primitive = _mux mDA_scan80(READ_QAX[80], QA[79], DFTRAMBYP, DA_scan[80]);
     primitive = _mux mDA_scan81(READ_QAX[81], QA[80], DFTRAMBYP, DA_scan[81]);
     primitive = _mux mDA_scan82(READ_QAX[82], QA[81], DFTRAMBYP, DA_scan[82]);
     primitive = _mux mDA_scan83(READ_QAX[83], QA[82], DFTRAMBYP, DA_scan[83]);
     primitive = _mux mDA_scan84(READ_QAX[84], QA[83], DFTRAMBYP, DA_scan[84]);
     primitive = _mux mDA_scan85(READ_QAX[85], QA[84], DFTRAMBYP, DA_scan[85]);
     primitive = _mux mDA_scan86(READ_QAX[86], QA[85], DFTRAMBYP, DA_scan[86]);
     primitive = _mux mDA_scan87(READ_QAX[87], QA[86], DFTRAMBYP, DA_scan[87]);
     primitive = _mux mDA_scan88(READ_QAX[88], QA[87], DFTRAMBYP, DA_scan[88]);
     primitive = _mux mDA_scan89(READ_QAX[89], QA[88], DFTRAMBYP, DA_scan[89]);
     primitive = _mux mDA_scan90(READ_QAX[90], QA[89], DFTRAMBYP, DA_scan[90]);
     primitive = _mux mDA_scan91(READ_QAX[91], QA[90], DFTRAMBYP, DA_scan[91]);
     primitive = _mux mDA_scan92(READ_QAX[92], QA[91], DFTRAMBYP, DA_scan[92]);
     primitive = _mux mDA_scan93(READ_QAX[93], QA[92], DFTRAMBYP, DA_scan[93]);
     primitive = _mux mDA_scan94(READ_QAX[94], QA[93], DFTRAMBYP, DA_scan[94]);
     primitive = _mux mDA_scan95(READ_QAX[95], QA[94], DFTRAMBYP, DA_scan[95]);
     primitive = _mux mDA_scan96(READ_QAX[96], QA[95], DFTRAMBYP, DA_scan[96]);
     primitive = _mux mDA_scan97(READ_QAX[97], QA[96], DFTRAMBYP, DA_scan[97]);
     primitive = _mux mDA_scan98(READ_QAX[98], QA[97], DFTRAMBYP, DA_scan[98]);
     primitive = _mux mDA_scan99(READ_QAX[99], QA[98], DFTRAMBYP, DA_scan[99]);
     primitive = _mux mDA_scan100(READ_QAX[100], QA[99], DFTRAMBYP, DA_scan[100]);
     primitive = _mux mDA_scan101(READ_QAX[101], QA[100], DFTRAMBYP, DA_scan[101]);
     primitive = _mux mDA_scan102(READ_QAX[102], QA[101], DFTRAMBYP, DA_scan[102]);
     primitive = _mux mDA_scan103(READ_QAX[103], QA[102], DFTRAMBYP, DA_scan[103]);
     primitive = _mux mDA_scan104(READ_QAX[104], QA[103], DFTRAMBYP, DA_scan[104]);
     primitive = _mux mDA_scan105(READ_QAX[105], QA[104], DFTRAMBYP, DA_scan[105]);
     primitive = _mux mDA_scan106(READ_QAX[106], QA[105], DFTRAMBYP, DA_scan[106]);
     primitive = _mux mDA_scan107(READ_QAX[107], QA[106], DFTRAMBYP, DA_scan[107]);
     primitive = _mux mDA_scan108(READ_QAX[108], QA[107], DFTRAMBYP, DA_scan[108]);
     primitive = _mux mDA_scan109(READ_QAX[109], QA[108], DFTRAMBYP, DA_scan[109]);
     primitive = _mux mDA_scan110(READ_QAX[110], QA[109], DFTRAMBYP, DA_scan[110]);
     primitive = _mux mDA_scan111(READ_QAX[111], QA[110], DFTRAMBYP, DA_scan[111]);
     primitive = _mux mDA_scan112(READ_QAX[112], QA[111], DFTRAMBYP, DA_scan[112]);
     primitive = _mux mDA_scan113(READ_QAX[113], QA[112], DFTRAMBYP, DA_scan[113]);
     primitive = _mux mDA_scan114(READ_QAX[114], QA[113], DFTRAMBYP, DA_scan[114]);
     primitive = _mux mDA_scan115(READ_QAX[115], QA[114], DFTRAMBYP, DA_scan[115]);
     primitive = _mux mDA_scan116(READ_QAX[116], QA[115], DFTRAMBYP, DA_scan[116]);
     primitive = _mux mDA_scan117(READ_QAX[117], QA[116], DFTRAMBYP, DA_scan[117]);
     primitive = _mux mDA_scan118(READ_QAX[118], QA[117], DFTRAMBYP, DA_scan[118]);
     primitive = _mux mDA_scan119(READ_QAX[119], QA[118], DFTRAMBYP, DA_scan[119]);
     primitive = _mux mDA_scan120(READ_QAX[120], QA[119], DFTRAMBYP, DA_scan[120]);
     primitive = _mux mDA_scan121(READ_QAX[121], QA[120], DFTRAMBYP, DA_scan[121]);
     primitive = _mux mDA_scan122(READ_QAX[122], QA[121], DFTRAMBYP, DA_scan[122]);
     primitive = _mux mDA_scan123(READ_QAX[123], QA[122], DFTRAMBYP, DA_scan[123]);
     primitive = _mux mDA_scan124(READ_QAX[124], QA[123], DFTRAMBYP, DA_scan[124]);
     primitive = _mux mDA_scan125(READ_QAX[125], QA[124], DFTRAMBYP, DA_scan[125]);
     primitive = _mux mDA_scan126(READ_QAX[126], QA[125], DFTRAMBYP, DA_scan[126]);
     primitive = _mux mDA_scan127(READ_QAX[127], QA[126], DFTRAMBYP, DA_scan[127]);
  )
  output (QA) ( array = 127 : 0;
   instance = rf2_32x128_wm1_scanflop uDQA0 (.CLK(CLKA), .SE(SEA), .SI(QA[1]), .D(DA_scan[0]), .Q(QA[0]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA1 (.CLK(CLKA), .SE(SEA), .SI(QA[2]), .D(DA_scan[1]), .Q(QA[1]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA2 (.CLK(CLKA), .SE(SEA), .SI(QA[3]), .D(DA_scan[2]), .Q(QA[2]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA3 (.CLK(CLKA), .SE(SEA), .SI(QA[4]), .D(DA_scan[3]), .Q(QA[3]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA4 (.CLK(CLKA), .SE(SEA), .SI(QA[5]), .D(DA_scan[4]), .Q(QA[4]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA5 (.CLK(CLKA), .SE(SEA), .SI(QA[6]), .D(DA_scan[5]), .Q(QA[5]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA6 (.CLK(CLKA), .SE(SEA), .SI(QA[7]), .D(DA_scan[6]), .Q(QA[6]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA7 (.CLK(CLKA), .SE(SEA), .SI(QA[8]), .D(DA_scan[7]), .Q(QA[7]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA8 (.CLK(CLKA), .SE(SEA), .SI(QA[9]), .D(DA_scan[8]), .Q(QA[8]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA9 (.CLK(CLKA), .SE(SEA), .SI(QA[10]), .D(DA_scan[9]), .Q(QA[9]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA10 (.CLK(CLKA), .SE(SEA), .SI(QA[11]), .D(DA_scan[10]), .Q(QA[10]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA11 (.CLK(CLKA), .SE(SEA), .SI(QA[12]), .D(DA_scan[11]), .Q(QA[11]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA12 (.CLK(CLKA), .SE(SEA), .SI(QA[13]), .D(DA_scan[12]), .Q(QA[12]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA13 (.CLK(CLKA), .SE(SEA), .SI(QA[14]), .D(DA_scan[13]), .Q(QA[13]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA14 (.CLK(CLKA), .SE(SEA), .SI(QA[15]), .D(DA_scan[14]), .Q(QA[14]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA15 (.CLK(CLKA), .SE(SEA), .SI(QA[16]), .D(DA_scan[15]), .Q(QA[15]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA16 (.CLK(CLKA), .SE(SEA), .SI(QA[17]), .D(DA_scan[16]), .Q(QA[16]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA17 (.CLK(CLKA), .SE(SEA), .SI(QA[18]), .D(DA_scan[17]), .Q(QA[17]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA18 (.CLK(CLKA), .SE(SEA), .SI(QA[19]), .D(DA_scan[18]), .Q(QA[18]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA19 (.CLK(CLKA), .SE(SEA), .SI(QA[20]), .D(DA_scan[19]), .Q(QA[19]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA20 (.CLK(CLKA), .SE(SEA), .SI(QA[21]), .D(DA_scan[20]), .Q(QA[20]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA21 (.CLK(CLKA), .SE(SEA), .SI(QA[22]), .D(DA_scan[21]), .Q(QA[21]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA22 (.CLK(CLKA), .SE(SEA), .SI(QA[23]), .D(DA_scan[22]), .Q(QA[22]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA23 (.CLK(CLKA), .SE(SEA), .SI(QA[24]), .D(DA_scan[23]), .Q(QA[23]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA24 (.CLK(CLKA), .SE(SEA), .SI(QA[25]), .D(DA_scan[24]), .Q(QA[24]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA25 (.CLK(CLKA), .SE(SEA), .SI(QA[26]), .D(DA_scan[25]), .Q(QA[25]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA26 (.CLK(CLKA), .SE(SEA), .SI(QA[27]), .D(DA_scan[26]), .Q(QA[26]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA27 (.CLK(CLKA), .SE(SEA), .SI(QA[28]), .D(DA_scan[27]), .Q(QA[27]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA28 (.CLK(CLKA), .SE(SEA), .SI(QA[29]), .D(DA_scan[28]), .Q(QA[28]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA29 (.CLK(CLKA), .SE(SEA), .SI(QA[30]), .D(DA_scan[29]), .Q(QA[29]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA30 (.CLK(CLKA), .SE(SEA), .SI(QA[31]), .D(DA_scan[30]), .Q(QA[30]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA31 (.CLK(CLKA), .SE(SEA), .SI(QA[32]), .D(DA_scan[31]), .Q(QA[31]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA32 (.CLK(CLKA), .SE(SEA), .SI(QA[33]), .D(DA_scan[32]), .Q(QA[32]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA33 (.CLK(CLKA), .SE(SEA), .SI(QA[34]), .D(DA_scan[33]), .Q(QA[33]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA34 (.CLK(CLKA), .SE(SEA), .SI(QA[35]), .D(DA_scan[34]), .Q(QA[34]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA35 (.CLK(CLKA), .SE(SEA), .SI(QA[36]), .D(DA_scan[35]), .Q(QA[35]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA36 (.CLK(CLKA), .SE(SEA), .SI(QA[37]), .D(DA_scan[36]), .Q(QA[36]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA37 (.CLK(CLKA), .SE(SEA), .SI(QA[38]), .D(DA_scan[37]), .Q(QA[37]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA38 (.CLK(CLKA), .SE(SEA), .SI(QA[39]), .D(DA_scan[38]), .Q(QA[38]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA39 (.CLK(CLKA), .SE(SEA), .SI(QA[40]), .D(DA_scan[39]), .Q(QA[39]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA40 (.CLK(CLKA), .SE(SEA), .SI(QA[41]), .D(DA_scan[40]), .Q(QA[40]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA41 (.CLK(CLKA), .SE(SEA), .SI(QA[42]), .D(DA_scan[41]), .Q(QA[41]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA42 (.CLK(CLKA), .SE(SEA), .SI(QA[43]), .D(DA_scan[42]), .Q(QA[42]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA43 (.CLK(CLKA), .SE(SEA), .SI(QA[44]), .D(DA_scan[43]), .Q(QA[43]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA44 (.CLK(CLKA), .SE(SEA), .SI(QA[45]), .D(DA_scan[44]), .Q(QA[44]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA45 (.CLK(CLKA), .SE(SEA), .SI(QA[46]), .D(DA_scan[45]), .Q(QA[45]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA46 (.CLK(CLKA), .SE(SEA), .SI(QA[47]), .D(DA_scan[46]), .Q(QA[46]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA47 (.CLK(CLKA), .SE(SEA), .SI(QA[48]), .D(DA_scan[47]), .Q(QA[47]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA48 (.CLK(CLKA), .SE(SEA), .SI(QA[49]), .D(DA_scan[48]), .Q(QA[48]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA49 (.CLK(CLKA), .SE(SEA), .SI(QA[50]), .D(DA_scan[49]), .Q(QA[49]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA50 (.CLK(CLKA), .SE(SEA), .SI(QA[51]), .D(DA_scan[50]), .Q(QA[50]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA51 (.CLK(CLKA), .SE(SEA), .SI(QA[52]), .D(DA_scan[51]), .Q(QA[51]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA52 (.CLK(CLKA), .SE(SEA), .SI(QA[53]), .D(DA_scan[52]), .Q(QA[52]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA53 (.CLK(CLKA), .SE(SEA), .SI(QA[54]), .D(DA_scan[53]), .Q(QA[53]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA54 (.CLK(CLKA), .SE(SEA), .SI(QA[55]), .D(DA_scan[54]), .Q(QA[54]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA55 (.CLK(CLKA), .SE(SEA), .SI(QA[56]), .D(DA_scan[55]), .Q(QA[55]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA56 (.CLK(CLKA), .SE(SEA), .SI(QA[57]), .D(DA_scan[56]), .Q(QA[56]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA57 (.CLK(CLKA), .SE(SEA), .SI(QA[58]), .D(DA_scan[57]), .Q(QA[57]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA58 (.CLK(CLKA), .SE(SEA), .SI(QA[59]), .D(DA_scan[58]), .Q(QA[58]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA59 (.CLK(CLKA), .SE(SEA), .SI(QA[60]), .D(DA_scan[59]), .Q(QA[59]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA60 (.CLK(CLKA), .SE(SEA), .SI(QA[61]), .D(DA_scan[60]), .Q(QA[60]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA61 (.CLK(CLKA), .SE(SEA), .SI(QA[62]), .D(DA_scan[61]), .Q(QA[61]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA62 (.CLK(CLKA), .SE(SEA), .SI(QA[63]), .D(DA_scan[62]), .Q(QA[62]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA63 (.CLK(CLKA), .SE(SEA), .SI(BUS_SIA[0]), .D(DA_scan[63]), .Q(QA[63]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA64 (.CLK(CLKA), .SE(SEA), .SI(BUS_SIA[1]), .D(DA_scan[64]), .Q(QA[64]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA65 (.CLK(CLKA), .SE(SEA), .SI(QA[64]), .D(DA_scan[65]), .Q(QA[65]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA66 (.CLK(CLKA), .SE(SEA), .SI(QA[65]), .D(DA_scan[66]), .Q(QA[66]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA67 (.CLK(CLKA), .SE(SEA), .SI(QA[66]), .D(DA_scan[67]), .Q(QA[67]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA68 (.CLK(CLKA), .SE(SEA), .SI(QA[67]), .D(DA_scan[68]), .Q(QA[68]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA69 (.CLK(CLKA), .SE(SEA), .SI(QA[68]), .D(DA_scan[69]), .Q(QA[69]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA70 (.CLK(CLKA), .SE(SEA), .SI(QA[69]), .D(DA_scan[70]), .Q(QA[70]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA71 (.CLK(CLKA), .SE(SEA), .SI(QA[70]), .D(DA_scan[71]), .Q(QA[71]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA72 (.CLK(CLKA), .SE(SEA), .SI(QA[71]), .D(DA_scan[72]), .Q(QA[72]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA73 (.CLK(CLKA), .SE(SEA), .SI(QA[72]), .D(DA_scan[73]), .Q(QA[73]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA74 (.CLK(CLKA), .SE(SEA), .SI(QA[73]), .D(DA_scan[74]), .Q(QA[74]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA75 (.CLK(CLKA), .SE(SEA), .SI(QA[74]), .D(DA_scan[75]), .Q(QA[75]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA76 (.CLK(CLKA), .SE(SEA), .SI(QA[75]), .D(DA_scan[76]), .Q(QA[76]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA77 (.CLK(CLKA), .SE(SEA), .SI(QA[76]), .D(DA_scan[77]), .Q(QA[77]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA78 (.CLK(CLKA), .SE(SEA), .SI(QA[77]), .D(DA_scan[78]), .Q(QA[78]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA79 (.CLK(CLKA), .SE(SEA), .SI(QA[78]), .D(DA_scan[79]), .Q(QA[79]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA80 (.CLK(CLKA), .SE(SEA), .SI(QA[79]), .D(DA_scan[80]), .Q(QA[80]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA81 (.CLK(CLKA), .SE(SEA), .SI(QA[80]), .D(DA_scan[81]), .Q(QA[81]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA82 (.CLK(CLKA), .SE(SEA), .SI(QA[81]), .D(DA_scan[82]), .Q(QA[82]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA83 (.CLK(CLKA), .SE(SEA), .SI(QA[82]), .D(DA_scan[83]), .Q(QA[83]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA84 (.CLK(CLKA), .SE(SEA), .SI(QA[83]), .D(DA_scan[84]), .Q(QA[84]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA85 (.CLK(CLKA), .SE(SEA), .SI(QA[84]), .D(DA_scan[85]), .Q(QA[85]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA86 (.CLK(CLKA), .SE(SEA), .SI(QA[85]), .D(DA_scan[86]), .Q(QA[86]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA87 (.CLK(CLKA), .SE(SEA), .SI(QA[86]), .D(DA_scan[87]), .Q(QA[87]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA88 (.CLK(CLKA), .SE(SEA), .SI(QA[87]), .D(DA_scan[88]), .Q(QA[88]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA89 (.CLK(CLKA), .SE(SEA), .SI(QA[88]), .D(DA_scan[89]), .Q(QA[89]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA90 (.CLK(CLKA), .SE(SEA), .SI(QA[89]), .D(DA_scan[90]), .Q(QA[90]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA91 (.CLK(CLKA), .SE(SEA), .SI(QA[90]), .D(DA_scan[91]), .Q(QA[91]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA92 (.CLK(CLKA), .SE(SEA), .SI(QA[91]), .D(DA_scan[92]), .Q(QA[92]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA93 (.CLK(CLKA), .SE(SEA), .SI(QA[92]), .D(DA_scan[93]), .Q(QA[93]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA94 (.CLK(CLKA), .SE(SEA), .SI(QA[93]), .D(DA_scan[94]), .Q(QA[94]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA95 (.CLK(CLKA), .SE(SEA), .SI(QA[94]), .D(DA_scan[95]), .Q(QA[95]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA96 (.CLK(CLKA), .SE(SEA), .SI(QA[95]), .D(DA_scan[96]), .Q(QA[96]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA97 (.CLK(CLKA), .SE(SEA), .SI(QA[96]), .D(DA_scan[97]), .Q(QA[97]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA98 (.CLK(CLKA), .SE(SEA), .SI(QA[97]), .D(DA_scan[98]), .Q(QA[98]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA99 (.CLK(CLKA), .SE(SEA), .SI(QA[98]), .D(DA_scan[99]), .Q(QA[99]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA100 (.CLK(CLKA), .SE(SEA), .SI(QA[99]), .D(DA_scan[100]), .Q(QA[100]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA101 (.CLK(CLKA), .SE(SEA), .SI(QA[100]), .D(DA_scan[101]), .Q(QA[101]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA102 (.CLK(CLKA), .SE(SEA), .SI(QA[101]), .D(DA_scan[102]), .Q(QA[102]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA103 (.CLK(CLKA), .SE(SEA), .SI(QA[102]), .D(DA_scan[103]), .Q(QA[103]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA104 (.CLK(CLKA), .SE(SEA), .SI(QA[103]), .D(DA_scan[104]), .Q(QA[104]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA105 (.CLK(CLKA), .SE(SEA), .SI(QA[104]), .D(DA_scan[105]), .Q(QA[105]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA106 (.CLK(CLKA), .SE(SEA), .SI(QA[105]), .D(DA_scan[106]), .Q(QA[106]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA107 (.CLK(CLKA), .SE(SEA), .SI(QA[106]), .D(DA_scan[107]), .Q(QA[107]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA108 (.CLK(CLKA), .SE(SEA), .SI(QA[107]), .D(DA_scan[108]), .Q(QA[108]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA109 (.CLK(CLKA), .SE(SEA), .SI(QA[108]), .D(DA_scan[109]), .Q(QA[109]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA110 (.CLK(CLKA), .SE(SEA), .SI(QA[109]), .D(DA_scan[110]), .Q(QA[110]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA111 (.CLK(CLKA), .SE(SEA), .SI(QA[110]), .D(DA_scan[111]), .Q(QA[111]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA112 (.CLK(CLKA), .SE(SEA), .SI(QA[111]), .D(DA_scan[112]), .Q(QA[112]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA113 (.CLK(CLKA), .SE(SEA), .SI(QA[112]), .D(DA_scan[113]), .Q(QA[113]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA114 (.CLK(CLKA), .SE(SEA), .SI(QA[113]), .D(DA_scan[114]), .Q(QA[114]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA115 (.CLK(CLKA), .SE(SEA), .SI(QA[114]), .D(DA_scan[115]), .Q(QA[115]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA116 (.CLK(CLKA), .SE(SEA), .SI(QA[115]), .D(DA_scan[116]), .Q(QA[116]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA117 (.CLK(CLKA), .SE(SEA), .SI(QA[116]), .D(DA_scan[117]), .Q(QA[117]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA118 (.CLK(CLKA), .SE(SEA), .SI(QA[117]), .D(DA_scan[118]), .Q(QA[118]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA119 (.CLK(CLKA), .SE(SEA), .SI(QA[118]), .D(DA_scan[119]), .Q(QA[119]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA120 (.CLK(CLKA), .SE(SEA), .SI(QA[119]), .D(DA_scan[120]), .Q(QA[120]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA121 (.CLK(CLKA), .SE(SEA), .SI(QA[120]), .D(DA_scan[121]), .Q(QA[121]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA122 (.CLK(CLKA), .SE(SEA), .SI(QA[121]), .D(DA_scan[122]), .Q(QA[122]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA123 (.CLK(CLKA), .SE(SEA), .SI(QA[122]), .D(DA_scan[123]), .Q(QA[123]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA124 (.CLK(CLKA), .SE(SEA), .SI(QA[123]), .D(DA_scan[124]), .Q(QA[124]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA125 (.CLK(CLKA), .SE(SEA), .SI(QA[124]), .D(DA_scan[125]), .Q(QA[125]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA126 (.CLK(CLKA), .SE(SEA), .SI(QA[125]), .D(DA_scan[126]), .Q(QA[126]), .Xout(XoutAiff));
   instance = rf2_32x128_wm1_scanflop uDQA127 (.CLK(CLKA), .SE(SEA), .SI(QA[126]), .D(DA_scan[127]), .Q(QA[127]), .Xout(XoutAiff));
 )
  output (SOA) ( array = 1 : 0;
     primitive = _buf  bSOA0 ( QA[0], SOA[0] ); 
     primitive = _buf  bSOA1 ( QA[127], SOA[1] ); 
 )
   intern (BUS_SIB) (array = 1 : 0; 
      primitive = _buf wbSIB0 (SIB[0], BUS_SIB[0]);
      primitive = _buf wbSIB1 (SIB[1], BUS_SIB[1]);
   )
   intern (BUS_AB) (array = 4 : 0; 
      primitive = _buf  bBUS_AB0 ( AB[0], BUS_AB[0]);
      primitive = _buf  bBUS_AB1 ( AB[1], BUS_AB[1]);
      primitive = _buf  bBUS_AB2 ( AB[2], BUS_AB[2]);
      primitive = _buf  bBUS_AB3 ( AB[3], BUS_AB[3]);
      primitive = _buf  bBUS_AB4 ( AB[4], BUS_AB[4]);
   )
   intern (BUS_DB) (array = 127 : 0; 
      primitive = _buf  bBUS_DB0( DB[0], BUS_DB[0] );
      primitive = _buf  bBUS_DB1( DB[1], BUS_DB[1] );
      primitive = _buf  bBUS_DB2( DB[2], BUS_DB[2] );
      primitive = _buf  bBUS_DB3( DB[3], BUS_DB[3] );
      primitive = _buf  bBUS_DB4( DB[4], BUS_DB[4] );
      primitive = _buf  bBUS_DB5( DB[5], BUS_DB[5] );
      primitive = _buf  bBUS_DB6( DB[6], BUS_DB[6] );
      primitive = _buf  bBUS_DB7( DB[7], BUS_DB[7] );
      primitive = _buf  bBUS_DB8( DB[8], BUS_DB[8] );
      primitive = _buf  bBUS_DB9( DB[9], BUS_DB[9] );
      primitive = _buf  bBUS_DB10( DB[10], BUS_DB[10] );
      primitive = _buf  bBUS_DB11( DB[11], BUS_DB[11] );
      primitive = _buf  bBUS_DB12( DB[12], BUS_DB[12] );
      primitive = _buf  bBUS_DB13( DB[13], BUS_DB[13] );
      primitive = _buf  bBUS_DB14( DB[14], BUS_DB[14] );
      primitive = _buf  bBUS_DB15( DB[15], BUS_DB[15] );
      primitive = _buf  bBUS_DB16( DB[16], BUS_DB[16] );
      primitive = _buf  bBUS_DB17( DB[17], BUS_DB[17] );
      primitive = _buf  bBUS_DB18( DB[18], BUS_DB[18] );
      primitive = _buf  bBUS_DB19( DB[19], BUS_DB[19] );
      primitive = _buf  bBUS_DB20( DB[20], BUS_DB[20] );
      primitive = _buf  bBUS_DB21( DB[21], BUS_DB[21] );
      primitive = _buf  bBUS_DB22( DB[22], BUS_DB[22] );
      primitive = _buf  bBUS_DB23( DB[23], BUS_DB[23] );
      primitive = _buf  bBUS_DB24( DB[24], BUS_DB[24] );
      primitive = _buf  bBUS_DB25( DB[25], BUS_DB[25] );
      primitive = _buf  bBUS_DB26( DB[26], BUS_DB[26] );
      primitive = _buf  bBUS_DB27( DB[27], BUS_DB[27] );
      primitive = _buf  bBUS_DB28( DB[28], BUS_DB[28] );
      primitive = _buf  bBUS_DB29( DB[29], BUS_DB[29] );
      primitive = _buf  bBUS_DB30( DB[30], BUS_DB[30] );
      primitive = _buf  bBUS_DB31( DB[31], BUS_DB[31] );
      primitive = _buf  bBUS_DB32( DB[32], BUS_DB[32] );
      primitive = _buf  bBUS_DB33( DB[33], BUS_DB[33] );
      primitive = _buf  bBUS_DB34( DB[34], BUS_DB[34] );
      primitive = _buf  bBUS_DB35( DB[35], BUS_DB[35] );
      primitive = _buf  bBUS_DB36( DB[36], BUS_DB[36] );
      primitive = _buf  bBUS_DB37( DB[37], BUS_DB[37] );
      primitive = _buf  bBUS_DB38( DB[38], BUS_DB[38] );
      primitive = _buf  bBUS_DB39( DB[39], BUS_DB[39] );
      primitive = _buf  bBUS_DB40( DB[40], BUS_DB[40] );
      primitive = _buf  bBUS_DB41( DB[41], BUS_DB[41] );
      primitive = _buf  bBUS_DB42( DB[42], BUS_DB[42] );
      primitive = _buf  bBUS_DB43( DB[43], BUS_DB[43] );
      primitive = _buf  bBUS_DB44( DB[44], BUS_DB[44] );
      primitive = _buf  bBUS_DB45( DB[45], BUS_DB[45] );
      primitive = _buf  bBUS_DB46( DB[46], BUS_DB[46] );
      primitive = _buf  bBUS_DB47( DB[47], BUS_DB[47] );
      primitive = _buf  bBUS_DB48( DB[48], BUS_DB[48] );
      primitive = _buf  bBUS_DB49( DB[49], BUS_DB[49] );
      primitive = _buf  bBUS_DB50( DB[50], BUS_DB[50] );
      primitive = _buf  bBUS_DB51( DB[51], BUS_DB[51] );
      primitive = _buf  bBUS_DB52( DB[52], BUS_DB[52] );
      primitive = _buf  bBUS_DB53( DB[53], BUS_DB[53] );
      primitive = _buf  bBUS_DB54( DB[54], BUS_DB[54] );
      primitive = _buf  bBUS_DB55( DB[55], BUS_DB[55] );
      primitive = _buf  bBUS_DB56( DB[56], BUS_DB[56] );
      primitive = _buf  bBUS_DB57( DB[57], BUS_DB[57] );
      primitive = _buf  bBUS_DB58( DB[58], BUS_DB[58] );
      primitive = _buf  bBUS_DB59( DB[59], BUS_DB[59] );
      primitive = _buf  bBUS_DB60( DB[60], BUS_DB[60] );
      primitive = _buf  bBUS_DB61( DB[61], BUS_DB[61] );
      primitive = _buf  bBUS_DB62( DB[62], BUS_DB[62] );
      primitive = _buf  bBUS_DB63( DB[63], BUS_DB[63] );
      primitive = _buf  bBUS_DB64( DB[64], BUS_DB[64] );
      primitive = _buf  bBUS_DB65( DB[65], BUS_DB[65] );
      primitive = _buf  bBUS_DB66( DB[66], BUS_DB[66] );
      primitive = _buf  bBUS_DB67( DB[67], BUS_DB[67] );
      primitive = _buf  bBUS_DB68( DB[68], BUS_DB[68] );
      primitive = _buf  bBUS_DB69( DB[69], BUS_DB[69] );
      primitive = _buf  bBUS_DB70( DB[70], BUS_DB[70] );
      primitive = _buf  bBUS_DB71( DB[71], BUS_DB[71] );
      primitive = _buf  bBUS_DB72( DB[72], BUS_DB[72] );
      primitive = _buf  bBUS_DB73( DB[73], BUS_DB[73] );
      primitive = _buf  bBUS_DB74( DB[74], BUS_DB[74] );
      primitive = _buf  bBUS_DB75( DB[75], BUS_DB[75] );
      primitive = _buf  bBUS_DB76( DB[76], BUS_DB[76] );
      primitive = _buf  bBUS_DB77( DB[77], BUS_DB[77] );
      primitive = _buf  bBUS_DB78( DB[78], BUS_DB[78] );
      primitive = _buf  bBUS_DB79( DB[79], BUS_DB[79] );
      primitive = _buf  bBUS_DB80( DB[80], BUS_DB[80] );
      primitive = _buf  bBUS_DB81( DB[81], BUS_DB[81] );
      primitive = _buf  bBUS_DB82( DB[82], BUS_DB[82] );
      primitive = _buf  bBUS_DB83( DB[83], BUS_DB[83] );
      primitive = _buf  bBUS_DB84( DB[84], BUS_DB[84] );
      primitive = _buf  bBUS_DB85( DB[85], BUS_DB[85] );
      primitive = _buf  bBUS_DB86( DB[86], BUS_DB[86] );
      primitive = _buf  bBUS_DB87( DB[87], BUS_DB[87] );
      primitive = _buf  bBUS_DB88( DB[88], BUS_DB[88] );
      primitive = _buf  bBUS_DB89( DB[89], BUS_DB[89] );
      primitive = _buf  bBUS_DB90( DB[90], BUS_DB[90] );
      primitive = _buf  bBUS_DB91( DB[91], BUS_DB[91] );
      primitive = _buf  bBUS_DB92( DB[92], BUS_DB[92] );
      primitive = _buf  bBUS_DB93( DB[93], BUS_DB[93] );
      primitive = _buf  bBUS_DB94( DB[94], BUS_DB[94] );
      primitive = _buf  bBUS_DB95( DB[95], BUS_DB[95] );
      primitive = _buf  bBUS_DB96( DB[96], BUS_DB[96] );
      primitive = _buf  bBUS_DB97( DB[97], BUS_DB[97] );
      primitive = _buf  bBUS_DB98( DB[98], BUS_DB[98] );
      primitive = _buf  bBUS_DB99( DB[99], BUS_DB[99] );
      primitive = _buf  bBUS_DB100( DB[100], BUS_DB[100] );
      primitive = _buf  bBUS_DB101( DB[101], BUS_DB[101] );
      primitive = _buf  bBUS_DB102( DB[102], BUS_DB[102] );
      primitive = _buf  bBUS_DB103( DB[103], BUS_DB[103] );
      primitive = _buf  bBUS_DB104( DB[104], BUS_DB[104] );
      primitive = _buf  bBUS_DB105( DB[105], BUS_DB[105] );
      primitive = _buf  bBUS_DB106( DB[106], BUS_DB[106] );
      primitive = _buf  bBUS_DB107( DB[107], BUS_DB[107] );
      primitive = _buf  bBUS_DB108( DB[108], BUS_DB[108] );
      primitive = _buf  bBUS_DB109( DB[109], BUS_DB[109] );
      primitive = _buf  bBUS_DB110( DB[110], BUS_DB[110] );
      primitive = _buf  bBUS_DB111( DB[111], BUS_DB[111] );
      primitive = _buf  bBUS_DB112( DB[112], BUS_DB[112] );
      primitive = _buf  bBUS_DB113( DB[113], BUS_DB[113] );
      primitive = _buf  bBUS_DB114( DB[114], BUS_DB[114] );
      primitive = _buf  bBUS_DB115( DB[115], BUS_DB[115] );
      primitive = _buf  bBUS_DB116( DB[116], BUS_DB[116] );
      primitive = _buf  bBUS_DB117( DB[117], BUS_DB[117] );
      primitive = _buf  bBUS_DB118( DB[118], BUS_DB[118] );
      primitive = _buf  bBUS_DB119( DB[119], BUS_DB[119] );
      primitive = _buf  bBUS_DB120( DB[120], BUS_DB[120] );
      primitive = _buf  bBUS_DB121( DB[121], BUS_DB[121] );
      primitive = _buf  bBUS_DB122( DB[122], BUS_DB[122] );
      primitive = _buf  bBUS_DB123( DB[123], BUS_DB[123] );
      primitive = _buf  bBUS_DB124( DB[124], BUS_DB[124] );
      primitive = _buf  bBUS_DB125( DB[125], BUS_DB[125] );
      primitive = _buf  bBUS_DB126( DB[126], BUS_DB[126] );
      primitive = _buf  bBUS_DB127( DB[127], BUS_DB[127] );
   )
   intern (BUS_WENB) (array = 127 : 0; 
     primitive = _buf  bBUS_WENB0( WENB[0], BUS_WENB[0] );
     primitive = _buf  bBUS_WENB1( WENB[1], BUS_WENB[1] );
     primitive = _buf  bBUS_WENB2( WENB[2], BUS_WENB[2] );
     primitive = _buf  bBUS_WENB3( WENB[3], BUS_WENB[3] );
     primitive = _buf  bBUS_WENB4( WENB[4], BUS_WENB[4] );
     primitive = _buf  bBUS_WENB5( WENB[5], BUS_WENB[5] );
     primitive = _buf  bBUS_WENB6( WENB[6], BUS_WENB[6] );
     primitive = _buf  bBUS_WENB7( WENB[7], BUS_WENB[7] );
     primitive = _buf  bBUS_WENB8( WENB[8], BUS_WENB[8] );
     primitive = _buf  bBUS_WENB9( WENB[9], BUS_WENB[9] );
     primitive = _buf  bBUS_WENB10( WENB[10], BUS_WENB[10] );
     primitive = _buf  bBUS_WENB11( WENB[11], BUS_WENB[11] );
     primitive = _buf  bBUS_WENB12( WENB[12], BUS_WENB[12] );
     primitive = _buf  bBUS_WENB13( WENB[13], BUS_WENB[13] );
     primitive = _buf  bBUS_WENB14( WENB[14], BUS_WENB[14] );
     primitive = _buf  bBUS_WENB15( WENB[15], BUS_WENB[15] );
     primitive = _buf  bBUS_WENB16( WENB[16], BUS_WENB[16] );
     primitive = _buf  bBUS_WENB17( WENB[17], BUS_WENB[17] );
     primitive = _buf  bBUS_WENB18( WENB[18], BUS_WENB[18] );
     primitive = _buf  bBUS_WENB19( WENB[19], BUS_WENB[19] );
     primitive = _buf  bBUS_WENB20( WENB[20], BUS_WENB[20] );
     primitive = _buf  bBUS_WENB21( WENB[21], BUS_WENB[21] );
     primitive = _buf  bBUS_WENB22( WENB[22], BUS_WENB[22] );
     primitive = _buf  bBUS_WENB23( WENB[23], BUS_WENB[23] );
     primitive = _buf  bBUS_WENB24( WENB[24], BUS_WENB[24] );
     primitive = _buf  bBUS_WENB25( WENB[25], BUS_WENB[25] );
     primitive = _buf  bBUS_WENB26( WENB[26], BUS_WENB[26] );
     primitive = _buf  bBUS_WENB27( WENB[27], BUS_WENB[27] );
     primitive = _buf  bBUS_WENB28( WENB[28], BUS_WENB[28] );
     primitive = _buf  bBUS_WENB29( WENB[29], BUS_WENB[29] );
     primitive = _buf  bBUS_WENB30( WENB[30], BUS_WENB[30] );
     primitive = _buf  bBUS_WENB31( WENB[31], BUS_WENB[31] );
     primitive = _buf  bBUS_WENB32( WENB[32], BUS_WENB[32] );
     primitive = _buf  bBUS_WENB33( WENB[33], BUS_WENB[33] );
     primitive = _buf  bBUS_WENB34( WENB[34], BUS_WENB[34] );
     primitive = _buf  bBUS_WENB35( WENB[35], BUS_WENB[35] );
     primitive = _buf  bBUS_WENB36( WENB[36], BUS_WENB[36] );
     primitive = _buf  bBUS_WENB37( WENB[37], BUS_WENB[37] );
     primitive = _buf  bBUS_WENB38( WENB[38], BUS_WENB[38] );
     primitive = _buf  bBUS_WENB39( WENB[39], BUS_WENB[39] );
     primitive = _buf  bBUS_WENB40( WENB[40], BUS_WENB[40] );
     primitive = _buf  bBUS_WENB41( WENB[41], BUS_WENB[41] );
     primitive = _buf  bBUS_WENB42( WENB[42], BUS_WENB[42] );
     primitive = _buf  bBUS_WENB43( WENB[43], BUS_WENB[43] );
     primitive = _buf  bBUS_WENB44( WENB[44], BUS_WENB[44] );
     primitive = _buf  bBUS_WENB45( WENB[45], BUS_WENB[45] );
     primitive = _buf  bBUS_WENB46( WENB[46], BUS_WENB[46] );
     primitive = _buf  bBUS_WENB47( WENB[47], BUS_WENB[47] );
     primitive = _buf  bBUS_WENB48( WENB[48], BUS_WENB[48] );
     primitive = _buf  bBUS_WENB49( WENB[49], BUS_WENB[49] );
     primitive = _buf  bBUS_WENB50( WENB[50], BUS_WENB[50] );
     primitive = _buf  bBUS_WENB51( WENB[51], BUS_WENB[51] );
     primitive = _buf  bBUS_WENB52( WENB[52], BUS_WENB[52] );
     primitive = _buf  bBUS_WENB53( WENB[53], BUS_WENB[53] );
     primitive = _buf  bBUS_WENB54( WENB[54], BUS_WENB[54] );
     primitive = _buf  bBUS_WENB55( WENB[55], BUS_WENB[55] );
     primitive = _buf  bBUS_WENB56( WENB[56], BUS_WENB[56] );
     primitive = _buf  bBUS_WENB57( WENB[57], BUS_WENB[57] );
     primitive = _buf  bBUS_WENB58( WENB[58], BUS_WENB[58] );
     primitive = _buf  bBUS_WENB59( WENB[59], BUS_WENB[59] );
     primitive = _buf  bBUS_WENB60( WENB[60], BUS_WENB[60] );
     primitive = _buf  bBUS_WENB61( WENB[61], BUS_WENB[61] );
     primitive = _buf  bBUS_WENB62( WENB[62], BUS_WENB[62] );
     primitive = _buf  bBUS_WENB63( WENB[63], BUS_WENB[63] );
     primitive = _buf  bBUS_WENB64( WENB[64], BUS_WENB[64] );
     primitive = _buf  bBUS_WENB65( WENB[65], BUS_WENB[65] );
     primitive = _buf  bBUS_WENB66( WENB[66], BUS_WENB[66] );
     primitive = _buf  bBUS_WENB67( WENB[67], BUS_WENB[67] );
     primitive = _buf  bBUS_WENB68( WENB[68], BUS_WENB[68] );
     primitive = _buf  bBUS_WENB69( WENB[69], BUS_WENB[69] );
     primitive = _buf  bBUS_WENB70( WENB[70], BUS_WENB[70] );
     primitive = _buf  bBUS_WENB71( WENB[71], BUS_WENB[71] );
     primitive = _buf  bBUS_WENB72( WENB[72], BUS_WENB[72] );
     primitive = _buf  bBUS_WENB73( WENB[73], BUS_WENB[73] );
     primitive = _buf  bBUS_WENB74( WENB[74], BUS_WENB[74] );
     primitive = _buf  bBUS_WENB75( WENB[75], BUS_WENB[75] );
     primitive = _buf  bBUS_WENB76( WENB[76], BUS_WENB[76] );
     primitive = _buf  bBUS_WENB77( WENB[77], BUS_WENB[77] );
     primitive = _buf  bBUS_WENB78( WENB[78], BUS_WENB[78] );
     primitive = _buf  bBUS_WENB79( WENB[79], BUS_WENB[79] );
     primitive = _buf  bBUS_WENB80( WENB[80], BUS_WENB[80] );
     primitive = _buf  bBUS_WENB81( WENB[81], BUS_WENB[81] );
     primitive = _buf  bBUS_WENB82( WENB[82], BUS_WENB[82] );
     primitive = _buf  bBUS_WENB83( WENB[83], BUS_WENB[83] );
     primitive = _buf  bBUS_WENB84( WENB[84], BUS_WENB[84] );
     primitive = _buf  bBUS_WENB85( WENB[85], BUS_WENB[85] );
     primitive = _buf  bBUS_WENB86( WENB[86], BUS_WENB[86] );
     primitive = _buf  bBUS_WENB87( WENB[87], BUS_WENB[87] );
     primitive = _buf  bBUS_WENB88( WENB[88], BUS_WENB[88] );
     primitive = _buf  bBUS_WENB89( WENB[89], BUS_WENB[89] );
     primitive = _buf  bBUS_WENB90( WENB[90], BUS_WENB[90] );
     primitive = _buf  bBUS_WENB91( WENB[91], BUS_WENB[91] );
     primitive = _buf  bBUS_WENB92( WENB[92], BUS_WENB[92] );
     primitive = _buf  bBUS_WENB93( WENB[93], BUS_WENB[93] );
     primitive = _buf  bBUS_WENB94( WENB[94], BUS_WENB[94] );
     primitive = _buf  bBUS_WENB95( WENB[95], BUS_WENB[95] );
     primitive = _buf  bBUS_WENB96( WENB[96], BUS_WENB[96] );
     primitive = _buf  bBUS_WENB97( WENB[97], BUS_WENB[97] );
     primitive = _buf  bBUS_WENB98( WENB[98], BUS_WENB[98] );
     primitive = _buf  bBUS_WENB99( WENB[99], BUS_WENB[99] );
     primitive = _buf  bBUS_WENB100( WENB[100], BUS_WENB[100] );
     primitive = _buf  bBUS_WENB101( WENB[101], BUS_WENB[101] );
     primitive = _buf  bBUS_WENB102( WENB[102], BUS_WENB[102] );
     primitive = _buf  bBUS_WENB103( WENB[103], BUS_WENB[103] );
     primitive = _buf  bBUS_WENB104( WENB[104], BUS_WENB[104] );
     primitive = _buf  bBUS_WENB105( WENB[105], BUS_WENB[105] );
     primitive = _buf  bBUS_WENB106( WENB[106], BUS_WENB[106] );
     primitive = _buf  bBUS_WENB107( WENB[107], BUS_WENB[107] );
     primitive = _buf  bBUS_WENB108( WENB[108], BUS_WENB[108] );
     primitive = _buf  bBUS_WENB109( WENB[109], BUS_WENB[109] );
     primitive = _buf  bBUS_WENB110( WENB[110], BUS_WENB[110] );
     primitive = _buf  bBUS_WENB111( WENB[111], BUS_WENB[111] );
     primitive = _buf  bBUS_WENB112( WENB[112], BUS_WENB[112] );
     primitive = _buf  bBUS_WENB113( WENB[113], BUS_WENB[113] );
     primitive = _buf  bBUS_WENB114( WENB[114], BUS_WENB[114] );
     primitive = _buf  bBUS_WENB115( WENB[115], BUS_WENB[115] );
     primitive = _buf  bBUS_WENB116( WENB[116], BUS_WENB[116] );
     primitive = _buf  bBUS_WENB117( WENB[117], BUS_WENB[117] );
     primitive = _buf  bBUS_WENB118( WENB[118], BUS_WENB[118] );
     primitive = _buf  bBUS_WENB119( WENB[119], BUS_WENB[119] );
     primitive = _buf  bBUS_WENB120( WENB[120], BUS_WENB[120] );
     primitive = _buf  bBUS_WENB121( WENB[121], BUS_WENB[121] );
     primitive = _buf  bBUS_WENB122( WENB[122], BUS_WENB[122] );
     primitive = _buf  bBUS_WENB123( WENB[123], BUS_WENB[123] );
     primitive = _buf  bBUS_WENB124( WENB[124], BUS_WENB[124] );
     primitive = _buf  bBUS_WENB125( WENB[125], BUS_WENB[125] );
     primitive = _buf  bBUS_WENB126( WENB[126], BUS_WENB[126] );
     primitive = _buf  bBUS_WENB127( WENB[127], BUS_WENB[127] );
   )
  intern (BMUX_AB) ( array = 4 : 0;
    primitive = _mux maB0(TAB[0],  BUS_AB[0], TENB, BMUX_AB[0]);
    primitive = _mux maB1(TAB[1],  BUS_AB[1], TENB, BMUX_AB[1]);
    primitive = _mux maB2(TAB[2],  BUS_AB[2], TENB, BMUX_AB[2]);
    primitive = _mux maB3(TAB[3],  BUS_AB[3], TENB, BMUX_AB[3]);
    primitive = _mux maB4(TAB[4],  BUS_AB[4], TENB, BMUX_AB[4]);
  )
  intern (BMUXSEL_AB) ( array = 4 : 0;
    primitive = _mux mBMUXSEL_AB0(mlc_bmuxsel,  BMUX_AB[0], DFTRAMBYP, BMUXSEL_AB[0]);
    primitive = _mux mBMUXSEL_AB1(mlc_bmuxsel,  BMUX_AB[1], DFTRAMBYP, BMUXSEL_AB[1]);
    primitive = _mux mBMUXSEL_AB2(mlc_bmuxsel,  BMUX_AB[2], DFTRAMBYP, BMUXSEL_AB[2]);
    primitive = _mux mBMUXSEL_AB3(mlc_bmuxsel,  BMUX_AB[3], DFTRAMBYP, BMUXSEL_AB[3]);
    primitive = _mux mBMUXSEL_AB4(mlc_bmuxsel,  BMUX_AB[4], DFTRAMBYP, BMUXSEL_AB[4]);
  )
  output (AYB) ( array = 4 : 0;
    primitive = _buf bAYB0(BMUXSEL_AB[0], AYB[0]);
    primitive = _buf bAYB1(BMUXSEL_AB[1], AYB[1]);
    primitive = _buf bAYB2(BMUXSEL_AB[2], AYB[2]);
    primitive = _buf bAYB3(BMUXSEL_AB[3], AYB[3]);
    primitive = _buf bAYB4(BMUXSEL_AB[4], AYB[4]);
 )

  intern (BMUX_DB) ( array = 127 : 0;
    primitive = _mux mBMUX_DB0(TDB[0], BUS_DB[0], TENB, BMUX_DB[0]);
    primitive = _mux mBMUX_DB1(TDB[1], BUS_DB[1], TENB, BMUX_DB[1]);
    primitive = _mux mBMUX_DB2(TDB[2], BUS_DB[2], TENB, BMUX_DB[2]);
    primitive = _mux mBMUX_DB3(TDB[3], BUS_DB[3], TENB, BMUX_DB[3]);
    primitive = _mux mBMUX_DB4(TDB[4], BUS_DB[4], TENB, BMUX_DB[4]);
    primitive = _mux mBMUX_DB5(TDB[5], BUS_DB[5], TENB, BMUX_DB[5]);
    primitive = _mux mBMUX_DB6(TDB[6], BUS_DB[6], TENB, BMUX_DB[6]);
    primitive = _mux mBMUX_DB7(TDB[7], BUS_DB[7], TENB, BMUX_DB[7]);
    primitive = _mux mBMUX_DB8(TDB[8], BUS_DB[8], TENB, BMUX_DB[8]);
    primitive = _mux mBMUX_DB9(TDB[9], BUS_DB[9], TENB, BMUX_DB[9]);
    primitive = _mux mBMUX_DB10(TDB[10], BUS_DB[10], TENB, BMUX_DB[10]);
    primitive = _mux mBMUX_DB11(TDB[11], BUS_DB[11], TENB, BMUX_DB[11]);
    primitive = _mux mBMUX_DB12(TDB[12], BUS_DB[12], TENB, BMUX_DB[12]);
    primitive = _mux mBMUX_DB13(TDB[13], BUS_DB[13], TENB, BMUX_DB[13]);
    primitive = _mux mBMUX_DB14(TDB[14], BUS_DB[14], TENB, BMUX_DB[14]);
    primitive = _mux mBMUX_DB15(TDB[15], BUS_DB[15], TENB, BMUX_DB[15]);
    primitive = _mux mBMUX_DB16(TDB[16], BUS_DB[16], TENB, BMUX_DB[16]);
    primitive = _mux mBMUX_DB17(TDB[17], BUS_DB[17], TENB, BMUX_DB[17]);
    primitive = _mux mBMUX_DB18(TDB[18], BUS_DB[18], TENB, BMUX_DB[18]);
    primitive = _mux mBMUX_DB19(TDB[19], BUS_DB[19], TENB, BMUX_DB[19]);
    primitive = _mux mBMUX_DB20(TDB[20], BUS_DB[20], TENB, BMUX_DB[20]);
    primitive = _mux mBMUX_DB21(TDB[21], BUS_DB[21], TENB, BMUX_DB[21]);
    primitive = _mux mBMUX_DB22(TDB[22], BUS_DB[22], TENB, BMUX_DB[22]);
    primitive = _mux mBMUX_DB23(TDB[23], BUS_DB[23], TENB, BMUX_DB[23]);
    primitive = _mux mBMUX_DB24(TDB[24], BUS_DB[24], TENB, BMUX_DB[24]);
    primitive = _mux mBMUX_DB25(TDB[25], BUS_DB[25], TENB, BMUX_DB[25]);
    primitive = _mux mBMUX_DB26(TDB[26], BUS_DB[26], TENB, BMUX_DB[26]);
    primitive = _mux mBMUX_DB27(TDB[27], BUS_DB[27], TENB, BMUX_DB[27]);
    primitive = _mux mBMUX_DB28(TDB[28], BUS_DB[28], TENB, BMUX_DB[28]);
    primitive = _mux mBMUX_DB29(TDB[29], BUS_DB[29], TENB, BMUX_DB[29]);
    primitive = _mux mBMUX_DB30(TDB[30], BUS_DB[30], TENB, BMUX_DB[30]);
    primitive = _mux mBMUX_DB31(TDB[31], BUS_DB[31], TENB, BMUX_DB[31]);
    primitive = _mux mBMUX_DB32(TDB[32], BUS_DB[32], TENB, BMUX_DB[32]);
    primitive = _mux mBMUX_DB33(TDB[33], BUS_DB[33], TENB, BMUX_DB[33]);
    primitive = _mux mBMUX_DB34(TDB[34], BUS_DB[34], TENB, BMUX_DB[34]);
    primitive = _mux mBMUX_DB35(TDB[35], BUS_DB[35], TENB, BMUX_DB[35]);
    primitive = _mux mBMUX_DB36(TDB[36], BUS_DB[36], TENB, BMUX_DB[36]);
    primitive = _mux mBMUX_DB37(TDB[37], BUS_DB[37], TENB, BMUX_DB[37]);
    primitive = _mux mBMUX_DB38(TDB[38], BUS_DB[38], TENB, BMUX_DB[38]);
    primitive = _mux mBMUX_DB39(TDB[39], BUS_DB[39], TENB, BMUX_DB[39]);
    primitive = _mux mBMUX_DB40(TDB[40], BUS_DB[40], TENB, BMUX_DB[40]);
    primitive = _mux mBMUX_DB41(TDB[41], BUS_DB[41], TENB, BMUX_DB[41]);
    primitive = _mux mBMUX_DB42(TDB[42], BUS_DB[42], TENB, BMUX_DB[42]);
    primitive = _mux mBMUX_DB43(TDB[43], BUS_DB[43], TENB, BMUX_DB[43]);
    primitive = _mux mBMUX_DB44(TDB[44], BUS_DB[44], TENB, BMUX_DB[44]);
    primitive = _mux mBMUX_DB45(TDB[45], BUS_DB[45], TENB, BMUX_DB[45]);
    primitive = _mux mBMUX_DB46(TDB[46], BUS_DB[46], TENB, BMUX_DB[46]);
    primitive = _mux mBMUX_DB47(TDB[47], BUS_DB[47], TENB, BMUX_DB[47]);
    primitive = _mux mBMUX_DB48(TDB[48], BUS_DB[48], TENB, BMUX_DB[48]);
    primitive = _mux mBMUX_DB49(TDB[49], BUS_DB[49], TENB, BMUX_DB[49]);
    primitive = _mux mBMUX_DB50(TDB[50], BUS_DB[50], TENB, BMUX_DB[50]);
    primitive = _mux mBMUX_DB51(TDB[51], BUS_DB[51], TENB, BMUX_DB[51]);
    primitive = _mux mBMUX_DB52(TDB[52], BUS_DB[52], TENB, BMUX_DB[52]);
    primitive = _mux mBMUX_DB53(TDB[53], BUS_DB[53], TENB, BMUX_DB[53]);
    primitive = _mux mBMUX_DB54(TDB[54], BUS_DB[54], TENB, BMUX_DB[54]);
    primitive = _mux mBMUX_DB55(TDB[55], BUS_DB[55], TENB, BMUX_DB[55]);
    primitive = _mux mBMUX_DB56(TDB[56], BUS_DB[56], TENB, BMUX_DB[56]);
    primitive = _mux mBMUX_DB57(TDB[57], BUS_DB[57], TENB, BMUX_DB[57]);
    primitive = _mux mBMUX_DB58(TDB[58], BUS_DB[58], TENB, BMUX_DB[58]);
    primitive = _mux mBMUX_DB59(TDB[59], BUS_DB[59], TENB, BMUX_DB[59]);
    primitive = _mux mBMUX_DB60(TDB[60], BUS_DB[60], TENB, BMUX_DB[60]);
    primitive = _mux mBMUX_DB61(TDB[61], BUS_DB[61], TENB, BMUX_DB[61]);
    primitive = _mux mBMUX_DB62(TDB[62], BUS_DB[62], TENB, BMUX_DB[62]);
    primitive = _mux mBMUX_DB63(TDB[63], BUS_DB[63], TENB, BMUX_DB[63]);
    primitive = _mux mBMUX_DB64(TDB[64], BUS_DB[64], TENB, BMUX_DB[64]);
    primitive = _mux mBMUX_DB65(TDB[65], BUS_DB[65], TENB, BMUX_DB[65]);
    primitive = _mux mBMUX_DB66(TDB[66], BUS_DB[66], TENB, BMUX_DB[66]);
    primitive = _mux mBMUX_DB67(TDB[67], BUS_DB[67], TENB, BMUX_DB[67]);
    primitive = _mux mBMUX_DB68(TDB[68], BUS_DB[68], TENB, BMUX_DB[68]);
    primitive = _mux mBMUX_DB69(TDB[69], BUS_DB[69], TENB, BMUX_DB[69]);
    primitive = _mux mBMUX_DB70(TDB[70], BUS_DB[70], TENB, BMUX_DB[70]);
    primitive = _mux mBMUX_DB71(TDB[71], BUS_DB[71], TENB, BMUX_DB[71]);
    primitive = _mux mBMUX_DB72(TDB[72], BUS_DB[72], TENB, BMUX_DB[72]);
    primitive = _mux mBMUX_DB73(TDB[73], BUS_DB[73], TENB, BMUX_DB[73]);
    primitive = _mux mBMUX_DB74(TDB[74], BUS_DB[74], TENB, BMUX_DB[74]);
    primitive = _mux mBMUX_DB75(TDB[75], BUS_DB[75], TENB, BMUX_DB[75]);
    primitive = _mux mBMUX_DB76(TDB[76], BUS_DB[76], TENB, BMUX_DB[76]);
    primitive = _mux mBMUX_DB77(TDB[77], BUS_DB[77], TENB, BMUX_DB[77]);
    primitive = _mux mBMUX_DB78(TDB[78], BUS_DB[78], TENB, BMUX_DB[78]);
    primitive = _mux mBMUX_DB79(TDB[79], BUS_DB[79], TENB, BMUX_DB[79]);
    primitive = _mux mBMUX_DB80(TDB[80], BUS_DB[80], TENB, BMUX_DB[80]);
    primitive = _mux mBMUX_DB81(TDB[81], BUS_DB[81], TENB, BMUX_DB[81]);
    primitive = _mux mBMUX_DB82(TDB[82], BUS_DB[82], TENB, BMUX_DB[82]);
    primitive = _mux mBMUX_DB83(TDB[83], BUS_DB[83], TENB, BMUX_DB[83]);
    primitive = _mux mBMUX_DB84(TDB[84], BUS_DB[84], TENB, BMUX_DB[84]);
    primitive = _mux mBMUX_DB85(TDB[85], BUS_DB[85], TENB, BMUX_DB[85]);
    primitive = _mux mBMUX_DB86(TDB[86], BUS_DB[86], TENB, BMUX_DB[86]);
    primitive = _mux mBMUX_DB87(TDB[87], BUS_DB[87], TENB, BMUX_DB[87]);
    primitive = _mux mBMUX_DB88(TDB[88], BUS_DB[88], TENB, BMUX_DB[88]);
    primitive = _mux mBMUX_DB89(TDB[89], BUS_DB[89], TENB, BMUX_DB[89]);
    primitive = _mux mBMUX_DB90(TDB[90], BUS_DB[90], TENB, BMUX_DB[90]);
    primitive = _mux mBMUX_DB91(TDB[91], BUS_DB[91], TENB, BMUX_DB[91]);
    primitive = _mux mBMUX_DB92(TDB[92], BUS_DB[92], TENB, BMUX_DB[92]);
    primitive = _mux mBMUX_DB93(TDB[93], BUS_DB[93], TENB, BMUX_DB[93]);
    primitive = _mux mBMUX_DB94(TDB[94], BUS_DB[94], TENB, BMUX_DB[94]);
    primitive = _mux mBMUX_DB95(TDB[95], BUS_DB[95], TENB, BMUX_DB[95]);
    primitive = _mux mBMUX_DB96(TDB[96], BUS_DB[96], TENB, BMUX_DB[96]);
    primitive = _mux mBMUX_DB97(TDB[97], BUS_DB[97], TENB, BMUX_DB[97]);
    primitive = _mux mBMUX_DB98(TDB[98], BUS_DB[98], TENB, BMUX_DB[98]);
    primitive = _mux mBMUX_DB99(TDB[99], BUS_DB[99], TENB, BMUX_DB[99]);
    primitive = _mux mBMUX_DB100(TDB[100], BUS_DB[100], TENB, BMUX_DB[100]);
    primitive = _mux mBMUX_DB101(TDB[101], BUS_DB[101], TENB, BMUX_DB[101]);
    primitive = _mux mBMUX_DB102(TDB[102], BUS_DB[102], TENB, BMUX_DB[102]);
    primitive = _mux mBMUX_DB103(TDB[103], BUS_DB[103], TENB, BMUX_DB[103]);
    primitive = _mux mBMUX_DB104(TDB[104], BUS_DB[104], TENB, BMUX_DB[104]);
    primitive = _mux mBMUX_DB105(TDB[105], BUS_DB[105], TENB, BMUX_DB[105]);
    primitive = _mux mBMUX_DB106(TDB[106], BUS_DB[106], TENB, BMUX_DB[106]);
    primitive = _mux mBMUX_DB107(TDB[107], BUS_DB[107], TENB, BMUX_DB[107]);
    primitive = _mux mBMUX_DB108(TDB[108], BUS_DB[108], TENB, BMUX_DB[108]);
    primitive = _mux mBMUX_DB109(TDB[109], BUS_DB[109], TENB, BMUX_DB[109]);
    primitive = _mux mBMUX_DB110(TDB[110], BUS_DB[110], TENB, BMUX_DB[110]);
    primitive = _mux mBMUX_DB111(TDB[111], BUS_DB[111], TENB, BMUX_DB[111]);
    primitive = _mux mBMUX_DB112(TDB[112], BUS_DB[112], TENB, BMUX_DB[112]);
    primitive = _mux mBMUX_DB113(TDB[113], BUS_DB[113], TENB, BMUX_DB[113]);
    primitive = _mux mBMUX_DB114(TDB[114], BUS_DB[114], TENB, BMUX_DB[114]);
    primitive = _mux mBMUX_DB115(TDB[115], BUS_DB[115], TENB, BMUX_DB[115]);
    primitive = _mux mBMUX_DB116(TDB[116], BUS_DB[116], TENB, BMUX_DB[116]);
    primitive = _mux mBMUX_DB117(TDB[117], BUS_DB[117], TENB, BMUX_DB[117]);
    primitive = _mux mBMUX_DB118(TDB[118], BUS_DB[118], TENB, BMUX_DB[118]);
    primitive = _mux mBMUX_DB119(TDB[119], BUS_DB[119], TENB, BMUX_DB[119]);
    primitive = _mux mBMUX_DB120(TDB[120], BUS_DB[120], TENB, BMUX_DB[120]);
    primitive = _mux mBMUX_DB121(TDB[121], BUS_DB[121], TENB, BMUX_DB[121]);
    primitive = _mux mBMUX_DB122(TDB[122], BUS_DB[122], TENB, BMUX_DB[122]);
    primitive = _mux mBMUX_DB123(TDB[123], BUS_DB[123], TENB, BMUX_DB[123]);
    primitive = _mux mBMUX_DB124(TDB[124], BUS_DB[124], TENB, BMUX_DB[124]);
    primitive = _mux mBMUX_DB125(TDB[125], BUS_DB[125], TENB, BMUX_DB[125]);
    primitive = _mux mBMUX_DB126(TDB[126], BUS_DB[126], TENB, BMUX_DB[126]);
    primitive = _mux mBMUX_DB127(TDB[127], BUS_DB[127], TENB, BMUX_DB[127]);
  )

  intern (BMUX_WENB) (array = 127 : 0;
    primitive = _mux mBMUX_WENB0(TWENB[0],  BUS_WENB[0], TENB, BMUX_WENB[0]);
    primitive = _mux mBMUX_WENB1(TWENB[1],  BUS_WENB[1], TENB, BMUX_WENB[1]);
    primitive = _mux mBMUX_WENB2(TWENB[2],  BUS_WENB[2], TENB, BMUX_WENB[2]);
    primitive = _mux mBMUX_WENB3(TWENB[3],  BUS_WENB[3], TENB, BMUX_WENB[3]);
    primitive = _mux mBMUX_WENB4(TWENB[4],  BUS_WENB[4], TENB, BMUX_WENB[4]);
    primitive = _mux mBMUX_WENB5(TWENB[5],  BUS_WENB[5], TENB, BMUX_WENB[5]);
    primitive = _mux mBMUX_WENB6(TWENB[6],  BUS_WENB[6], TENB, BMUX_WENB[6]);
    primitive = _mux mBMUX_WENB7(TWENB[7],  BUS_WENB[7], TENB, BMUX_WENB[7]);
    primitive = _mux mBMUX_WENB8(TWENB[8],  BUS_WENB[8], TENB, BMUX_WENB[8]);
    primitive = _mux mBMUX_WENB9(TWENB[9],  BUS_WENB[9], TENB, BMUX_WENB[9]);
    primitive = _mux mBMUX_WENB10(TWENB[10],  BUS_WENB[10], TENB, BMUX_WENB[10]);
    primitive = _mux mBMUX_WENB11(TWENB[11],  BUS_WENB[11], TENB, BMUX_WENB[11]);
    primitive = _mux mBMUX_WENB12(TWENB[12],  BUS_WENB[12], TENB, BMUX_WENB[12]);
    primitive = _mux mBMUX_WENB13(TWENB[13],  BUS_WENB[13], TENB, BMUX_WENB[13]);
    primitive = _mux mBMUX_WENB14(TWENB[14],  BUS_WENB[14], TENB, BMUX_WENB[14]);
    primitive = _mux mBMUX_WENB15(TWENB[15],  BUS_WENB[15], TENB, BMUX_WENB[15]);
    primitive = _mux mBMUX_WENB16(TWENB[16],  BUS_WENB[16], TENB, BMUX_WENB[16]);
    primitive = _mux mBMUX_WENB17(TWENB[17],  BUS_WENB[17], TENB, BMUX_WENB[17]);
    primitive = _mux mBMUX_WENB18(TWENB[18],  BUS_WENB[18], TENB, BMUX_WENB[18]);
    primitive = _mux mBMUX_WENB19(TWENB[19],  BUS_WENB[19], TENB, BMUX_WENB[19]);
    primitive = _mux mBMUX_WENB20(TWENB[20],  BUS_WENB[20], TENB, BMUX_WENB[20]);
    primitive = _mux mBMUX_WENB21(TWENB[21],  BUS_WENB[21], TENB, BMUX_WENB[21]);
    primitive = _mux mBMUX_WENB22(TWENB[22],  BUS_WENB[22], TENB, BMUX_WENB[22]);
    primitive = _mux mBMUX_WENB23(TWENB[23],  BUS_WENB[23], TENB, BMUX_WENB[23]);
    primitive = _mux mBMUX_WENB24(TWENB[24],  BUS_WENB[24], TENB, BMUX_WENB[24]);
    primitive = _mux mBMUX_WENB25(TWENB[25],  BUS_WENB[25], TENB, BMUX_WENB[25]);
    primitive = _mux mBMUX_WENB26(TWENB[26],  BUS_WENB[26], TENB, BMUX_WENB[26]);
    primitive = _mux mBMUX_WENB27(TWENB[27],  BUS_WENB[27], TENB, BMUX_WENB[27]);
    primitive = _mux mBMUX_WENB28(TWENB[28],  BUS_WENB[28], TENB, BMUX_WENB[28]);
    primitive = _mux mBMUX_WENB29(TWENB[29],  BUS_WENB[29], TENB, BMUX_WENB[29]);
    primitive = _mux mBMUX_WENB30(TWENB[30],  BUS_WENB[30], TENB, BMUX_WENB[30]);
    primitive = _mux mBMUX_WENB31(TWENB[31],  BUS_WENB[31], TENB, BMUX_WENB[31]);
    primitive = _mux mBMUX_WENB32(TWENB[32],  BUS_WENB[32], TENB, BMUX_WENB[32]);
    primitive = _mux mBMUX_WENB33(TWENB[33],  BUS_WENB[33], TENB, BMUX_WENB[33]);
    primitive = _mux mBMUX_WENB34(TWENB[34],  BUS_WENB[34], TENB, BMUX_WENB[34]);
    primitive = _mux mBMUX_WENB35(TWENB[35],  BUS_WENB[35], TENB, BMUX_WENB[35]);
    primitive = _mux mBMUX_WENB36(TWENB[36],  BUS_WENB[36], TENB, BMUX_WENB[36]);
    primitive = _mux mBMUX_WENB37(TWENB[37],  BUS_WENB[37], TENB, BMUX_WENB[37]);
    primitive = _mux mBMUX_WENB38(TWENB[38],  BUS_WENB[38], TENB, BMUX_WENB[38]);
    primitive = _mux mBMUX_WENB39(TWENB[39],  BUS_WENB[39], TENB, BMUX_WENB[39]);
    primitive = _mux mBMUX_WENB40(TWENB[40],  BUS_WENB[40], TENB, BMUX_WENB[40]);
    primitive = _mux mBMUX_WENB41(TWENB[41],  BUS_WENB[41], TENB, BMUX_WENB[41]);
    primitive = _mux mBMUX_WENB42(TWENB[42],  BUS_WENB[42], TENB, BMUX_WENB[42]);
    primitive = _mux mBMUX_WENB43(TWENB[43],  BUS_WENB[43], TENB, BMUX_WENB[43]);
    primitive = _mux mBMUX_WENB44(TWENB[44],  BUS_WENB[44], TENB, BMUX_WENB[44]);
    primitive = _mux mBMUX_WENB45(TWENB[45],  BUS_WENB[45], TENB, BMUX_WENB[45]);
    primitive = _mux mBMUX_WENB46(TWENB[46],  BUS_WENB[46], TENB, BMUX_WENB[46]);
    primitive = _mux mBMUX_WENB47(TWENB[47],  BUS_WENB[47], TENB, BMUX_WENB[47]);
    primitive = _mux mBMUX_WENB48(TWENB[48],  BUS_WENB[48], TENB, BMUX_WENB[48]);
    primitive = _mux mBMUX_WENB49(TWENB[49],  BUS_WENB[49], TENB, BMUX_WENB[49]);
    primitive = _mux mBMUX_WENB50(TWENB[50],  BUS_WENB[50], TENB, BMUX_WENB[50]);
    primitive = _mux mBMUX_WENB51(TWENB[51],  BUS_WENB[51], TENB, BMUX_WENB[51]);
    primitive = _mux mBMUX_WENB52(TWENB[52],  BUS_WENB[52], TENB, BMUX_WENB[52]);
    primitive = _mux mBMUX_WENB53(TWENB[53],  BUS_WENB[53], TENB, BMUX_WENB[53]);
    primitive = _mux mBMUX_WENB54(TWENB[54],  BUS_WENB[54], TENB, BMUX_WENB[54]);
    primitive = _mux mBMUX_WENB55(TWENB[55],  BUS_WENB[55], TENB, BMUX_WENB[55]);
    primitive = _mux mBMUX_WENB56(TWENB[56],  BUS_WENB[56], TENB, BMUX_WENB[56]);
    primitive = _mux mBMUX_WENB57(TWENB[57],  BUS_WENB[57], TENB, BMUX_WENB[57]);
    primitive = _mux mBMUX_WENB58(TWENB[58],  BUS_WENB[58], TENB, BMUX_WENB[58]);
    primitive = _mux mBMUX_WENB59(TWENB[59],  BUS_WENB[59], TENB, BMUX_WENB[59]);
    primitive = _mux mBMUX_WENB60(TWENB[60],  BUS_WENB[60], TENB, BMUX_WENB[60]);
    primitive = _mux mBMUX_WENB61(TWENB[61],  BUS_WENB[61], TENB, BMUX_WENB[61]);
    primitive = _mux mBMUX_WENB62(TWENB[62],  BUS_WENB[62], TENB, BMUX_WENB[62]);
    primitive = _mux mBMUX_WENB63(TWENB[63],  BUS_WENB[63], TENB, BMUX_WENB[63]);
    primitive = _mux mBMUX_WENB64(TWENB[64],  BUS_WENB[64], TENB, BMUX_WENB[64]);
    primitive = _mux mBMUX_WENB65(TWENB[65],  BUS_WENB[65], TENB, BMUX_WENB[65]);
    primitive = _mux mBMUX_WENB66(TWENB[66],  BUS_WENB[66], TENB, BMUX_WENB[66]);
    primitive = _mux mBMUX_WENB67(TWENB[67],  BUS_WENB[67], TENB, BMUX_WENB[67]);
    primitive = _mux mBMUX_WENB68(TWENB[68],  BUS_WENB[68], TENB, BMUX_WENB[68]);
    primitive = _mux mBMUX_WENB69(TWENB[69],  BUS_WENB[69], TENB, BMUX_WENB[69]);
    primitive = _mux mBMUX_WENB70(TWENB[70],  BUS_WENB[70], TENB, BMUX_WENB[70]);
    primitive = _mux mBMUX_WENB71(TWENB[71],  BUS_WENB[71], TENB, BMUX_WENB[71]);
    primitive = _mux mBMUX_WENB72(TWENB[72],  BUS_WENB[72], TENB, BMUX_WENB[72]);
    primitive = _mux mBMUX_WENB73(TWENB[73],  BUS_WENB[73], TENB, BMUX_WENB[73]);
    primitive = _mux mBMUX_WENB74(TWENB[74],  BUS_WENB[74], TENB, BMUX_WENB[74]);
    primitive = _mux mBMUX_WENB75(TWENB[75],  BUS_WENB[75], TENB, BMUX_WENB[75]);
    primitive = _mux mBMUX_WENB76(TWENB[76],  BUS_WENB[76], TENB, BMUX_WENB[76]);
    primitive = _mux mBMUX_WENB77(TWENB[77],  BUS_WENB[77], TENB, BMUX_WENB[77]);
    primitive = _mux mBMUX_WENB78(TWENB[78],  BUS_WENB[78], TENB, BMUX_WENB[78]);
    primitive = _mux mBMUX_WENB79(TWENB[79],  BUS_WENB[79], TENB, BMUX_WENB[79]);
    primitive = _mux mBMUX_WENB80(TWENB[80],  BUS_WENB[80], TENB, BMUX_WENB[80]);
    primitive = _mux mBMUX_WENB81(TWENB[81],  BUS_WENB[81], TENB, BMUX_WENB[81]);
    primitive = _mux mBMUX_WENB82(TWENB[82],  BUS_WENB[82], TENB, BMUX_WENB[82]);
    primitive = _mux mBMUX_WENB83(TWENB[83],  BUS_WENB[83], TENB, BMUX_WENB[83]);
    primitive = _mux mBMUX_WENB84(TWENB[84],  BUS_WENB[84], TENB, BMUX_WENB[84]);
    primitive = _mux mBMUX_WENB85(TWENB[85],  BUS_WENB[85], TENB, BMUX_WENB[85]);
    primitive = _mux mBMUX_WENB86(TWENB[86],  BUS_WENB[86], TENB, BMUX_WENB[86]);
    primitive = _mux mBMUX_WENB87(TWENB[87],  BUS_WENB[87], TENB, BMUX_WENB[87]);
    primitive = _mux mBMUX_WENB88(TWENB[88],  BUS_WENB[88], TENB, BMUX_WENB[88]);
    primitive = _mux mBMUX_WENB89(TWENB[89],  BUS_WENB[89], TENB, BMUX_WENB[89]);
    primitive = _mux mBMUX_WENB90(TWENB[90],  BUS_WENB[90], TENB, BMUX_WENB[90]);
    primitive = _mux mBMUX_WENB91(TWENB[91],  BUS_WENB[91], TENB, BMUX_WENB[91]);
    primitive = _mux mBMUX_WENB92(TWENB[92],  BUS_WENB[92], TENB, BMUX_WENB[92]);
    primitive = _mux mBMUX_WENB93(TWENB[93],  BUS_WENB[93], TENB, BMUX_WENB[93]);
    primitive = _mux mBMUX_WENB94(TWENB[94],  BUS_WENB[94], TENB, BMUX_WENB[94]);
    primitive = _mux mBMUX_WENB95(TWENB[95],  BUS_WENB[95], TENB, BMUX_WENB[95]);
    primitive = _mux mBMUX_WENB96(TWENB[96],  BUS_WENB[96], TENB, BMUX_WENB[96]);
    primitive = _mux mBMUX_WENB97(TWENB[97],  BUS_WENB[97], TENB, BMUX_WENB[97]);
    primitive = _mux mBMUX_WENB98(TWENB[98],  BUS_WENB[98], TENB, BMUX_WENB[98]);
    primitive = _mux mBMUX_WENB99(TWENB[99],  BUS_WENB[99], TENB, BMUX_WENB[99]);
    primitive = _mux mBMUX_WENB100(TWENB[100],  BUS_WENB[100], TENB, BMUX_WENB[100]);
    primitive = _mux mBMUX_WENB101(TWENB[101],  BUS_WENB[101], TENB, BMUX_WENB[101]);
    primitive = _mux mBMUX_WENB102(TWENB[102],  BUS_WENB[102], TENB, BMUX_WENB[102]);
    primitive = _mux mBMUX_WENB103(TWENB[103],  BUS_WENB[103], TENB, BMUX_WENB[103]);
    primitive = _mux mBMUX_WENB104(TWENB[104],  BUS_WENB[104], TENB, BMUX_WENB[104]);
    primitive = _mux mBMUX_WENB105(TWENB[105],  BUS_WENB[105], TENB, BMUX_WENB[105]);
    primitive = _mux mBMUX_WENB106(TWENB[106],  BUS_WENB[106], TENB, BMUX_WENB[106]);
    primitive = _mux mBMUX_WENB107(TWENB[107],  BUS_WENB[107], TENB, BMUX_WENB[107]);
    primitive = _mux mBMUX_WENB108(TWENB[108],  BUS_WENB[108], TENB, BMUX_WENB[108]);
    primitive = _mux mBMUX_WENB109(TWENB[109],  BUS_WENB[109], TENB, BMUX_WENB[109]);
    primitive = _mux mBMUX_WENB110(TWENB[110],  BUS_WENB[110], TENB, BMUX_WENB[110]);
    primitive = _mux mBMUX_WENB111(TWENB[111],  BUS_WENB[111], TENB, BMUX_WENB[111]);
    primitive = _mux mBMUX_WENB112(TWENB[112],  BUS_WENB[112], TENB, BMUX_WENB[112]);
    primitive = _mux mBMUX_WENB113(TWENB[113],  BUS_WENB[113], TENB, BMUX_WENB[113]);
    primitive = _mux mBMUX_WENB114(TWENB[114],  BUS_WENB[114], TENB, BMUX_WENB[114]);
    primitive = _mux mBMUX_WENB115(TWENB[115],  BUS_WENB[115], TENB, BMUX_WENB[115]);
    primitive = _mux mBMUX_WENB116(TWENB[116],  BUS_WENB[116], TENB, BMUX_WENB[116]);
    primitive = _mux mBMUX_WENB117(TWENB[117],  BUS_WENB[117], TENB, BMUX_WENB[117]);
    primitive = _mux mBMUX_WENB118(TWENB[118],  BUS_WENB[118], TENB, BMUX_WENB[118]);
    primitive = _mux mBMUX_WENB119(TWENB[119],  BUS_WENB[119], TENB, BMUX_WENB[119]);
    primitive = _mux mBMUX_WENB120(TWENB[120],  BUS_WENB[120], TENB, BMUX_WENB[120]);
    primitive = _mux mBMUX_WENB121(TWENB[121],  BUS_WENB[121], TENB, BMUX_WENB[121]);
    primitive = _mux mBMUX_WENB122(TWENB[122],  BUS_WENB[122], TENB, BMUX_WENB[122]);
    primitive = _mux mBMUX_WENB123(TWENB[123],  BUS_WENB[123], TENB, BMUX_WENB[123]);
    primitive = _mux mBMUX_WENB124(TWENB[124],  BUS_WENB[124], TENB, BMUX_WENB[124]);
    primitive = _mux mBMUX_WENB125(TWENB[125],  BUS_WENB[125], TENB, BMUX_WENB[125]);
    primitive = _mux mBMUX_WENB126(TWENB[126],  BUS_WENB[126], TENB, BMUX_WENB[126]);
    primitive = _mux mBMUX_WENB127(TWENB[127],  BUS_WENB[127], TENB, BMUX_WENB[127]);
  )
  intern (BMUXSEL_WENB) (array = 127 : 0;
  primitive = _mux mBMUXSEL_WENB0(mlc_bmuxsel,  BMUX_WENB[0], DFTRAMBYP, BMUXSEL_WENB[0]);
  primitive = _mux mBMUXSEL_WENB1(mlc_bmuxsel,  BMUX_WENB[1], DFTRAMBYP, BMUXSEL_WENB[1]);
  primitive = _mux mBMUXSEL_WENB2(mlc_bmuxsel,  BMUX_WENB[2], DFTRAMBYP, BMUXSEL_WENB[2]);
  primitive = _mux mBMUXSEL_WENB3(mlc_bmuxsel,  BMUX_WENB[3], DFTRAMBYP, BMUXSEL_WENB[3]);
  primitive = _mux mBMUXSEL_WENB4(mlc_bmuxsel,  BMUX_WENB[4], DFTRAMBYP, BMUXSEL_WENB[4]);
  primitive = _mux mBMUXSEL_WENB5(mlc_bmuxsel,  BMUX_WENB[5], DFTRAMBYP, BMUXSEL_WENB[5]);
  primitive = _mux mBMUXSEL_WENB6(mlc_bmuxsel,  BMUX_WENB[6], DFTRAMBYP, BMUXSEL_WENB[6]);
  primitive = _mux mBMUXSEL_WENB7(mlc_bmuxsel,  BMUX_WENB[7], DFTRAMBYP, BMUXSEL_WENB[7]);
  primitive = _mux mBMUXSEL_WENB8(mlc_bmuxsel,  BMUX_WENB[8], DFTRAMBYP, BMUXSEL_WENB[8]);
  primitive = _mux mBMUXSEL_WENB9(mlc_bmuxsel,  BMUX_WENB[9], DFTRAMBYP, BMUXSEL_WENB[9]);
  primitive = _mux mBMUXSEL_WENB10(mlc_bmuxsel,  BMUX_WENB[10], DFTRAMBYP, BMUXSEL_WENB[10]);
  primitive = _mux mBMUXSEL_WENB11(mlc_bmuxsel,  BMUX_WENB[11], DFTRAMBYP, BMUXSEL_WENB[11]);
  primitive = _mux mBMUXSEL_WENB12(mlc_bmuxsel,  BMUX_WENB[12], DFTRAMBYP, BMUXSEL_WENB[12]);
  primitive = _mux mBMUXSEL_WENB13(mlc_bmuxsel,  BMUX_WENB[13], DFTRAMBYP, BMUXSEL_WENB[13]);
  primitive = _mux mBMUXSEL_WENB14(mlc_bmuxsel,  BMUX_WENB[14], DFTRAMBYP, BMUXSEL_WENB[14]);
  primitive = _mux mBMUXSEL_WENB15(mlc_bmuxsel,  BMUX_WENB[15], DFTRAMBYP, BMUXSEL_WENB[15]);
  primitive = _mux mBMUXSEL_WENB16(mlc_bmuxsel,  BMUX_WENB[16], DFTRAMBYP, BMUXSEL_WENB[16]);
  primitive = _mux mBMUXSEL_WENB17(mlc_bmuxsel,  BMUX_WENB[17], DFTRAMBYP, BMUXSEL_WENB[17]);
  primitive = _mux mBMUXSEL_WENB18(mlc_bmuxsel,  BMUX_WENB[18], DFTRAMBYP, BMUXSEL_WENB[18]);
  primitive = _mux mBMUXSEL_WENB19(mlc_bmuxsel,  BMUX_WENB[19], DFTRAMBYP, BMUXSEL_WENB[19]);
  primitive = _mux mBMUXSEL_WENB20(mlc_bmuxsel,  BMUX_WENB[20], DFTRAMBYP, BMUXSEL_WENB[20]);
  primitive = _mux mBMUXSEL_WENB21(mlc_bmuxsel,  BMUX_WENB[21], DFTRAMBYP, BMUXSEL_WENB[21]);
  primitive = _mux mBMUXSEL_WENB22(mlc_bmuxsel,  BMUX_WENB[22], DFTRAMBYP, BMUXSEL_WENB[22]);
  primitive = _mux mBMUXSEL_WENB23(mlc_bmuxsel,  BMUX_WENB[23], DFTRAMBYP, BMUXSEL_WENB[23]);
  primitive = _mux mBMUXSEL_WENB24(mlc_bmuxsel,  BMUX_WENB[24], DFTRAMBYP, BMUXSEL_WENB[24]);
  primitive = _mux mBMUXSEL_WENB25(mlc_bmuxsel,  BMUX_WENB[25], DFTRAMBYP, BMUXSEL_WENB[25]);
  primitive = _mux mBMUXSEL_WENB26(mlc_bmuxsel,  BMUX_WENB[26], DFTRAMBYP, BMUXSEL_WENB[26]);
  primitive = _mux mBMUXSEL_WENB27(mlc_bmuxsel,  BMUX_WENB[27], DFTRAMBYP, BMUXSEL_WENB[27]);
  primitive = _mux mBMUXSEL_WENB28(mlc_bmuxsel,  BMUX_WENB[28], DFTRAMBYP, BMUXSEL_WENB[28]);
  primitive = _mux mBMUXSEL_WENB29(mlc_bmuxsel,  BMUX_WENB[29], DFTRAMBYP, BMUXSEL_WENB[29]);
  primitive = _mux mBMUXSEL_WENB30(mlc_bmuxsel,  BMUX_WENB[30], DFTRAMBYP, BMUXSEL_WENB[30]);
  primitive = _mux mBMUXSEL_WENB31(mlc_bmuxsel,  BMUX_WENB[31], DFTRAMBYP, BMUXSEL_WENB[31]);
  primitive = _mux mBMUXSEL_WENB32(mlc_bmuxsel,  BMUX_WENB[32], DFTRAMBYP, BMUXSEL_WENB[32]);
  primitive = _mux mBMUXSEL_WENB33(mlc_bmuxsel,  BMUX_WENB[33], DFTRAMBYP, BMUXSEL_WENB[33]);
  primitive = _mux mBMUXSEL_WENB34(mlc_bmuxsel,  BMUX_WENB[34], DFTRAMBYP, BMUXSEL_WENB[34]);
  primitive = _mux mBMUXSEL_WENB35(mlc_bmuxsel,  BMUX_WENB[35], DFTRAMBYP, BMUXSEL_WENB[35]);
  primitive = _mux mBMUXSEL_WENB36(mlc_bmuxsel,  BMUX_WENB[36], DFTRAMBYP, BMUXSEL_WENB[36]);
  primitive = _mux mBMUXSEL_WENB37(mlc_bmuxsel,  BMUX_WENB[37], DFTRAMBYP, BMUXSEL_WENB[37]);
  primitive = _mux mBMUXSEL_WENB38(mlc_bmuxsel,  BMUX_WENB[38], DFTRAMBYP, BMUXSEL_WENB[38]);
  primitive = _mux mBMUXSEL_WENB39(mlc_bmuxsel,  BMUX_WENB[39], DFTRAMBYP, BMUXSEL_WENB[39]);
  primitive = _mux mBMUXSEL_WENB40(mlc_bmuxsel,  BMUX_WENB[40], DFTRAMBYP, BMUXSEL_WENB[40]);
  primitive = _mux mBMUXSEL_WENB41(mlc_bmuxsel,  BMUX_WENB[41], DFTRAMBYP, BMUXSEL_WENB[41]);
  primitive = _mux mBMUXSEL_WENB42(mlc_bmuxsel,  BMUX_WENB[42], DFTRAMBYP, BMUXSEL_WENB[42]);
  primitive = _mux mBMUXSEL_WENB43(mlc_bmuxsel,  BMUX_WENB[43], DFTRAMBYP, BMUXSEL_WENB[43]);
  primitive = _mux mBMUXSEL_WENB44(mlc_bmuxsel,  BMUX_WENB[44], DFTRAMBYP, BMUXSEL_WENB[44]);
  primitive = _mux mBMUXSEL_WENB45(mlc_bmuxsel,  BMUX_WENB[45], DFTRAMBYP, BMUXSEL_WENB[45]);
  primitive = _mux mBMUXSEL_WENB46(mlc_bmuxsel,  BMUX_WENB[46], DFTRAMBYP, BMUXSEL_WENB[46]);
  primitive = _mux mBMUXSEL_WENB47(mlc_bmuxsel,  BMUX_WENB[47], DFTRAMBYP, BMUXSEL_WENB[47]);
  primitive = _mux mBMUXSEL_WENB48(mlc_bmuxsel,  BMUX_WENB[48], DFTRAMBYP, BMUXSEL_WENB[48]);
  primitive = _mux mBMUXSEL_WENB49(mlc_bmuxsel,  BMUX_WENB[49], DFTRAMBYP, BMUXSEL_WENB[49]);
  primitive = _mux mBMUXSEL_WENB50(mlc_bmuxsel,  BMUX_WENB[50], DFTRAMBYP, BMUXSEL_WENB[50]);
  primitive = _mux mBMUXSEL_WENB51(mlc_bmuxsel,  BMUX_WENB[51], DFTRAMBYP, BMUXSEL_WENB[51]);
  primitive = _mux mBMUXSEL_WENB52(mlc_bmuxsel,  BMUX_WENB[52], DFTRAMBYP, BMUXSEL_WENB[52]);
  primitive = _mux mBMUXSEL_WENB53(mlc_bmuxsel,  BMUX_WENB[53], DFTRAMBYP, BMUXSEL_WENB[53]);
  primitive = _mux mBMUXSEL_WENB54(mlc_bmuxsel,  BMUX_WENB[54], DFTRAMBYP, BMUXSEL_WENB[54]);
  primitive = _mux mBMUXSEL_WENB55(mlc_bmuxsel,  BMUX_WENB[55], DFTRAMBYP, BMUXSEL_WENB[55]);
  primitive = _mux mBMUXSEL_WENB56(mlc_bmuxsel,  BMUX_WENB[56], DFTRAMBYP, BMUXSEL_WENB[56]);
  primitive = _mux mBMUXSEL_WENB57(mlc_bmuxsel,  BMUX_WENB[57], DFTRAMBYP, BMUXSEL_WENB[57]);
  primitive = _mux mBMUXSEL_WENB58(mlc_bmuxsel,  BMUX_WENB[58], DFTRAMBYP, BMUXSEL_WENB[58]);
  primitive = _mux mBMUXSEL_WENB59(mlc_bmuxsel,  BMUX_WENB[59], DFTRAMBYP, BMUXSEL_WENB[59]);
  primitive = _mux mBMUXSEL_WENB60(mlc_bmuxsel,  BMUX_WENB[60], DFTRAMBYP, BMUXSEL_WENB[60]);
  primitive = _mux mBMUXSEL_WENB61(mlc_bmuxsel,  BMUX_WENB[61], DFTRAMBYP, BMUXSEL_WENB[61]);
  primitive = _mux mBMUXSEL_WENB62(mlc_bmuxsel,  BMUX_WENB[62], DFTRAMBYP, BMUXSEL_WENB[62]);
  primitive = _mux mBMUXSEL_WENB63(mlc_bmuxsel,  BMUX_WENB[63], DFTRAMBYP, BMUXSEL_WENB[63]);
  primitive = _mux mBMUXSEL_WENB64(mlc_bmuxsel,  BMUX_WENB[64], DFTRAMBYP, BMUXSEL_WENB[64]);
  primitive = _mux mBMUXSEL_WENB65(mlc_bmuxsel,  BMUX_WENB[65], DFTRAMBYP, BMUXSEL_WENB[65]);
  primitive = _mux mBMUXSEL_WENB66(mlc_bmuxsel,  BMUX_WENB[66], DFTRAMBYP, BMUXSEL_WENB[66]);
  primitive = _mux mBMUXSEL_WENB67(mlc_bmuxsel,  BMUX_WENB[67], DFTRAMBYP, BMUXSEL_WENB[67]);
  primitive = _mux mBMUXSEL_WENB68(mlc_bmuxsel,  BMUX_WENB[68], DFTRAMBYP, BMUXSEL_WENB[68]);
  primitive = _mux mBMUXSEL_WENB69(mlc_bmuxsel,  BMUX_WENB[69], DFTRAMBYP, BMUXSEL_WENB[69]);
  primitive = _mux mBMUXSEL_WENB70(mlc_bmuxsel,  BMUX_WENB[70], DFTRAMBYP, BMUXSEL_WENB[70]);
  primitive = _mux mBMUXSEL_WENB71(mlc_bmuxsel,  BMUX_WENB[71], DFTRAMBYP, BMUXSEL_WENB[71]);
  primitive = _mux mBMUXSEL_WENB72(mlc_bmuxsel,  BMUX_WENB[72], DFTRAMBYP, BMUXSEL_WENB[72]);
  primitive = _mux mBMUXSEL_WENB73(mlc_bmuxsel,  BMUX_WENB[73], DFTRAMBYP, BMUXSEL_WENB[73]);
  primitive = _mux mBMUXSEL_WENB74(mlc_bmuxsel,  BMUX_WENB[74], DFTRAMBYP, BMUXSEL_WENB[74]);
  primitive = _mux mBMUXSEL_WENB75(mlc_bmuxsel,  BMUX_WENB[75], DFTRAMBYP, BMUXSEL_WENB[75]);
  primitive = _mux mBMUXSEL_WENB76(mlc_bmuxsel,  BMUX_WENB[76], DFTRAMBYP, BMUXSEL_WENB[76]);
  primitive = _mux mBMUXSEL_WENB77(mlc_bmuxsel,  BMUX_WENB[77], DFTRAMBYP, BMUXSEL_WENB[77]);
  primitive = _mux mBMUXSEL_WENB78(mlc_bmuxsel,  BMUX_WENB[78], DFTRAMBYP, BMUXSEL_WENB[78]);
  primitive = _mux mBMUXSEL_WENB79(mlc_bmuxsel,  BMUX_WENB[79], DFTRAMBYP, BMUXSEL_WENB[79]);
  primitive = _mux mBMUXSEL_WENB80(mlc_bmuxsel,  BMUX_WENB[80], DFTRAMBYP, BMUXSEL_WENB[80]);
  primitive = _mux mBMUXSEL_WENB81(mlc_bmuxsel,  BMUX_WENB[81], DFTRAMBYP, BMUXSEL_WENB[81]);
  primitive = _mux mBMUXSEL_WENB82(mlc_bmuxsel,  BMUX_WENB[82], DFTRAMBYP, BMUXSEL_WENB[82]);
  primitive = _mux mBMUXSEL_WENB83(mlc_bmuxsel,  BMUX_WENB[83], DFTRAMBYP, BMUXSEL_WENB[83]);
  primitive = _mux mBMUXSEL_WENB84(mlc_bmuxsel,  BMUX_WENB[84], DFTRAMBYP, BMUXSEL_WENB[84]);
  primitive = _mux mBMUXSEL_WENB85(mlc_bmuxsel,  BMUX_WENB[85], DFTRAMBYP, BMUXSEL_WENB[85]);
  primitive = _mux mBMUXSEL_WENB86(mlc_bmuxsel,  BMUX_WENB[86], DFTRAMBYP, BMUXSEL_WENB[86]);
  primitive = _mux mBMUXSEL_WENB87(mlc_bmuxsel,  BMUX_WENB[87], DFTRAMBYP, BMUXSEL_WENB[87]);
  primitive = _mux mBMUXSEL_WENB88(mlc_bmuxsel,  BMUX_WENB[88], DFTRAMBYP, BMUXSEL_WENB[88]);
  primitive = _mux mBMUXSEL_WENB89(mlc_bmuxsel,  BMUX_WENB[89], DFTRAMBYP, BMUXSEL_WENB[89]);
  primitive = _mux mBMUXSEL_WENB90(mlc_bmuxsel,  BMUX_WENB[90], DFTRAMBYP, BMUXSEL_WENB[90]);
  primitive = _mux mBMUXSEL_WENB91(mlc_bmuxsel,  BMUX_WENB[91], DFTRAMBYP, BMUXSEL_WENB[91]);
  primitive = _mux mBMUXSEL_WENB92(mlc_bmuxsel,  BMUX_WENB[92], DFTRAMBYP, BMUXSEL_WENB[92]);
  primitive = _mux mBMUXSEL_WENB93(mlc_bmuxsel,  BMUX_WENB[93], DFTRAMBYP, BMUXSEL_WENB[93]);
  primitive = _mux mBMUXSEL_WENB94(mlc_bmuxsel,  BMUX_WENB[94], DFTRAMBYP, BMUXSEL_WENB[94]);
  primitive = _mux mBMUXSEL_WENB95(mlc_bmuxsel,  BMUX_WENB[95], DFTRAMBYP, BMUXSEL_WENB[95]);
  primitive = _mux mBMUXSEL_WENB96(mlc_bmuxsel,  BMUX_WENB[96], DFTRAMBYP, BMUXSEL_WENB[96]);
  primitive = _mux mBMUXSEL_WENB97(mlc_bmuxsel,  BMUX_WENB[97], DFTRAMBYP, BMUXSEL_WENB[97]);
  primitive = _mux mBMUXSEL_WENB98(mlc_bmuxsel,  BMUX_WENB[98], DFTRAMBYP, BMUXSEL_WENB[98]);
  primitive = _mux mBMUXSEL_WENB99(mlc_bmuxsel,  BMUX_WENB[99], DFTRAMBYP, BMUXSEL_WENB[99]);
  primitive = _mux mBMUXSEL_WENB100(mlc_bmuxsel,  BMUX_WENB[100], DFTRAMBYP, BMUXSEL_WENB[100]);
  primitive = _mux mBMUXSEL_WENB101(mlc_bmuxsel,  BMUX_WENB[101], DFTRAMBYP, BMUXSEL_WENB[101]);
  primitive = _mux mBMUXSEL_WENB102(mlc_bmuxsel,  BMUX_WENB[102], DFTRAMBYP, BMUXSEL_WENB[102]);
  primitive = _mux mBMUXSEL_WENB103(mlc_bmuxsel,  BMUX_WENB[103], DFTRAMBYP, BMUXSEL_WENB[103]);
  primitive = _mux mBMUXSEL_WENB104(mlc_bmuxsel,  BMUX_WENB[104], DFTRAMBYP, BMUXSEL_WENB[104]);
  primitive = _mux mBMUXSEL_WENB105(mlc_bmuxsel,  BMUX_WENB[105], DFTRAMBYP, BMUXSEL_WENB[105]);
  primitive = _mux mBMUXSEL_WENB106(mlc_bmuxsel,  BMUX_WENB[106], DFTRAMBYP, BMUXSEL_WENB[106]);
  primitive = _mux mBMUXSEL_WENB107(mlc_bmuxsel,  BMUX_WENB[107], DFTRAMBYP, BMUXSEL_WENB[107]);
  primitive = _mux mBMUXSEL_WENB108(mlc_bmuxsel,  BMUX_WENB[108], DFTRAMBYP, BMUXSEL_WENB[108]);
  primitive = _mux mBMUXSEL_WENB109(mlc_bmuxsel,  BMUX_WENB[109], DFTRAMBYP, BMUXSEL_WENB[109]);
  primitive = _mux mBMUXSEL_WENB110(mlc_bmuxsel,  BMUX_WENB[110], DFTRAMBYP, BMUXSEL_WENB[110]);
  primitive = _mux mBMUXSEL_WENB111(mlc_bmuxsel,  BMUX_WENB[111], DFTRAMBYP, BMUXSEL_WENB[111]);
  primitive = _mux mBMUXSEL_WENB112(mlc_bmuxsel,  BMUX_WENB[112], DFTRAMBYP, BMUXSEL_WENB[112]);
  primitive = _mux mBMUXSEL_WENB113(mlc_bmuxsel,  BMUX_WENB[113], DFTRAMBYP, BMUXSEL_WENB[113]);
  primitive = _mux mBMUXSEL_WENB114(mlc_bmuxsel,  BMUX_WENB[114], DFTRAMBYP, BMUXSEL_WENB[114]);
  primitive = _mux mBMUXSEL_WENB115(mlc_bmuxsel,  BMUX_WENB[115], DFTRAMBYP, BMUXSEL_WENB[115]);
  primitive = _mux mBMUXSEL_WENB116(mlc_bmuxsel,  BMUX_WENB[116], DFTRAMBYP, BMUXSEL_WENB[116]);
  primitive = _mux mBMUXSEL_WENB117(mlc_bmuxsel,  BMUX_WENB[117], DFTRAMBYP, BMUXSEL_WENB[117]);
  primitive = _mux mBMUXSEL_WENB118(mlc_bmuxsel,  BMUX_WENB[118], DFTRAMBYP, BMUXSEL_WENB[118]);
  primitive = _mux mBMUXSEL_WENB119(mlc_bmuxsel,  BMUX_WENB[119], DFTRAMBYP, BMUXSEL_WENB[119]);
  primitive = _mux mBMUXSEL_WENB120(mlc_bmuxsel,  BMUX_WENB[120], DFTRAMBYP, BMUXSEL_WENB[120]);
  primitive = _mux mBMUXSEL_WENB121(mlc_bmuxsel,  BMUX_WENB[121], DFTRAMBYP, BMUXSEL_WENB[121]);
  primitive = _mux mBMUXSEL_WENB122(mlc_bmuxsel,  BMUX_WENB[122], DFTRAMBYP, BMUXSEL_WENB[122]);
  primitive = _mux mBMUXSEL_WENB123(mlc_bmuxsel,  BMUX_WENB[123], DFTRAMBYP, BMUXSEL_WENB[123]);
  primitive = _mux mBMUXSEL_WENB124(mlc_bmuxsel,  BMUX_WENB[124], DFTRAMBYP, BMUXSEL_WENB[124]);
  primitive = _mux mBMUXSEL_WENB125(mlc_bmuxsel,  BMUX_WENB[125], DFTRAMBYP, BMUXSEL_WENB[125]);
  primitive = _mux mBMUXSEL_WENB126(mlc_bmuxsel,  BMUX_WENB[126], DFTRAMBYP, BMUXSEL_WENB[126]);
  primitive = _mux mBMUXSEL_WENB127(mlc_bmuxsel,  BMUX_WENB[127], DFTRAMBYP, BMUXSEL_WENB[127]);
  )

  output (WENYB) ( array = 127 : 0;
    primitive = _buf bWENYB0(BMUXSEL_WENB[0], WENYB[0]);
    primitive = _buf bWENYB1(BMUXSEL_WENB[1], WENYB[1]);
    primitive = _buf bWENYB2(BMUXSEL_WENB[2], WENYB[2]);
    primitive = _buf bWENYB3(BMUXSEL_WENB[3], WENYB[3]);
    primitive = _buf bWENYB4(BMUXSEL_WENB[4], WENYB[4]);
    primitive = _buf bWENYB5(BMUXSEL_WENB[5], WENYB[5]);
    primitive = _buf bWENYB6(BMUXSEL_WENB[6], WENYB[6]);
    primitive = _buf bWENYB7(BMUXSEL_WENB[7], WENYB[7]);
    primitive = _buf bWENYB8(BMUXSEL_WENB[8], WENYB[8]);
    primitive = _buf bWENYB9(BMUXSEL_WENB[9], WENYB[9]);
    primitive = _buf bWENYB10(BMUXSEL_WENB[10], WENYB[10]);
    primitive = _buf bWENYB11(BMUXSEL_WENB[11], WENYB[11]);
    primitive = _buf bWENYB12(BMUXSEL_WENB[12], WENYB[12]);
    primitive = _buf bWENYB13(BMUXSEL_WENB[13], WENYB[13]);
    primitive = _buf bWENYB14(BMUXSEL_WENB[14], WENYB[14]);
    primitive = _buf bWENYB15(BMUXSEL_WENB[15], WENYB[15]);
    primitive = _buf bWENYB16(BMUXSEL_WENB[16], WENYB[16]);
    primitive = _buf bWENYB17(BMUXSEL_WENB[17], WENYB[17]);
    primitive = _buf bWENYB18(BMUXSEL_WENB[18], WENYB[18]);
    primitive = _buf bWENYB19(BMUXSEL_WENB[19], WENYB[19]);
    primitive = _buf bWENYB20(BMUXSEL_WENB[20], WENYB[20]);
    primitive = _buf bWENYB21(BMUXSEL_WENB[21], WENYB[21]);
    primitive = _buf bWENYB22(BMUXSEL_WENB[22], WENYB[22]);
    primitive = _buf bWENYB23(BMUXSEL_WENB[23], WENYB[23]);
    primitive = _buf bWENYB24(BMUXSEL_WENB[24], WENYB[24]);
    primitive = _buf bWENYB25(BMUXSEL_WENB[25], WENYB[25]);
    primitive = _buf bWENYB26(BMUXSEL_WENB[26], WENYB[26]);
    primitive = _buf bWENYB27(BMUXSEL_WENB[27], WENYB[27]);
    primitive = _buf bWENYB28(BMUXSEL_WENB[28], WENYB[28]);
    primitive = _buf bWENYB29(BMUXSEL_WENB[29], WENYB[29]);
    primitive = _buf bWENYB30(BMUXSEL_WENB[30], WENYB[30]);
    primitive = _buf bWENYB31(BMUXSEL_WENB[31], WENYB[31]);
    primitive = _buf bWENYB32(BMUXSEL_WENB[32], WENYB[32]);
    primitive = _buf bWENYB33(BMUXSEL_WENB[33], WENYB[33]);
    primitive = _buf bWENYB34(BMUXSEL_WENB[34], WENYB[34]);
    primitive = _buf bWENYB35(BMUXSEL_WENB[35], WENYB[35]);
    primitive = _buf bWENYB36(BMUXSEL_WENB[36], WENYB[36]);
    primitive = _buf bWENYB37(BMUXSEL_WENB[37], WENYB[37]);
    primitive = _buf bWENYB38(BMUXSEL_WENB[38], WENYB[38]);
    primitive = _buf bWENYB39(BMUXSEL_WENB[39], WENYB[39]);
    primitive = _buf bWENYB40(BMUXSEL_WENB[40], WENYB[40]);
    primitive = _buf bWENYB41(BMUXSEL_WENB[41], WENYB[41]);
    primitive = _buf bWENYB42(BMUXSEL_WENB[42], WENYB[42]);
    primitive = _buf bWENYB43(BMUXSEL_WENB[43], WENYB[43]);
    primitive = _buf bWENYB44(BMUXSEL_WENB[44], WENYB[44]);
    primitive = _buf bWENYB45(BMUXSEL_WENB[45], WENYB[45]);
    primitive = _buf bWENYB46(BMUXSEL_WENB[46], WENYB[46]);
    primitive = _buf bWENYB47(BMUXSEL_WENB[47], WENYB[47]);
    primitive = _buf bWENYB48(BMUXSEL_WENB[48], WENYB[48]);
    primitive = _buf bWENYB49(BMUXSEL_WENB[49], WENYB[49]);
    primitive = _buf bWENYB50(BMUXSEL_WENB[50], WENYB[50]);
    primitive = _buf bWENYB51(BMUXSEL_WENB[51], WENYB[51]);
    primitive = _buf bWENYB52(BMUXSEL_WENB[52], WENYB[52]);
    primitive = _buf bWENYB53(BMUXSEL_WENB[53], WENYB[53]);
    primitive = _buf bWENYB54(BMUXSEL_WENB[54], WENYB[54]);
    primitive = _buf bWENYB55(BMUXSEL_WENB[55], WENYB[55]);
    primitive = _buf bWENYB56(BMUXSEL_WENB[56], WENYB[56]);
    primitive = _buf bWENYB57(BMUXSEL_WENB[57], WENYB[57]);
    primitive = _buf bWENYB58(BMUXSEL_WENB[58], WENYB[58]);
    primitive = _buf bWENYB59(BMUXSEL_WENB[59], WENYB[59]);
    primitive = _buf bWENYB60(BMUXSEL_WENB[60], WENYB[60]);
    primitive = _buf bWENYB61(BMUXSEL_WENB[61], WENYB[61]);
    primitive = _buf bWENYB62(BMUXSEL_WENB[62], WENYB[62]);
    primitive = _buf bWENYB63(BMUXSEL_WENB[63], WENYB[63]);
    primitive = _buf bWENYB64(BMUXSEL_WENB[64], WENYB[64]);
    primitive = _buf bWENYB65(BMUXSEL_WENB[65], WENYB[65]);
    primitive = _buf bWENYB66(BMUXSEL_WENB[66], WENYB[66]);
    primitive = _buf bWENYB67(BMUXSEL_WENB[67], WENYB[67]);
    primitive = _buf bWENYB68(BMUXSEL_WENB[68], WENYB[68]);
    primitive = _buf bWENYB69(BMUXSEL_WENB[69], WENYB[69]);
    primitive = _buf bWENYB70(BMUXSEL_WENB[70], WENYB[70]);
    primitive = _buf bWENYB71(BMUXSEL_WENB[71], WENYB[71]);
    primitive = _buf bWENYB72(BMUXSEL_WENB[72], WENYB[72]);
    primitive = _buf bWENYB73(BMUXSEL_WENB[73], WENYB[73]);
    primitive = _buf bWENYB74(BMUXSEL_WENB[74], WENYB[74]);
    primitive = _buf bWENYB75(BMUXSEL_WENB[75], WENYB[75]);
    primitive = _buf bWENYB76(BMUXSEL_WENB[76], WENYB[76]);
    primitive = _buf bWENYB77(BMUXSEL_WENB[77], WENYB[77]);
    primitive = _buf bWENYB78(BMUXSEL_WENB[78], WENYB[78]);
    primitive = _buf bWENYB79(BMUXSEL_WENB[79], WENYB[79]);
    primitive = _buf bWENYB80(BMUXSEL_WENB[80], WENYB[80]);
    primitive = _buf bWENYB81(BMUXSEL_WENB[81], WENYB[81]);
    primitive = _buf bWENYB82(BMUXSEL_WENB[82], WENYB[82]);
    primitive = _buf bWENYB83(BMUXSEL_WENB[83], WENYB[83]);
    primitive = _buf bWENYB84(BMUXSEL_WENB[84], WENYB[84]);
    primitive = _buf bWENYB85(BMUXSEL_WENB[85], WENYB[85]);
    primitive = _buf bWENYB86(BMUXSEL_WENB[86], WENYB[86]);
    primitive = _buf bWENYB87(BMUXSEL_WENB[87], WENYB[87]);
    primitive = _buf bWENYB88(BMUXSEL_WENB[88], WENYB[88]);
    primitive = _buf bWENYB89(BMUXSEL_WENB[89], WENYB[89]);
    primitive = _buf bWENYB90(BMUXSEL_WENB[90], WENYB[90]);
    primitive = _buf bWENYB91(BMUXSEL_WENB[91], WENYB[91]);
    primitive = _buf bWENYB92(BMUXSEL_WENB[92], WENYB[92]);
    primitive = _buf bWENYB93(BMUXSEL_WENB[93], WENYB[93]);
    primitive = _buf bWENYB94(BMUXSEL_WENB[94], WENYB[94]);
    primitive = _buf bWENYB95(BMUXSEL_WENB[95], WENYB[95]);
    primitive = _buf bWENYB96(BMUXSEL_WENB[96], WENYB[96]);
    primitive = _buf bWENYB97(BMUXSEL_WENB[97], WENYB[97]);
    primitive = _buf bWENYB98(BMUXSEL_WENB[98], WENYB[98]);
    primitive = _buf bWENYB99(BMUXSEL_WENB[99], WENYB[99]);
    primitive = _buf bWENYB100(BMUXSEL_WENB[100], WENYB[100]);
    primitive = _buf bWENYB101(BMUXSEL_WENB[101], WENYB[101]);
    primitive = _buf bWENYB102(BMUXSEL_WENB[102], WENYB[102]);
    primitive = _buf bWENYB103(BMUXSEL_WENB[103], WENYB[103]);
    primitive = _buf bWENYB104(BMUXSEL_WENB[104], WENYB[104]);
    primitive = _buf bWENYB105(BMUXSEL_WENB[105], WENYB[105]);
    primitive = _buf bWENYB106(BMUXSEL_WENB[106], WENYB[106]);
    primitive = _buf bWENYB107(BMUXSEL_WENB[107], WENYB[107]);
    primitive = _buf bWENYB108(BMUXSEL_WENB[108], WENYB[108]);
    primitive = _buf bWENYB109(BMUXSEL_WENB[109], WENYB[109]);
    primitive = _buf bWENYB110(BMUXSEL_WENB[110], WENYB[110]);
    primitive = _buf bWENYB111(BMUXSEL_WENB[111], WENYB[111]);
    primitive = _buf bWENYB112(BMUXSEL_WENB[112], WENYB[112]);
    primitive = _buf bWENYB113(BMUXSEL_WENB[113], WENYB[113]);
    primitive = _buf bWENYB114(BMUXSEL_WENB[114], WENYB[114]);
    primitive = _buf bWENYB115(BMUXSEL_WENB[115], WENYB[115]);
    primitive = _buf bWENYB116(BMUXSEL_WENB[116], WENYB[116]);
    primitive = _buf bWENYB117(BMUXSEL_WENB[117], WENYB[117]);
    primitive = _buf bWENYB118(BMUXSEL_WENB[118], WENYB[118]);
    primitive = _buf bWENYB119(BMUXSEL_WENB[119], WENYB[119]);
    primitive = _buf bWENYB120(BMUXSEL_WENB[120], WENYB[120]);
    primitive = _buf bWENYB121(BMUXSEL_WENB[121], WENYB[121]);
    primitive = _buf bWENYB122(BMUXSEL_WENB[122], WENYB[122]);
    primitive = _buf bWENYB123(BMUXSEL_WENB[123], WENYB[123]);
    primitive = _buf bWENYB124(BMUXSEL_WENB[124], WENYB[124]);
    primitive = _buf bWENYB125(BMUXSEL_WENB[125], WENYB[125]);
    primitive = _buf bWENYB126(BMUXSEL_WENB[126], WENYB[126]);
    primitive = _buf bWENYB127(BMUXSEL_WENB[127], WENYB[127]);
 )

  intern (BMUX_CENB) (primitive = _mux mBMUX_CENB(TCENB,  CENB, TENB, BMUX_CENB);)
  intern (BMUXSEL_CENB) (primitive = _mux mBMUXSEL_CENB(mlc_bmuxsel,  BMUX_CENB, DFTRAMBYP, BMUXSEL_CENB);)
  output (CENYB) (primitive = _buf bCENYB(BMUXSEL_CENB, CENYB);)
  intern (BMUX_AB_n) (array = 4 : 1;
    primitive = _inv  iBMUX_AB_n1 ( BMUX_AB[1], BMUX_AB_n[1] );
    primitive = _inv  iBMUX_AB_n2 ( BMUX_AB[2], BMUX_AB_n[2] );
    primitive = _inv  iBMUX_AB_n3 ( BMUX_AB[3], BMUX_AB_n[3] );
    primitive = _inv  iBMUX_AB_n4 ( BMUX_AB[4], BMUX_AB_n[4] );
  )

  intern (B_max) (array = 4 : 0; 
    primitive = _tie1  bB_max0 ( B_max[0] );
    primitive = _tie1  bB_max1 ( B_max[1] );
    primitive = _tie1  bB_max2 ( B_max[2] );
    primitive = _tie1  bB_max3 ( B_max[3] );
    primitive = _tie1  bB_max4 ( B_max[4] );
  )

  intern (B_max_n) (array = 4 : 0; 
  primitive = _inv  bB_max_n0( B_max[0], B_max_n[0] );
  primitive = _inv  bB_max_n1( B_max[1], B_max_n[1] );
  primitive = _inv  bB_max_n2( B_max[2], B_max_n[2] );
  primitive = _inv  bB_max_n3( B_max[3], B_max_n[3] );
  primitive = _inv  bB_max_n4( B_max[4], B_max_n[4] );
  )

  intern (AB_m) (array = 4 : 0; 
    primitive = _and  aAB_m0(BMUX_AB[0], B_max_n[0], AB_m[0] );
    primitive = _and  aAB_m1(BMUX_AB[1], B_max_n[1], AB_m[1] );
    primitive = _and  aAB_m2(BMUX_AB[2], B_max_n[2], AB_m[2] );
    primitive = _and  aAB_m3(BMUX_AB[3], B_max_n[3], AB_m[3] );
    primitive = _and  aAB_m4(BMUX_AB[4], B_max_n[4], AB_m[4] );
  )

  intern (m_AB) (array = 4 : 1; 
    primitive = _and  am_AB1(BMUX_AB_n[1], B_max[1], m_AB[1] );
    primitive = _and  am_AB2(BMUX_AB_n[2], B_max[2], m_AB[2] );
    primitive = _and  am_AB3(BMUX_AB_n[3], B_max[3], m_AB[3] );
    primitive = _and  am_AB4(BMUX_AB_n[4], B_max[4], m_AB[4] );
  )

  intern (EQ_B) (array = 4 : 1; 
    primitive = _nor  nEQ_B1(m_AB[1], AB_m[1], EQ_B[1] );
    primitive = _nor  nEQ_B2(m_AB[2], AB_m[2], EQ_B[2] );
    primitive = _nor  nEQ_B3(m_AB[3], AB_m[3], EQ_B[3] );
    primitive = _nor  nEQ_B4(m_AB[4], AB_m[4], EQ_B[4] );
  )

  intern (XoutBi) (array = 3 : 0;
  primitive = _and  aXoutBi0(AB_m[0], EQ_B[4], EQ_B[3], EQ_B[2], EQ_B[1], XoutBi[0]);
  primitive = _and  aXoutBi1(AB_m[1], EQ_B[4], EQ_B[3], EQ_B[2], XoutBi[1]);
  primitive = _and  aXoutBi2(AB_m[2], EQ_B[4], EQ_B[3], XoutBi[2]);
  primitive = _and  aXoutBi3(AB_m[3], EQ_B[4], XoutBi[3]);
  )
  intern (XoutBifTemp) (primitive = _or oXoutBifTemp (AB_m[4], XoutBi[0], XoutBi[1], XoutBi[2], XoutBi[3], XoutBifTemp);)
  intern (XoutBif) (primitive = _and oXoutBif (XoutBifTemp, NOT_CENB, XoutBif);)

  intern (nscanshiftB) ( 
  primitive = _nor nnscanshiftB (DFTRAMBYP, SEB, nscanshiftB);)
  intern (XoutaddrB) ( 
  primitive = _and aXoutaddrB (nscanshiftB, XoutBif, XoutaddrB);)
  intern (XoutBiff) ( 
  primitive = _or oXoutBiff (XoutaddrB, XoutB, XoutBiff);)

  intern (SPLIT_WENB) (array = 127 : 0;
  primitive = _buf bSPLIT_WENB0(BMUX_WENB[0], SPLIT_WENB[0]);
  primitive = _buf bSPLIT_WENB1(BMUX_WENB[1], SPLIT_WENB[1]);
  primitive = _buf bSPLIT_WENB2(BMUX_WENB[2], SPLIT_WENB[2]);
  primitive = _buf bSPLIT_WENB3(BMUX_WENB[3], SPLIT_WENB[3]);
  primitive = _buf bSPLIT_WENB4(BMUX_WENB[4], SPLIT_WENB[4]);
  primitive = _buf bSPLIT_WENB5(BMUX_WENB[5], SPLIT_WENB[5]);
  primitive = _buf bSPLIT_WENB6(BMUX_WENB[6], SPLIT_WENB[6]);
  primitive = _buf bSPLIT_WENB7(BMUX_WENB[7], SPLIT_WENB[7]);
  primitive = _buf bSPLIT_WENB8(BMUX_WENB[8], SPLIT_WENB[8]);
  primitive = _buf bSPLIT_WENB9(BMUX_WENB[9], SPLIT_WENB[9]);
  primitive = _buf bSPLIT_WENB10(BMUX_WENB[10], SPLIT_WENB[10]);
  primitive = _buf bSPLIT_WENB11(BMUX_WENB[11], SPLIT_WENB[11]);
  primitive = _buf bSPLIT_WENB12(BMUX_WENB[12], SPLIT_WENB[12]);
  primitive = _buf bSPLIT_WENB13(BMUX_WENB[13], SPLIT_WENB[13]);
  primitive = _buf bSPLIT_WENB14(BMUX_WENB[14], SPLIT_WENB[14]);
  primitive = _buf bSPLIT_WENB15(BMUX_WENB[15], SPLIT_WENB[15]);
  primitive = _buf bSPLIT_WENB16(BMUX_WENB[16], SPLIT_WENB[16]);
  primitive = _buf bSPLIT_WENB17(BMUX_WENB[17], SPLIT_WENB[17]);
  primitive = _buf bSPLIT_WENB18(BMUX_WENB[18], SPLIT_WENB[18]);
  primitive = _buf bSPLIT_WENB19(BMUX_WENB[19], SPLIT_WENB[19]);
  primitive = _buf bSPLIT_WENB20(BMUX_WENB[20], SPLIT_WENB[20]);
  primitive = _buf bSPLIT_WENB21(BMUX_WENB[21], SPLIT_WENB[21]);
  primitive = _buf bSPLIT_WENB22(BMUX_WENB[22], SPLIT_WENB[22]);
  primitive = _buf bSPLIT_WENB23(BMUX_WENB[23], SPLIT_WENB[23]);
  primitive = _buf bSPLIT_WENB24(BMUX_WENB[24], SPLIT_WENB[24]);
  primitive = _buf bSPLIT_WENB25(BMUX_WENB[25], SPLIT_WENB[25]);
  primitive = _buf bSPLIT_WENB26(BMUX_WENB[26], SPLIT_WENB[26]);
  primitive = _buf bSPLIT_WENB27(BMUX_WENB[27], SPLIT_WENB[27]);
  primitive = _buf bSPLIT_WENB28(BMUX_WENB[28], SPLIT_WENB[28]);
  primitive = _buf bSPLIT_WENB29(BMUX_WENB[29], SPLIT_WENB[29]);
  primitive = _buf bSPLIT_WENB30(BMUX_WENB[30], SPLIT_WENB[30]);
  primitive = _buf bSPLIT_WENB31(BMUX_WENB[31], SPLIT_WENB[31]);
  primitive = _buf bSPLIT_WENB32(BMUX_WENB[32], SPLIT_WENB[32]);
  primitive = _buf bSPLIT_WENB33(BMUX_WENB[33], SPLIT_WENB[33]);
  primitive = _buf bSPLIT_WENB34(BMUX_WENB[34], SPLIT_WENB[34]);
  primitive = _buf bSPLIT_WENB35(BMUX_WENB[35], SPLIT_WENB[35]);
  primitive = _buf bSPLIT_WENB36(BMUX_WENB[36], SPLIT_WENB[36]);
  primitive = _buf bSPLIT_WENB37(BMUX_WENB[37], SPLIT_WENB[37]);
  primitive = _buf bSPLIT_WENB38(BMUX_WENB[38], SPLIT_WENB[38]);
  primitive = _buf bSPLIT_WENB39(BMUX_WENB[39], SPLIT_WENB[39]);
  primitive = _buf bSPLIT_WENB40(BMUX_WENB[40], SPLIT_WENB[40]);
  primitive = _buf bSPLIT_WENB41(BMUX_WENB[41], SPLIT_WENB[41]);
  primitive = _buf bSPLIT_WENB42(BMUX_WENB[42], SPLIT_WENB[42]);
  primitive = _buf bSPLIT_WENB43(BMUX_WENB[43], SPLIT_WENB[43]);
  primitive = _buf bSPLIT_WENB44(BMUX_WENB[44], SPLIT_WENB[44]);
  primitive = _buf bSPLIT_WENB45(BMUX_WENB[45], SPLIT_WENB[45]);
  primitive = _buf bSPLIT_WENB46(BMUX_WENB[46], SPLIT_WENB[46]);
  primitive = _buf bSPLIT_WENB47(BMUX_WENB[47], SPLIT_WENB[47]);
  primitive = _buf bSPLIT_WENB48(BMUX_WENB[48], SPLIT_WENB[48]);
  primitive = _buf bSPLIT_WENB49(BMUX_WENB[49], SPLIT_WENB[49]);
  primitive = _buf bSPLIT_WENB50(BMUX_WENB[50], SPLIT_WENB[50]);
  primitive = _buf bSPLIT_WENB51(BMUX_WENB[51], SPLIT_WENB[51]);
  primitive = _buf bSPLIT_WENB52(BMUX_WENB[52], SPLIT_WENB[52]);
  primitive = _buf bSPLIT_WENB53(BMUX_WENB[53], SPLIT_WENB[53]);
  primitive = _buf bSPLIT_WENB54(BMUX_WENB[54], SPLIT_WENB[54]);
  primitive = _buf bSPLIT_WENB55(BMUX_WENB[55], SPLIT_WENB[55]);
  primitive = _buf bSPLIT_WENB56(BMUX_WENB[56], SPLIT_WENB[56]);
  primitive = _buf bSPLIT_WENB57(BMUX_WENB[57], SPLIT_WENB[57]);
  primitive = _buf bSPLIT_WENB58(BMUX_WENB[58], SPLIT_WENB[58]);
  primitive = _buf bSPLIT_WENB59(BMUX_WENB[59], SPLIT_WENB[59]);
  primitive = _buf bSPLIT_WENB60(BMUX_WENB[60], SPLIT_WENB[60]);
  primitive = _buf bSPLIT_WENB61(BMUX_WENB[61], SPLIT_WENB[61]);
  primitive = _buf bSPLIT_WENB62(BMUX_WENB[62], SPLIT_WENB[62]);
  primitive = _buf bSPLIT_WENB63(BMUX_WENB[63], SPLIT_WENB[63]);
  primitive = _buf bSPLIT_WENB64(BMUX_WENB[64], SPLIT_WENB[64]);
  primitive = _buf bSPLIT_WENB65(BMUX_WENB[65], SPLIT_WENB[65]);
  primitive = _buf bSPLIT_WENB66(BMUX_WENB[66], SPLIT_WENB[66]);
  primitive = _buf bSPLIT_WENB67(BMUX_WENB[67], SPLIT_WENB[67]);
  primitive = _buf bSPLIT_WENB68(BMUX_WENB[68], SPLIT_WENB[68]);
  primitive = _buf bSPLIT_WENB69(BMUX_WENB[69], SPLIT_WENB[69]);
  primitive = _buf bSPLIT_WENB70(BMUX_WENB[70], SPLIT_WENB[70]);
  primitive = _buf bSPLIT_WENB71(BMUX_WENB[71], SPLIT_WENB[71]);
  primitive = _buf bSPLIT_WENB72(BMUX_WENB[72], SPLIT_WENB[72]);
  primitive = _buf bSPLIT_WENB73(BMUX_WENB[73], SPLIT_WENB[73]);
  primitive = _buf bSPLIT_WENB74(BMUX_WENB[74], SPLIT_WENB[74]);
  primitive = _buf bSPLIT_WENB75(BMUX_WENB[75], SPLIT_WENB[75]);
  primitive = _buf bSPLIT_WENB76(BMUX_WENB[76], SPLIT_WENB[76]);
  primitive = _buf bSPLIT_WENB77(BMUX_WENB[77], SPLIT_WENB[77]);
  primitive = _buf bSPLIT_WENB78(BMUX_WENB[78], SPLIT_WENB[78]);
  primitive = _buf bSPLIT_WENB79(BMUX_WENB[79], SPLIT_WENB[79]);
  primitive = _buf bSPLIT_WENB80(BMUX_WENB[80], SPLIT_WENB[80]);
  primitive = _buf bSPLIT_WENB81(BMUX_WENB[81], SPLIT_WENB[81]);
  primitive = _buf bSPLIT_WENB82(BMUX_WENB[82], SPLIT_WENB[82]);
  primitive = _buf bSPLIT_WENB83(BMUX_WENB[83], SPLIT_WENB[83]);
  primitive = _buf bSPLIT_WENB84(BMUX_WENB[84], SPLIT_WENB[84]);
  primitive = _buf bSPLIT_WENB85(BMUX_WENB[85], SPLIT_WENB[85]);
  primitive = _buf bSPLIT_WENB86(BMUX_WENB[86], SPLIT_WENB[86]);
  primitive = _buf bSPLIT_WENB87(BMUX_WENB[87], SPLIT_WENB[87]);
  primitive = _buf bSPLIT_WENB88(BMUX_WENB[88], SPLIT_WENB[88]);
  primitive = _buf bSPLIT_WENB89(BMUX_WENB[89], SPLIT_WENB[89]);
  primitive = _buf bSPLIT_WENB90(BMUX_WENB[90], SPLIT_WENB[90]);
  primitive = _buf bSPLIT_WENB91(BMUX_WENB[91], SPLIT_WENB[91]);
  primitive = _buf bSPLIT_WENB92(BMUX_WENB[92], SPLIT_WENB[92]);
  primitive = _buf bSPLIT_WENB93(BMUX_WENB[93], SPLIT_WENB[93]);
  primitive = _buf bSPLIT_WENB94(BMUX_WENB[94], SPLIT_WENB[94]);
  primitive = _buf bSPLIT_WENB95(BMUX_WENB[95], SPLIT_WENB[95]);
  primitive = _buf bSPLIT_WENB96(BMUX_WENB[96], SPLIT_WENB[96]);
  primitive = _buf bSPLIT_WENB97(BMUX_WENB[97], SPLIT_WENB[97]);
  primitive = _buf bSPLIT_WENB98(BMUX_WENB[98], SPLIT_WENB[98]);
  primitive = _buf bSPLIT_WENB99(BMUX_WENB[99], SPLIT_WENB[99]);
  primitive = _buf bSPLIT_WENB100(BMUX_WENB[100], SPLIT_WENB[100]);
  primitive = _buf bSPLIT_WENB101(BMUX_WENB[101], SPLIT_WENB[101]);
  primitive = _buf bSPLIT_WENB102(BMUX_WENB[102], SPLIT_WENB[102]);
  primitive = _buf bSPLIT_WENB103(BMUX_WENB[103], SPLIT_WENB[103]);
  primitive = _buf bSPLIT_WENB104(BMUX_WENB[104], SPLIT_WENB[104]);
  primitive = _buf bSPLIT_WENB105(BMUX_WENB[105], SPLIT_WENB[105]);
  primitive = _buf bSPLIT_WENB106(BMUX_WENB[106], SPLIT_WENB[106]);
  primitive = _buf bSPLIT_WENB107(BMUX_WENB[107], SPLIT_WENB[107]);
  primitive = _buf bSPLIT_WENB108(BMUX_WENB[108], SPLIT_WENB[108]);
  primitive = _buf bSPLIT_WENB109(BMUX_WENB[109], SPLIT_WENB[109]);
  primitive = _buf bSPLIT_WENB110(BMUX_WENB[110], SPLIT_WENB[110]);
  primitive = _buf bSPLIT_WENB111(BMUX_WENB[111], SPLIT_WENB[111]);
  primitive = _buf bSPLIT_WENB112(BMUX_WENB[112], SPLIT_WENB[112]);
  primitive = _buf bSPLIT_WENB113(BMUX_WENB[113], SPLIT_WENB[113]);
  primitive = _buf bSPLIT_WENB114(BMUX_WENB[114], SPLIT_WENB[114]);
  primitive = _buf bSPLIT_WENB115(BMUX_WENB[115], SPLIT_WENB[115]);
  primitive = _buf bSPLIT_WENB116(BMUX_WENB[116], SPLIT_WENB[116]);
  primitive = _buf bSPLIT_WENB117(BMUX_WENB[117], SPLIT_WENB[117]);
  primitive = _buf bSPLIT_WENB118(BMUX_WENB[118], SPLIT_WENB[118]);
  primitive = _buf bSPLIT_WENB119(BMUX_WENB[119], SPLIT_WENB[119]);
  primitive = _buf bSPLIT_WENB120(BMUX_WENB[120], SPLIT_WENB[120]);
  primitive = _buf bSPLIT_WENB121(BMUX_WENB[121], SPLIT_WENB[121]);
  primitive = _buf bSPLIT_WENB122(BMUX_WENB[122], SPLIT_WENB[122]);
  primitive = _buf bSPLIT_WENB123(BMUX_WENB[123], SPLIT_WENB[123]);
  primitive = _buf bSPLIT_WENB124(BMUX_WENB[124], SPLIT_WENB[124]);
  primitive = _buf bSPLIT_WENB125(BMUX_WENB[125], SPLIT_WENB[125]);
  primitive = _buf bSPLIT_WENB126(BMUX_WENB[126], SPLIT_WENB[126]);
  primitive = _buf bSPLIT_WENB127(BMUX_WENB[127], SPLIT_WENB[127]);
  )
  intern (NOT_CENB) (primitive = _inv iNOT_CENB(BMUX_CENB, NOT_CENB);)
  intern (NOT_SPLIT_WENB) (array = 127 : 0;
  primitive = _inv iNOT_SPLIT_WENB0(SPLIT_WENB[0], NOT_SPLIT_WENB[0]);
  primitive = _inv iNOT_SPLIT_WENB1(SPLIT_WENB[1], NOT_SPLIT_WENB[1]);
  primitive = _inv iNOT_SPLIT_WENB2(SPLIT_WENB[2], NOT_SPLIT_WENB[2]);
  primitive = _inv iNOT_SPLIT_WENB3(SPLIT_WENB[3], NOT_SPLIT_WENB[3]);
  primitive = _inv iNOT_SPLIT_WENB4(SPLIT_WENB[4], NOT_SPLIT_WENB[4]);
  primitive = _inv iNOT_SPLIT_WENB5(SPLIT_WENB[5], NOT_SPLIT_WENB[5]);
  primitive = _inv iNOT_SPLIT_WENB6(SPLIT_WENB[6], NOT_SPLIT_WENB[6]);
  primitive = _inv iNOT_SPLIT_WENB7(SPLIT_WENB[7], NOT_SPLIT_WENB[7]);
  primitive = _inv iNOT_SPLIT_WENB8(SPLIT_WENB[8], NOT_SPLIT_WENB[8]);
  primitive = _inv iNOT_SPLIT_WENB9(SPLIT_WENB[9], NOT_SPLIT_WENB[9]);
  primitive = _inv iNOT_SPLIT_WENB10(SPLIT_WENB[10], NOT_SPLIT_WENB[10]);
  primitive = _inv iNOT_SPLIT_WENB11(SPLIT_WENB[11], NOT_SPLIT_WENB[11]);
  primitive = _inv iNOT_SPLIT_WENB12(SPLIT_WENB[12], NOT_SPLIT_WENB[12]);
  primitive = _inv iNOT_SPLIT_WENB13(SPLIT_WENB[13], NOT_SPLIT_WENB[13]);
  primitive = _inv iNOT_SPLIT_WENB14(SPLIT_WENB[14], NOT_SPLIT_WENB[14]);
  primitive = _inv iNOT_SPLIT_WENB15(SPLIT_WENB[15], NOT_SPLIT_WENB[15]);
  primitive = _inv iNOT_SPLIT_WENB16(SPLIT_WENB[16], NOT_SPLIT_WENB[16]);
  primitive = _inv iNOT_SPLIT_WENB17(SPLIT_WENB[17], NOT_SPLIT_WENB[17]);
  primitive = _inv iNOT_SPLIT_WENB18(SPLIT_WENB[18], NOT_SPLIT_WENB[18]);
  primitive = _inv iNOT_SPLIT_WENB19(SPLIT_WENB[19], NOT_SPLIT_WENB[19]);
  primitive = _inv iNOT_SPLIT_WENB20(SPLIT_WENB[20], NOT_SPLIT_WENB[20]);
  primitive = _inv iNOT_SPLIT_WENB21(SPLIT_WENB[21], NOT_SPLIT_WENB[21]);
  primitive = _inv iNOT_SPLIT_WENB22(SPLIT_WENB[22], NOT_SPLIT_WENB[22]);
  primitive = _inv iNOT_SPLIT_WENB23(SPLIT_WENB[23], NOT_SPLIT_WENB[23]);
  primitive = _inv iNOT_SPLIT_WENB24(SPLIT_WENB[24], NOT_SPLIT_WENB[24]);
  primitive = _inv iNOT_SPLIT_WENB25(SPLIT_WENB[25], NOT_SPLIT_WENB[25]);
  primitive = _inv iNOT_SPLIT_WENB26(SPLIT_WENB[26], NOT_SPLIT_WENB[26]);
  primitive = _inv iNOT_SPLIT_WENB27(SPLIT_WENB[27], NOT_SPLIT_WENB[27]);
  primitive = _inv iNOT_SPLIT_WENB28(SPLIT_WENB[28], NOT_SPLIT_WENB[28]);
  primitive = _inv iNOT_SPLIT_WENB29(SPLIT_WENB[29], NOT_SPLIT_WENB[29]);
  primitive = _inv iNOT_SPLIT_WENB30(SPLIT_WENB[30], NOT_SPLIT_WENB[30]);
  primitive = _inv iNOT_SPLIT_WENB31(SPLIT_WENB[31], NOT_SPLIT_WENB[31]);
  primitive = _inv iNOT_SPLIT_WENB32(SPLIT_WENB[32], NOT_SPLIT_WENB[32]);
  primitive = _inv iNOT_SPLIT_WENB33(SPLIT_WENB[33], NOT_SPLIT_WENB[33]);
  primitive = _inv iNOT_SPLIT_WENB34(SPLIT_WENB[34], NOT_SPLIT_WENB[34]);
  primitive = _inv iNOT_SPLIT_WENB35(SPLIT_WENB[35], NOT_SPLIT_WENB[35]);
  primitive = _inv iNOT_SPLIT_WENB36(SPLIT_WENB[36], NOT_SPLIT_WENB[36]);
  primitive = _inv iNOT_SPLIT_WENB37(SPLIT_WENB[37], NOT_SPLIT_WENB[37]);
  primitive = _inv iNOT_SPLIT_WENB38(SPLIT_WENB[38], NOT_SPLIT_WENB[38]);
  primitive = _inv iNOT_SPLIT_WENB39(SPLIT_WENB[39], NOT_SPLIT_WENB[39]);
  primitive = _inv iNOT_SPLIT_WENB40(SPLIT_WENB[40], NOT_SPLIT_WENB[40]);
  primitive = _inv iNOT_SPLIT_WENB41(SPLIT_WENB[41], NOT_SPLIT_WENB[41]);
  primitive = _inv iNOT_SPLIT_WENB42(SPLIT_WENB[42], NOT_SPLIT_WENB[42]);
  primitive = _inv iNOT_SPLIT_WENB43(SPLIT_WENB[43], NOT_SPLIT_WENB[43]);
  primitive = _inv iNOT_SPLIT_WENB44(SPLIT_WENB[44], NOT_SPLIT_WENB[44]);
  primitive = _inv iNOT_SPLIT_WENB45(SPLIT_WENB[45], NOT_SPLIT_WENB[45]);
  primitive = _inv iNOT_SPLIT_WENB46(SPLIT_WENB[46], NOT_SPLIT_WENB[46]);
  primitive = _inv iNOT_SPLIT_WENB47(SPLIT_WENB[47], NOT_SPLIT_WENB[47]);
  primitive = _inv iNOT_SPLIT_WENB48(SPLIT_WENB[48], NOT_SPLIT_WENB[48]);
  primitive = _inv iNOT_SPLIT_WENB49(SPLIT_WENB[49], NOT_SPLIT_WENB[49]);
  primitive = _inv iNOT_SPLIT_WENB50(SPLIT_WENB[50], NOT_SPLIT_WENB[50]);
  primitive = _inv iNOT_SPLIT_WENB51(SPLIT_WENB[51], NOT_SPLIT_WENB[51]);
  primitive = _inv iNOT_SPLIT_WENB52(SPLIT_WENB[52], NOT_SPLIT_WENB[52]);
  primitive = _inv iNOT_SPLIT_WENB53(SPLIT_WENB[53], NOT_SPLIT_WENB[53]);
  primitive = _inv iNOT_SPLIT_WENB54(SPLIT_WENB[54], NOT_SPLIT_WENB[54]);
  primitive = _inv iNOT_SPLIT_WENB55(SPLIT_WENB[55], NOT_SPLIT_WENB[55]);
  primitive = _inv iNOT_SPLIT_WENB56(SPLIT_WENB[56], NOT_SPLIT_WENB[56]);
  primitive = _inv iNOT_SPLIT_WENB57(SPLIT_WENB[57], NOT_SPLIT_WENB[57]);
  primitive = _inv iNOT_SPLIT_WENB58(SPLIT_WENB[58], NOT_SPLIT_WENB[58]);
  primitive = _inv iNOT_SPLIT_WENB59(SPLIT_WENB[59], NOT_SPLIT_WENB[59]);
  primitive = _inv iNOT_SPLIT_WENB60(SPLIT_WENB[60], NOT_SPLIT_WENB[60]);
  primitive = _inv iNOT_SPLIT_WENB61(SPLIT_WENB[61], NOT_SPLIT_WENB[61]);
  primitive = _inv iNOT_SPLIT_WENB62(SPLIT_WENB[62], NOT_SPLIT_WENB[62]);
  primitive = _inv iNOT_SPLIT_WENB63(SPLIT_WENB[63], NOT_SPLIT_WENB[63]);
  primitive = _inv iNOT_SPLIT_WENB64(SPLIT_WENB[64], NOT_SPLIT_WENB[64]);
  primitive = _inv iNOT_SPLIT_WENB65(SPLIT_WENB[65], NOT_SPLIT_WENB[65]);
  primitive = _inv iNOT_SPLIT_WENB66(SPLIT_WENB[66], NOT_SPLIT_WENB[66]);
  primitive = _inv iNOT_SPLIT_WENB67(SPLIT_WENB[67], NOT_SPLIT_WENB[67]);
  primitive = _inv iNOT_SPLIT_WENB68(SPLIT_WENB[68], NOT_SPLIT_WENB[68]);
  primitive = _inv iNOT_SPLIT_WENB69(SPLIT_WENB[69], NOT_SPLIT_WENB[69]);
  primitive = _inv iNOT_SPLIT_WENB70(SPLIT_WENB[70], NOT_SPLIT_WENB[70]);
  primitive = _inv iNOT_SPLIT_WENB71(SPLIT_WENB[71], NOT_SPLIT_WENB[71]);
  primitive = _inv iNOT_SPLIT_WENB72(SPLIT_WENB[72], NOT_SPLIT_WENB[72]);
  primitive = _inv iNOT_SPLIT_WENB73(SPLIT_WENB[73], NOT_SPLIT_WENB[73]);
  primitive = _inv iNOT_SPLIT_WENB74(SPLIT_WENB[74], NOT_SPLIT_WENB[74]);
  primitive = _inv iNOT_SPLIT_WENB75(SPLIT_WENB[75], NOT_SPLIT_WENB[75]);
  primitive = _inv iNOT_SPLIT_WENB76(SPLIT_WENB[76], NOT_SPLIT_WENB[76]);
  primitive = _inv iNOT_SPLIT_WENB77(SPLIT_WENB[77], NOT_SPLIT_WENB[77]);
  primitive = _inv iNOT_SPLIT_WENB78(SPLIT_WENB[78], NOT_SPLIT_WENB[78]);
  primitive = _inv iNOT_SPLIT_WENB79(SPLIT_WENB[79], NOT_SPLIT_WENB[79]);
  primitive = _inv iNOT_SPLIT_WENB80(SPLIT_WENB[80], NOT_SPLIT_WENB[80]);
  primitive = _inv iNOT_SPLIT_WENB81(SPLIT_WENB[81], NOT_SPLIT_WENB[81]);
  primitive = _inv iNOT_SPLIT_WENB82(SPLIT_WENB[82], NOT_SPLIT_WENB[82]);
  primitive = _inv iNOT_SPLIT_WENB83(SPLIT_WENB[83], NOT_SPLIT_WENB[83]);
  primitive = _inv iNOT_SPLIT_WENB84(SPLIT_WENB[84], NOT_SPLIT_WENB[84]);
  primitive = _inv iNOT_SPLIT_WENB85(SPLIT_WENB[85], NOT_SPLIT_WENB[85]);
  primitive = _inv iNOT_SPLIT_WENB86(SPLIT_WENB[86], NOT_SPLIT_WENB[86]);
  primitive = _inv iNOT_SPLIT_WENB87(SPLIT_WENB[87], NOT_SPLIT_WENB[87]);
  primitive = _inv iNOT_SPLIT_WENB88(SPLIT_WENB[88], NOT_SPLIT_WENB[88]);
  primitive = _inv iNOT_SPLIT_WENB89(SPLIT_WENB[89], NOT_SPLIT_WENB[89]);
  primitive = _inv iNOT_SPLIT_WENB90(SPLIT_WENB[90], NOT_SPLIT_WENB[90]);
  primitive = _inv iNOT_SPLIT_WENB91(SPLIT_WENB[91], NOT_SPLIT_WENB[91]);
  primitive = _inv iNOT_SPLIT_WENB92(SPLIT_WENB[92], NOT_SPLIT_WENB[92]);
  primitive = _inv iNOT_SPLIT_WENB93(SPLIT_WENB[93], NOT_SPLIT_WENB[93]);
  primitive = _inv iNOT_SPLIT_WENB94(SPLIT_WENB[94], NOT_SPLIT_WENB[94]);
  primitive = _inv iNOT_SPLIT_WENB95(SPLIT_WENB[95], NOT_SPLIT_WENB[95]);
  primitive = _inv iNOT_SPLIT_WENB96(SPLIT_WENB[96], NOT_SPLIT_WENB[96]);
  primitive = _inv iNOT_SPLIT_WENB97(SPLIT_WENB[97], NOT_SPLIT_WENB[97]);
  primitive = _inv iNOT_SPLIT_WENB98(SPLIT_WENB[98], NOT_SPLIT_WENB[98]);
  primitive = _inv iNOT_SPLIT_WENB99(SPLIT_WENB[99], NOT_SPLIT_WENB[99]);
  primitive = _inv iNOT_SPLIT_WENB100(SPLIT_WENB[100], NOT_SPLIT_WENB[100]);
  primitive = _inv iNOT_SPLIT_WENB101(SPLIT_WENB[101], NOT_SPLIT_WENB[101]);
  primitive = _inv iNOT_SPLIT_WENB102(SPLIT_WENB[102], NOT_SPLIT_WENB[102]);
  primitive = _inv iNOT_SPLIT_WENB103(SPLIT_WENB[103], NOT_SPLIT_WENB[103]);
  primitive = _inv iNOT_SPLIT_WENB104(SPLIT_WENB[104], NOT_SPLIT_WENB[104]);
  primitive = _inv iNOT_SPLIT_WENB105(SPLIT_WENB[105], NOT_SPLIT_WENB[105]);
  primitive = _inv iNOT_SPLIT_WENB106(SPLIT_WENB[106], NOT_SPLIT_WENB[106]);
  primitive = _inv iNOT_SPLIT_WENB107(SPLIT_WENB[107], NOT_SPLIT_WENB[107]);
  primitive = _inv iNOT_SPLIT_WENB108(SPLIT_WENB[108], NOT_SPLIT_WENB[108]);
  primitive = _inv iNOT_SPLIT_WENB109(SPLIT_WENB[109], NOT_SPLIT_WENB[109]);
  primitive = _inv iNOT_SPLIT_WENB110(SPLIT_WENB[110], NOT_SPLIT_WENB[110]);
  primitive = _inv iNOT_SPLIT_WENB111(SPLIT_WENB[111], NOT_SPLIT_WENB[111]);
  primitive = _inv iNOT_SPLIT_WENB112(SPLIT_WENB[112], NOT_SPLIT_WENB[112]);
  primitive = _inv iNOT_SPLIT_WENB113(SPLIT_WENB[113], NOT_SPLIT_WENB[113]);
  primitive = _inv iNOT_SPLIT_WENB114(SPLIT_WENB[114], NOT_SPLIT_WENB[114]);
  primitive = _inv iNOT_SPLIT_WENB115(SPLIT_WENB[115], NOT_SPLIT_WENB[115]);
  primitive = _inv iNOT_SPLIT_WENB116(SPLIT_WENB[116], NOT_SPLIT_WENB[116]);
  primitive = _inv iNOT_SPLIT_WENB117(SPLIT_WENB[117], NOT_SPLIT_WENB[117]);
  primitive = _inv iNOT_SPLIT_WENB118(SPLIT_WENB[118], NOT_SPLIT_WENB[118]);
  primitive = _inv iNOT_SPLIT_WENB119(SPLIT_WENB[119], NOT_SPLIT_WENB[119]);
  primitive = _inv iNOT_SPLIT_WENB120(SPLIT_WENB[120], NOT_SPLIT_WENB[120]);
  primitive = _inv iNOT_SPLIT_WENB121(SPLIT_WENB[121], NOT_SPLIT_WENB[121]);
  primitive = _inv iNOT_SPLIT_WENB122(SPLIT_WENB[122], NOT_SPLIT_WENB[122]);
  primitive = _inv iNOT_SPLIT_WENB123(SPLIT_WENB[123], NOT_SPLIT_WENB[123]);
  primitive = _inv iNOT_SPLIT_WENB124(SPLIT_WENB[124], NOT_SPLIT_WENB[124]);
  primitive = _inv iNOT_SPLIT_WENB125(SPLIT_WENB[125], NOT_SPLIT_WENB[125]);
  primitive = _inv iNOT_SPLIT_WENB126(SPLIT_WENB[126], NOT_SPLIT_WENB[126]);
  primitive = _inv iNOT_SPLIT_WENB127(SPLIT_WENB[127], NOT_SPLIT_WENB[127]);
  )
  intern (WRITEB) (array = 127 : 0;
  primitive = _and aWRITEB0(NOT_DFTRAMBYP, NOT_SPLIT_WENB[0], NOT_CENB, WRITEB[0]);
  primitive = _and aWRITEB1(NOT_DFTRAMBYP, NOT_SPLIT_WENB[1], NOT_CENB, WRITEB[1]);
  primitive = _and aWRITEB2(NOT_DFTRAMBYP, NOT_SPLIT_WENB[2], NOT_CENB, WRITEB[2]);
  primitive = _and aWRITEB3(NOT_DFTRAMBYP, NOT_SPLIT_WENB[3], NOT_CENB, WRITEB[3]);
  primitive = _and aWRITEB4(NOT_DFTRAMBYP, NOT_SPLIT_WENB[4], NOT_CENB, WRITEB[4]);
  primitive = _and aWRITEB5(NOT_DFTRAMBYP, NOT_SPLIT_WENB[5], NOT_CENB, WRITEB[5]);
  primitive = _and aWRITEB6(NOT_DFTRAMBYP, NOT_SPLIT_WENB[6], NOT_CENB, WRITEB[6]);
  primitive = _and aWRITEB7(NOT_DFTRAMBYP, NOT_SPLIT_WENB[7], NOT_CENB, WRITEB[7]);
  primitive = _and aWRITEB8(NOT_DFTRAMBYP, NOT_SPLIT_WENB[8], NOT_CENB, WRITEB[8]);
  primitive = _and aWRITEB9(NOT_DFTRAMBYP, NOT_SPLIT_WENB[9], NOT_CENB, WRITEB[9]);
  primitive = _and aWRITEB10(NOT_DFTRAMBYP, NOT_SPLIT_WENB[10], NOT_CENB, WRITEB[10]);
  primitive = _and aWRITEB11(NOT_DFTRAMBYP, NOT_SPLIT_WENB[11], NOT_CENB, WRITEB[11]);
  primitive = _and aWRITEB12(NOT_DFTRAMBYP, NOT_SPLIT_WENB[12], NOT_CENB, WRITEB[12]);
  primitive = _and aWRITEB13(NOT_DFTRAMBYP, NOT_SPLIT_WENB[13], NOT_CENB, WRITEB[13]);
  primitive = _and aWRITEB14(NOT_DFTRAMBYP, NOT_SPLIT_WENB[14], NOT_CENB, WRITEB[14]);
  primitive = _and aWRITEB15(NOT_DFTRAMBYP, NOT_SPLIT_WENB[15], NOT_CENB, WRITEB[15]);
  primitive = _and aWRITEB16(NOT_DFTRAMBYP, NOT_SPLIT_WENB[16], NOT_CENB, WRITEB[16]);
  primitive = _and aWRITEB17(NOT_DFTRAMBYP, NOT_SPLIT_WENB[17], NOT_CENB, WRITEB[17]);
  primitive = _and aWRITEB18(NOT_DFTRAMBYP, NOT_SPLIT_WENB[18], NOT_CENB, WRITEB[18]);
  primitive = _and aWRITEB19(NOT_DFTRAMBYP, NOT_SPLIT_WENB[19], NOT_CENB, WRITEB[19]);
  primitive = _and aWRITEB20(NOT_DFTRAMBYP, NOT_SPLIT_WENB[20], NOT_CENB, WRITEB[20]);
  primitive = _and aWRITEB21(NOT_DFTRAMBYP, NOT_SPLIT_WENB[21], NOT_CENB, WRITEB[21]);
  primitive = _and aWRITEB22(NOT_DFTRAMBYP, NOT_SPLIT_WENB[22], NOT_CENB, WRITEB[22]);
  primitive = _and aWRITEB23(NOT_DFTRAMBYP, NOT_SPLIT_WENB[23], NOT_CENB, WRITEB[23]);
  primitive = _and aWRITEB24(NOT_DFTRAMBYP, NOT_SPLIT_WENB[24], NOT_CENB, WRITEB[24]);
  primitive = _and aWRITEB25(NOT_DFTRAMBYP, NOT_SPLIT_WENB[25], NOT_CENB, WRITEB[25]);
  primitive = _and aWRITEB26(NOT_DFTRAMBYP, NOT_SPLIT_WENB[26], NOT_CENB, WRITEB[26]);
  primitive = _and aWRITEB27(NOT_DFTRAMBYP, NOT_SPLIT_WENB[27], NOT_CENB, WRITEB[27]);
  primitive = _and aWRITEB28(NOT_DFTRAMBYP, NOT_SPLIT_WENB[28], NOT_CENB, WRITEB[28]);
  primitive = _and aWRITEB29(NOT_DFTRAMBYP, NOT_SPLIT_WENB[29], NOT_CENB, WRITEB[29]);
  primitive = _and aWRITEB30(NOT_DFTRAMBYP, NOT_SPLIT_WENB[30], NOT_CENB, WRITEB[30]);
  primitive = _and aWRITEB31(NOT_DFTRAMBYP, NOT_SPLIT_WENB[31], NOT_CENB, WRITEB[31]);
  primitive = _and aWRITEB32(NOT_DFTRAMBYP, NOT_SPLIT_WENB[32], NOT_CENB, WRITEB[32]);
  primitive = _and aWRITEB33(NOT_DFTRAMBYP, NOT_SPLIT_WENB[33], NOT_CENB, WRITEB[33]);
  primitive = _and aWRITEB34(NOT_DFTRAMBYP, NOT_SPLIT_WENB[34], NOT_CENB, WRITEB[34]);
  primitive = _and aWRITEB35(NOT_DFTRAMBYP, NOT_SPLIT_WENB[35], NOT_CENB, WRITEB[35]);
  primitive = _and aWRITEB36(NOT_DFTRAMBYP, NOT_SPLIT_WENB[36], NOT_CENB, WRITEB[36]);
  primitive = _and aWRITEB37(NOT_DFTRAMBYP, NOT_SPLIT_WENB[37], NOT_CENB, WRITEB[37]);
  primitive = _and aWRITEB38(NOT_DFTRAMBYP, NOT_SPLIT_WENB[38], NOT_CENB, WRITEB[38]);
  primitive = _and aWRITEB39(NOT_DFTRAMBYP, NOT_SPLIT_WENB[39], NOT_CENB, WRITEB[39]);
  primitive = _and aWRITEB40(NOT_DFTRAMBYP, NOT_SPLIT_WENB[40], NOT_CENB, WRITEB[40]);
  primitive = _and aWRITEB41(NOT_DFTRAMBYP, NOT_SPLIT_WENB[41], NOT_CENB, WRITEB[41]);
  primitive = _and aWRITEB42(NOT_DFTRAMBYP, NOT_SPLIT_WENB[42], NOT_CENB, WRITEB[42]);
  primitive = _and aWRITEB43(NOT_DFTRAMBYP, NOT_SPLIT_WENB[43], NOT_CENB, WRITEB[43]);
  primitive = _and aWRITEB44(NOT_DFTRAMBYP, NOT_SPLIT_WENB[44], NOT_CENB, WRITEB[44]);
  primitive = _and aWRITEB45(NOT_DFTRAMBYP, NOT_SPLIT_WENB[45], NOT_CENB, WRITEB[45]);
  primitive = _and aWRITEB46(NOT_DFTRAMBYP, NOT_SPLIT_WENB[46], NOT_CENB, WRITEB[46]);
  primitive = _and aWRITEB47(NOT_DFTRAMBYP, NOT_SPLIT_WENB[47], NOT_CENB, WRITEB[47]);
  primitive = _and aWRITEB48(NOT_DFTRAMBYP, NOT_SPLIT_WENB[48], NOT_CENB, WRITEB[48]);
  primitive = _and aWRITEB49(NOT_DFTRAMBYP, NOT_SPLIT_WENB[49], NOT_CENB, WRITEB[49]);
  primitive = _and aWRITEB50(NOT_DFTRAMBYP, NOT_SPLIT_WENB[50], NOT_CENB, WRITEB[50]);
  primitive = _and aWRITEB51(NOT_DFTRAMBYP, NOT_SPLIT_WENB[51], NOT_CENB, WRITEB[51]);
  primitive = _and aWRITEB52(NOT_DFTRAMBYP, NOT_SPLIT_WENB[52], NOT_CENB, WRITEB[52]);
  primitive = _and aWRITEB53(NOT_DFTRAMBYP, NOT_SPLIT_WENB[53], NOT_CENB, WRITEB[53]);
  primitive = _and aWRITEB54(NOT_DFTRAMBYP, NOT_SPLIT_WENB[54], NOT_CENB, WRITEB[54]);
  primitive = _and aWRITEB55(NOT_DFTRAMBYP, NOT_SPLIT_WENB[55], NOT_CENB, WRITEB[55]);
  primitive = _and aWRITEB56(NOT_DFTRAMBYP, NOT_SPLIT_WENB[56], NOT_CENB, WRITEB[56]);
  primitive = _and aWRITEB57(NOT_DFTRAMBYP, NOT_SPLIT_WENB[57], NOT_CENB, WRITEB[57]);
  primitive = _and aWRITEB58(NOT_DFTRAMBYP, NOT_SPLIT_WENB[58], NOT_CENB, WRITEB[58]);
  primitive = _and aWRITEB59(NOT_DFTRAMBYP, NOT_SPLIT_WENB[59], NOT_CENB, WRITEB[59]);
  primitive = _and aWRITEB60(NOT_DFTRAMBYP, NOT_SPLIT_WENB[60], NOT_CENB, WRITEB[60]);
  primitive = _and aWRITEB61(NOT_DFTRAMBYP, NOT_SPLIT_WENB[61], NOT_CENB, WRITEB[61]);
  primitive = _and aWRITEB62(NOT_DFTRAMBYP, NOT_SPLIT_WENB[62], NOT_CENB, WRITEB[62]);
  primitive = _and aWRITEB63(NOT_DFTRAMBYP, NOT_SPLIT_WENB[63], NOT_CENB, WRITEB[63]);
  primitive = _and aWRITEB64(NOT_DFTRAMBYP, NOT_SPLIT_WENB[64], NOT_CENB, WRITEB[64]);
  primitive = _and aWRITEB65(NOT_DFTRAMBYP, NOT_SPLIT_WENB[65], NOT_CENB, WRITEB[65]);
  primitive = _and aWRITEB66(NOT_DFTRAMBYP, NOT_SPLIT_WENB[66], NOT_CENB, WRITEB[66]);
  primitive = _and aWRITEB67(NOT_DFTRAMBYP, NOT_SPLIT_WENB[67], NOT_CENB, WRITEB[67]);
  primitive = _and aWRITEB68(NOT_DFTRAMBYP, NOT_SPLIT_WENB[68], NOT_CENB, WRITEB[68]);
  primitive = _and aWRITEB69(NOT_DFTRAMBYP, NOT_SPLIT_WENB[69], NOT_CENB, WRITEB[69]);
  primitive = _and aWRITEB70(NOT_DFTRAMBYP, NOT_SPLIT_WENB[70], NOT_CENB, WRITEB[70]);
  primitive = _and aWRITEB71(NOT_DFTRAMBYP, NOT_SPLIT_WENB[71], NOT_CENB, WRITEB[71]);
  primitive = _and aWRITEB72(NOT_DFTRAMBYP, NOT_SPLIT_WENB[72], NOT_CENB, WRITEB[72]);
  primitive = _and aWRITEB73(NOT_DFTRAMBYP, NOT_SPLIT_WENB[73], NOT_CENB, WRITEB[73]);
  primitive = _and aWRITEB74(NOT_DFTRAMBYP, NOT_SPLIT_WENB[74], NOT_CENB, WRITEB[74]);
  primitive = _and aWRITEB75(NOT_DFTRAMBYP, NOT_SPLIT_WENB[75], NOT_CENB, WRITEB[75]);
  primitive = _and aWRITEB76(NOT_DFTRAMBYP, NOT_SPLIT_WENB[76], NOT_CENB, WRITEB[76]);
  primitive = _and aWRITEB77(NOT_DFTRAMBYP, NOT_SPLIT_WENB[77], NOT_CENB, WRITEB[77]);
  primitive = _and aWRITEB78(NOT_DFTRAMBYP, NOT_SPLIT_WENB[78], NOT_CENB, WRITEB[78]);
  primitive = _and aWRITEB79(NOT_DFTRAMBYP, NOT_SPLIT_WENB[79], NOT_CENB, WRITEB[79]);
  primitive = _and aWRITEB80(NOT_DFTRAMBYP, NOT_SPLIT_WENB[80], NOT_CENB, WRITEB[80]);
  primitive = _and aWRITEB81(NOT_DFTRAMBYP, NOT_SPLIT_WENB[81], NOT_CENB, WRITEB[81]);
  primitive = _and aWRITEB82(NOT_DFTRAMBYP, NOT_SPLIT_WENB[82], NOT_CENB, WRITEB[82]);
  primitive = _and aWRITEB83(NOT_DFTRAMBYP, NOT_SPLIT_WENB[83], NOT_CENB, WRITEB[83]);
  primitive = _and aWRITEB84(NOT_DFTRAMBYP, NOT_SPLIT_WENB[84], NOT_CENB, WRITEB[84]);
  primitive = _and aWRITEB85(NOT_DFTRAMBYP, NOT_SPLIT_WENB[85], NOT_CENB, WRITEB[85]);
  primitive = _and aWRITEB86(NOT_DFTRAMBYP, NOT_SPLIT_WENB[86], NOT_CENB, WRITEB[86]);
  primitive = _and aWRITEB87(NOT_DFTRAMBYP, NOT_SPLIT_WENB[87], NOT_CENB, WRITEB[87]);
  primitive = _and aWRITEB88(NOT_DFTRAMBYP, NOT_SPLIT_WENB[88], NOT_CENB, WRITEB[88]);
  primitive = _and aWRITEB89(NOT_DFTRAMBYP, NOT_SPLIT_WENB[89], NOT_CENB, WRITEB[89]);
  primitive = _and aWRITEB90(NOT_DFTRAMBYP, NOT_SPLIT_WENB[90], NOT_CENB, WRITEB[90]);
  primitive = _and aWRITEB91(NOT_DFTRAMBYP, NOT_SPLIT_WENB[91], NOT_CENB, WRITEB[91]);
  primitive = _and aWRITEB92(NOT_DFTRAMBYP, NOT_SPLIT_WENB[92], NOT_CENB, WRITEB[92]);
  primitive = _and aWRITEB93(NOT_DFTRAMBYP, NOT_SPLIT_WENB[93], NOT_CENB, WRITEB[93]);
  primitive = _and aWRITEB94(NOT_DFTRAMBYP, NOT_SPLIT_WENB[94], NOT_CENB, WRITEB[94]);
  primitive = _and aWRITEB95(NOT_DFTRAMBYP, NOT_SPLIT_WENB[95], NOT_CENB, WRITEB[95]);
  primitive = _and aWRITEB96(NOT_DFTRAMBYP, NOT_SPLIT_WENB[96], NOT_CENB, WRITEB[96]);
  primitive = _and aWRITEB97(NOT_DFTRAMBYP, NOT_SPLIT_WENB[97], NOT_CENB, WRITEB[97]);
  primitive = _and aWRITEB98(NOT_DFTRAMBYP, NOT_SPLIT_WENB[98], NOT_CENB, WRITEB[98]);
  primitive = _and aWRITEB99(NOT_DFTRAMBYP, NOT_SPLIT_WENB[99], NOT_CENB, WRITEB[99]);
  primitive = _and aWRITEB100(NOT_DFTRAMBYP, NOT_SPLIT_WENB[100], NOT_CENB, WRITEB[100]);
  primitive = _and aWRITEB101(NOT_DFTRAMBYP, NOT_SPLIT_WENB[101], NOT_CENB, WRITEB[101]);
  primitive = _and aWRITEB102(NOT_DFTRAMBYP, NOT_SPLIT_WENB[102], NOT_CENB, WRITEB[102]);
  primitive = _and aWRITEB103(NOT_DFTRAMBYP, NOT_SPLIT_WENB[103], NOT_CENB, WRITEB[103]);
  primitive = _and aWRITEB104(NOT_DFTRAMBYP, NOT_SPLIT_WENB[104], NOT_CENB, WRITEB[104]);
  primitive = _and aWRITEB105(NOT_DFTRAMBYP, NOT_SPLIT_WENB[105], NOT_CENB, WRITEB[105]);
  primitive = _and aWRITEB106(NOT_DFTRAMBYP, NOT_SPLIT_WENB[106], NOT_CENB, WRITEB[106]);
  primitive = _and aWRITEB107(NOT_DFTRAMBYP, NOT_SPLIT_WENB[107], NOT_CENB, WRITEB[107]);
  primitive = _and aWRITEB108(NOT_DFTRAMBYP, NOT_SPLIT_WENB[108], NOT_CENB, WRITEB[108]);
  primitive = _and aWRITEB109(NOT_DFTRAMBYP, NOT_SPLIT_WENB[109], NOT_CENB, WRITEB[109]);
  primitive = _and aWRITEB110(NOT_DFTRAMBYP, NOT_SPLIT_WENB[110], NOT_CENB, WRITEB[110]);
  primitive = _and aWRITEB111(NOT_DFTRAMBYP, NOT_SPLIT_WENB[111], NOT_CENB, WRITEB[111]);
  primitive = _and aWRITEB112(NOT_DFTRAMBYP, NOT_SPLIT_WENB[112], NOT_CENB, WRITEB[112]);
  primitive = _and aWRITEB113(NOT_DFTRAMBYP, NOT_SPLIT_WENB[113], NOT_CENB, WRITEB[113]);
  primitive = _and aWRITEB114(NOT_DFTRAMBYP, NOT_SPLIT_WENB[114], NOT_CENB, WRITEB[114]);
  primitive = _and aWRITEB115(NOT_DFTRAMBYP, NOT_SPLIT_WENB[115], NOT_CENB, WRITEB[115]);
  primitive = _and aWRITEB116(NOT_DFTRAMBYP, NOT_SPLIT_WENB[116], NOT_CENB, WRITEB[116]);
  primitive = _and aWRITEB117(NOT_DFTRAMBYP, NOT_SPLIT_WENB[117], NOT_CENB, WRITEB[117]);
  primitive = _and aWRITEB118(NOT_DFTRAMBYP, NOT_SPLIT_WENB[118], NOT_CENB, WRITEB[118]);
  primitive = _and aWRITEB119(NOT_DFTRAMBYP, NOT_SPLIT_WENB[119], NOT_CENB, WRITEB[119]);
  primitive = _and aWRITEB120(NOT_DFTRAMBYP, NOT_SPLIT_WENB[120], NOT_CENB, WRITEB[120]);
  primitive = _and aWRITEB121(NOT_DFTRAMBYP, NOT_SPLIT_WENB[121], NOT_CENB, WRITEB[121]);
  primitive = _and aWRITEB122(NOT_DFTRAMBYP, NOT_SPLIT_WENB[122], NOT_CENB, WRITEB[122]);
  primitive = _and aWRITEB123(NOT_DFTRAMBYP, NOT_SPLIT_WENB[123], NOT_CENB, WRITEB[123]);
  primitive = _and aWRITEB124(NOT_DFTRAMBYP, NOT_SPLIT_WENB[124], NOT_CENB, WRITEB[124]);
  primitive = _and aWRITEB125(NOT_DFTRAMBYP, NOT_SPLIT_WENB[125], NOT_CENB, WRITEB[125]);
  primitive = _and aWRITEB126(NOT_DFTRAMBYP, NOT_SPLIT_WENB[126], NOT_CENB, WRITEB[126]);
  primitive = _and aWRITEB127(NOT_DFTRAMBYP, NOT_SPLIT_WENB[127], NOT_CENB, WRITEB[127]);
  )
intern (INT_QA) (array = 127 : 0;
   instance = rf2_32x128_wm1_bitcell memB0 (.CLK(CLKB), .WRITE(WRITEB[0]), .READ(READA[0]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[0]), .Xout(XoutBiff), .Q(INT_QA[0]));
   instance = rf2_32x128_wm1_bitcell memB1 (.CLK(CLKB), .WRITE(WRITEB[1]), .READ(READA[1]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[1]), .Xout(XoutBiff), .Q(INT_QA[1]));
   instance = rf2_32x128_wm1_bitcell memB2 (.CLK(CLKB), .WRITE(WRITEB[2]), .READ(READA[2]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[2]), .Xout(XoutBiff), .Q(INT_QA[2]));
   instance = rf2_32x128_wm1_bitcell memB3 (.CLK(CLKB), .WRITE(WRITEB[3]), .READ(READA[3]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[3]), .Xout(XoutBiff), .Q(INT_QA[3]));
   instance = rf2_32x128_wm1_bitcell memB4 (.CLK(CLKB), .WRITE(WRITEB[4]), .READ(READA[4]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[4]), .Xout(XoutBiff), .Q(INT_QA[4]));
   instance = rf2_32x128_wm1_bitcell memB5 (.CLK(CLKB), .WRITE(WRITEB[5]), .READ(READA[5]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[5]), .Xout(XoutBiff), .Q(INT_QA[5]));
   instance = rf2_32x128_wm1_bitcell memB6 (.CLK(CLKB), .WRITE(WRITEB[6]), .READ(READA[6]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[6]), .Xout(XoutBiff), .Q(INT_QA[6]));
   instance = rf2_32x128_wm1_bitcell memB7 (.CLK(CLKB), .WRITE(WRITEB[7]), .READ(READA[7]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[7]), .Xout(XoutBiff), .Q(INT_QA[7]));
   instance = rf2_32x128_wm1_bitcell memB8 (.CLK(CLKB), .WRITE(WRITEB[8]), .READ(READA[8]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[8]), .Xout(XoutBiff), .Q(INT_QA[8]));
   instance = rf2_32x128_wm1_bitcell memB9 (.CLK(CLKB), .WRITE(WRITEB[9]), .READ(READA[9]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[9]), .Xout(XoutBiff), .Q(INT_QA[9]));
   instance = rf2_32x128_wm1_bitcell memB10 (.CLK(CLKB), .WRITE(WRITEB[10]), .READ(READA[10]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[10]), .Xout(XoutBiff), .Q(INT_QA[10]));
   instance = rf2_32x128_wm1_bitcell memB11 (.CLK(CLKB), .WRITE(WRITEB[11]), .READ(READA[11]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[11]), .Xout(XoutBiff), .Q(INT_QA[11]));
   instance = rf2_32x128_wm1_bitcell memB12 (.CLK(CLKB), .WRITE(WRITEB[12]), .READ(READA[12]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[12]), .Xout(XoutBiff), .Q(INT_QA[12]));
   instance = rf2_32x128_wm1_bitcell memB13 (.CLK(CLKB), .WRITE(WRITEB[13]), .READ(READA[13]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[13]), .Xout(XoutBiff), .Q(INT_QA[13]));
   instance = rf2_32x128_wm1_bitcell memB14 (.CLK(CLKB), .WRITE(WRITEB[14]), .READ(READA[14]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[14]), .Xout(XoutBiff), .Q(INT_QA[14]));
   instance = rf2_32x128_wm1_bitcell memB15 (.CLK(CLKB), .WRITE(WRITEB[15]), .READ(READA[15]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[15]), .Xout(XoutBiff), .Q(INT_QA[15]));
   instance = rf2_32x128_wm1_bitcell memB16 (.CLK(CLKB), .WRITE(WRITEB[16]), .READ(READA[16]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[16]), .Xout(XoutBiff), .Q(INT_QA[16]));
   instance = rf2_32x128_wm1_bitcell memB17 (.CLK(CLKB), .WRITE(WRITEB[17]), .READ(READA[17]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[17]), .Xout(XoutBiff), .Q(INT_QA[17]));
   instance = rf2_32x128_wm1_bitcell memB18 (.CLK(CLKB), .WRITE(WRITEB[18]), .READ(READA[18]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[18]), .Xout(XoutBiff), .Q(INT_QA[18]));
   instance = rf2_32x128_wm1_bitcell memB19 (.CLK(CLKB), .WRITE(WRITEB[19]), .READ(READA[19]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[19]), .Xout(XoutBiff), .Q(INT_QA[19]));
   instance = rf2_32x128_wm1_bitcell memB20 (.CLK(CLKB), .WRITE(WRITEB[20]), .READ(READA[20]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[20]), .Xout(XoutBiff), .Q(INT_QA[20]));
   instance = rf2_32x128_wm1_bitcell memB21 (.CLK(CLKB), .WRITE(WRITEB[21]), .READ(READA[21]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[21]), .Xout(XoutBiff), .Q(INT_QA[21]));
   instance = rf2_32x128_wm1_bitcell memB22 (.CLK(CLKB), .WRITE(WRITEB[22]), .READ(READA[22]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[22]), .Xout(XoutBiff), .Q(INT_QA[22]));
   instance = rf2_32x128_wm1_bitcell memB23 (.CLK(CLKB), .WRITE(WRITEB[23]), .READ(READA[23]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[23]), .Xout(XoutBiff), .Q(INT_QA[23]));
   instance = rf2_32x128_wm1_bitcell memB24 (.CLK(CLKB), .WRITE(WRITEB[24]), .READ(READA[24]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[24]), .Xout(XoutBiff), .Q(INT_QA[24]));
   instance = rf2_32x128_wm1_bitcell memB25 (.CLK(CLKB), .WRITE(WRITEB[25]), .READ(READA[25]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[25]), .Xout(XoutBiff), .Q(INT_QA[25]));
   instance = rf2_32x128_wm1_bitcell memB26 (.CLK(CLKB), .WRITE(WRITEB[26]), .READ(READA[26]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[26]), .Xout(XoutBiff), .Q(INT_QA[26]));
   instance = rf2_32x128_wm1_bitcell memB27 (.CLK(CLKB), .WRITE(WRITEB[27]), .READ(READA[27]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[27]), .Xout(XoutBiff), .Q(INT_QA[27]));
   instance = rf2_32x128_wm1_bitcell memB28 (.CLK(CLKB), .WRITE(WRITEB[28]), .READ(READA[28]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[28]), .Xout(XoutBiff), .Q(INT_QA[28]));
   instance = rf2_32x128_wm1_bitcell memB29 (.CLK(CLKB), .WRITE(WRITEB[29]), .READ(READA[29]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[29]), .Xout(XoutBiff), .Q(INT_QA[29]));
   instance = rf2_32x128_wm1_bitcell memB30 (.CLK(CLKB), .WRITE(WRITEB[30]), .READ(READA[30]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[30]), .Xout(XoutBiff), .Q(INT_QA[30]));
   instance = rf2_32x128_wm1_bitcell memB31 (.CLK(CLKB), .WRITE(WRITEB[31]), .READ(READA[31]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[31]), .Xout(XoutBiff), .Q(INT_QA[31]));
   instance = rf2_32x128_wm1_bitcell memB32 (.CLK(CLKB), .WRITE(WRITEB[32]), .READ(READA[32]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[32]), .Xout(XoutBiff), .Q(INT_QA[32]));
   instance = rf2_32x128_wm1_bitcell memB33 (.CLK(CLKB), .WRITE(WRITEB[33]), .READ(READA[33]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[33]), .Xout(XoutBiff), .Q(INT_QA[33]));
   instance = rf2_32x128_wm1_bitcell memB34 (.CLK(CLKB), .WRITE(WRITEB[34]), .READ(READA[34]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[34]), .Xout(XoutBiff), .Q(INT_QA[34]));
   instance = rf2_32x128_wm1_bitcell memB35 (.CLK(CLKB), .WRITE(WRITEB[35]), .READ(READA[35]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[35]), .Xout(XoutBiff), .Q(INT_QA[35]));
   instance = rf2_32x128_wm1_bitcell memB36 (.CLK(CLKB), .WRITE(WRITEB[36]), .READ(READA[36]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[36]), .Xout(XoutBiff), .Q(INT_QA[36]));
   instance = rf2_32x128_wm1_bitcell memB37 (.CLK(CLKB), .WRITE(WRITEB[37]), .READ(READA[37]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[37]), .Xout(XoutBiff), .Q(INT_QA[37]));
   instance = rf2_32x128_wm1_bitcell memB38 (.CLK(CLKB), .WRITE(WRITEB[38]), .READ(READA[38]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[38]), .Xout(XoutBiff), .Q(INT_QA[38]));
   instance = rf2_32x128_wm1_bitcell memB39 (.CLK(CLKB), .WRITE(WRITEB[39]), .READ(READA[39]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[39]), .Xout(XoutBiff), .Q(INT_QA[39]));
   instance = rf2_32x128_wm1_bitcell memB40 (.CLK(CLKB), .WRITE(WRITEB[40]), .READ(READA[40]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[40]), .Xout(XoutBiff), .Q(INT_QA[40]));
   instance = rf2_32x128_wm1_bitcell memB41 (.CLK(CLKB), .WRITE(WRITEB[41]), .READ(READA[41]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[41]), .Xout(XoutBiff), .Q(INT_QA[41]));
   instance = rf2_32x128_wm1_bitcell memB42 (.CLK(CLKB), .WRITE(WRITEB[42]), .READ(READA[42]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[42]), .Xout(XoutBiff), .Q(INT_QA[42]));
   instance = rf2_32x128_wm1_bitcell memB43 (.CLK(CLKB), .WRITE(WRITEB[43]), .READ(READA[43]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[43]), .Xout(XoutBiff), .Q(INT_QA[43]));
   instance = rf2_32x128_wm1_bitcell memB44 (.CLK(CLKB), .WRITE(WRITEB[44]), .READ(READA[44]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[44]), .Xout(XoutBiff), .Q(INT_QA[44]));
   instance = rf2_32x128_wm1_bitcell memB45 (.CLK(CLKB), .WRITE(WRITEB[45]), .READ(READA[45]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[45]), .Xout(XoutBiff), .Q(INT_QA[45]));
   instance = rf2_32x128_wm1_bitcell memB46 (.CLK(CLKB), .WRITE(WRITEB[46]), .READ(READA[46]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[46]), .Xout(XoutBiff), .Q(INT_QA[46]));
   instance = rf2_32x128_wm1_bitcell memB47 (.CLK(CLKB), .WRITE(WRITEB[47]), .READ(READA[47]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[47]), .Xout(XoutBiff), .Q(INT_QA[47]));
   instance = rf2_32x128_wm1_bitcell memB48 (.CLK(CLKB), .WRITE(WRITEB[48]), .READ(READA[48]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[48]), .Xout(XoutBiff), .Q(INT_QA[48]));
   instance = rf2_32x128_wm1_bitcell memB49 (.CLK(CLKB), .WRITE(WRITEB[49]), .READ(READA[49]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[49]), .Xout(XoutBiff), .Q(INT_QA[49]));
   instance = rf2_32x128_wm1_bitcell memB50 (.CLK(CLKB), .WRITE(WRITEB[50]), .READ(READA[50]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[50]), .Xout(XoutBiff), .Q(INT_QA[50]));
   instance = rf2_32x128_wm1_bitcell memB51 (.CLK(CLKB), .WRITE(WRITEB[51]), .READ(READA[51]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[51]), .Xout(XoutBiff), .Q(INT_QA[51]));
   instance = rf2_32x128_wm1_bitcell memB52 (.CLK(CLKB), .WRITE(WRITEB[52]), .READ(READA[52]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[52]), .Xout(XoutBiff), .Q(INT_QA[52]));
   instance = rf2_32x128_wm1_bitcell memB53 (.CLK(CLKB), .WRITE(WRITEB[53]), .READ(READA[53]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[53]), .Xout(XoutBiff), .Q(INT_QA[53]));
   instance = rf2_32x128_wm1_bitcell memB54 (.CLK(CLKB), .WRITE(WRITEB[54]), .READ(READA[54]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[54]), .Xout(XoutBiff), .Q(INT_QA[54]));
   instance = rf2_32x128_wm1_bitcell memB55 (.CLK(CLKB), .WRITE(WRITEB[55]), .READ(READA[55]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[55]), .Xout(XoutBiff), .Q(INT_QA[55]));
   instance = rf2_32x128_wm1_bitcell memB56 (.CLK(CLKB), .WRITE(WRITEB[56]), .READ(READA[56]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[56]), .Xout(XoutBiff), .Q(INT_QA[56]));
   instance = rf2_32x128_wm1_bitcell memB57 (.CLK(CLKB), .WRITE(WRITEB[57]), .READ(READA[57]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[57]), .Xout(XoutBiff), .Q(INT_QA[57]));
   instance = rf2_32x128_wm1_bitcell memB58 (.CLK(CLKB), .WRITE(WRITEB[58]), .READ(READA[58]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[58]), .Xout(XoutBiff), .Q(INT_QA[58]));
   instance = rf2_32x128_wm1_bitcell memB59 (.CLK(CLKB), .WRITE(WRITEB[59]), .READ(READA[59]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[59]), .Xout(XoutBiff), .Q(INT_QA[59]));
   instance = rf2_32x128_wm1_bitcell memB60 (.CLK(CLKB), .WRITE(WRITEB[60]), .READ(READA[60]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[60]), .Xout(XoutBiff), .Q(INT_QA[60]));
   instance = rf2_32x128_wm1_bitcell memB61 (.CLK(CLKB), .WRITE(WRITEB[61]), .READ(READA[61]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[61]), .Xout(XoutBiff), .Q(INT_QA[61]));
   instance = rf2_32x128_wm1_bitcell memB62 (.CLK(CLKB), .WRITE(WRITEB[62]), .READ(READA[62]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[62]), .Xout(XoutBiff), .Q(INT_QA[62]));
   instance = rf2_32x128_wm1_bitcell memB63 (.CLK(CLKB), .WRITE(WRITEB[63]), .READ(READA[63]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[63]), .Xout(XoutBiff), .Q(INT_QA[63]));
   instance = rf2_32x128_wm1_bitcell memB64 (.CLK(CLKB), .WRITE(WRITEB[64]), .READ(READA[64]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[64]), .Xout(XoutBiff), .Q(INT_QA[64]));
   instance = rf2_32x128_wm1_bitcell memB65 (.CLK(CLKB), .WRITE(WRITEB[65]), .READ(READA[65]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[65]), .Xout(XoutBiff), .Q(INT_QA[65]));
   instance = rf2_32x128_wm1_bitcell memB66 (.CLK(CLKB), .WRITE(WRITEB[66]), .READ(READA[66]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[66]), .Xout(XoutBiff), .Q(INT_QA[66]));
   instance = rf2_32x128_wm1_bitcell memB67 (.CLK(CLKB), .WRITE(WRITEB[67]), .READ(READA[67]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[67]), .Xout(XoutBiff), .Q(INT_QA[67]));
   instance = rf2_32x128_wm1_bitcell memB68 (.CLK(CLKB), .WRITE(WRITEB[68]), .READ(READA[68]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[68]), .Xout(XoutBiff), .Q(INT_QA[68]));
   instance = rf2_32x128_wm1_bitcell memB69 (.CLK(CLKB), .WRITE(WRITEB[69]), .READ(READA[69]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[69]), .Xout(XoutBiff), .Q(INT_QA[69]));
   instance = rf2_32x128_wm1_bitcell memB70 (.CLK(CLKB), .WRITE(WRITEB[70]), .READ(READA[70]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[70]), .Xout(XoutBiff), .Q(INT_QA[70]));
   instance = rf2_32x128_wm1_bitcell memB71 (.CLK(CLKB), .WRITE(WRITEB[71]), .READ(READA[71]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[71]), .Xout(XoutBiff), .Q(INT_QA[71]));
   instance = rf2_32x128_wm1_bitcell memB72 (.CLK(CLKB), .WRITE(WRITEB[72]), .READ(READA[72]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[72]), .Xout(XoutBiff), .Q(INT_QA[72]));
   instance = rf2_32x128_wm1_bitcell memB73 (.CLK(CLKB), .WRITE(WRITEB[73]), .READ(READA[73]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[73]), .Xout(XoutBiff), .Q(INT_QA[73]));
   instance = rf2_32x128_wm1_bitcell memB74 (.CLK(CLKB), .WRITE(WRITEB[74]), .READ(READA[74]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[74]), .Xout(XoutBiff), .Q(INT_QA[74]));
   instance = rf2_32x128_wm1_bitcell memB75 (.CLK(CLKB), .WRITE(WRITEB[75]), .READ(READA[75]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[75]), .Xout(XoutBiff), .Q(INT_QA[75]));
   instance = rf2_32x128_wm1_bitcell memB76 (.CLK(CLKB), .WRITE(WRITEB[76]), .READ(READA[76]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[76]), .Xout(XoutBiff), .Q(INT_QA[76]));
   instance = rf2_32x128_wm1_bitcell memB77 (.CLK(CLKB), .WRITE(WRITEB[77]), .READ(READA[77]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[77]), .Xout(XoutBiff), .Q(INT_QA[77]));
   instance = rf2_32x128_wm1_bitcell memB78 (.CLK(CLKB), .WRITE(WRITEB[78]), .READ(READA[78]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[78]), .Xout(XoutBiff), .Q(INT_QA[78]));
   instance = rf2_32x128_wm1_bitcell memB79 (.CLK(CLKB), .WRITE(WRITEB[79]), .READ(READA[79]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[79]), .Xout(XoutBiff), .Q(INT_QA[79]));
   instance = rf2_32x128_wm1_bitcell memB80 (.CLK(CLKB), .WRITE(WRITEB[80]), .READ(READA[80]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[80]), .Xout(XoutBiff), .Q(INT_QA[80]));
   instance = rf2_32x128_wm1_bitcell memB81 (.CLK(CLKB), .WRITE(WRITEB[81]), .READ(READA[81]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[81]), .Xout(XoutBiff), .Q(INT_QA[81]));
   instance = rf2_32x128_wm1_bitcell memB82 (.CLK(CLKB), .WRITE(WRITEB[82]), .READ(READA[82]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[82]), .Xout(XoutBiff), .Q(INT_QA[82]));
   instance = rf2_32x128_wm1_bitcell memB83 (.CLK(CLKB), .WRITE(WRITEB[83]), .READ(READA[83]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[83]), .Xout(XoutBiff), .Q(INT_QA[83]));
   instance = rf2_32x128_wm1_bitcell memB84 (.CLK(CLKB), .WRITE(WRITEB[84]), .READ(READA[84]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[84]), .Xout(XoutBiff), .Q(INT_QA[84]));
   instance = rf2_32x128_wm1_bitcell memB85 (.CLK(CLKB), .WRITE(WRITEB[85]), .READ(READA[85]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[85]), .Xout(XoutBiff), .Q(INT_QA[85]));
   instance = rf2_32x128_wm1_bitcell memB86 (.CLK(CLKB), .WRITE(WRITEB[86]), .READ(READA[86]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[86]), .Xout(XoutBiff), .Q(INT_QA[86]));
   instance = rf2_32x128_wm1_bitcell memB87 (.CLK(CLKB), .WRITE(WRITEB[87]), .READ(READA[87]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[87]), .Xout(XoutBiff), .Q(INT_QA[87]));
   instance = rf2_32x128_wm1_bitcell memB88 (.CLK(CLKB), .WRITE(WRITEB[88]), .READ(READA[88]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[88]), .Xout(XoutBiff), .Q(INT_QA[88]));
   instance = rf2_32x128_wm1_bitcell memB89 (.CLK(CLKB), .WRITE(WRITEB[89]), .READ(READA[89]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[89]), .Xout(XoutBiff), .Q(INT_QA[89]));
   instance = rf2_32x128_wm1_bitcell memB90 (.CLK(CLKB), .WRITE(WRITEB[90]), .READ(READA[90]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[90]), .Xout(XoutBiff), .Q(INT_QA[90]));
   instance = rf2_32x128_wm1_bitcell memB91 (.CLK(CLKB), .WRITE(WRITEB[91]), .READ(READA[91]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[91]), .Xout(XoutBiff), .Q(INT_QA[91]));
   instance = rf2_32x128_wm1_bitcell memB92 (.CLK(CLKB), .WRITE(WRITEB[92]), .READ(READA[92]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[92]), .Xout(XoutBiff), .Q(INT_QA[92]));
   instance = rf2_32x128_wm1_bitcell memB93 (.CLK(CLKB), .WRITE(WRITEB[93]), .READ(READA[93]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[93]), .Xout(XoutBiff), .Q(INT_QA[93]));
   instance = rf2_32x128_wm1_bitcell memB94 (.CLK(CLKB), .WRITE(WRITEB[94]), .READ(READA[94]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[94]), .Xout(XoutBiff), .Q(INT_QA[94]));
   instance = rf2_32x128_wm1_bitcell memB95 (.CLK(CLKB), .WRITE(WRITEB[95]), .READ(READA[95]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[95]), .Xout(XoutBiff), .Q(INT_QA[95]));
   instance = rf2_32x128_wm1_bitcell memB96 (.CLK(CLKB), .WRITE(WRITEB[96]), .READ(READA[96]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[96]), .Xout(XoutBiff), .Q(INT_QA[96]));
   instance = rf2_32x128_wm1_bitcell memB97 (.CLK(CLKB), .WRITE(WRITEB[97]), .READ(READA[97]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[97]), .Xout(XoutBiff), .Q(INT_QA[97]));
   instance = rf2_32x128_wm1_bitcell memB98 (.CLK(CLKB), .WRITE(WRITEB[98]), .READ(READA[98]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[98]), .Xout(XoutBiff), .Q(INT_QA[98]));
   instance = rf2_32x128_wm1_bitcell memB99 (.CLK(CLKB), .WRITE(WRITEB[99]), .READ(READA[99]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[99]), .Xout(XoutBiff), .Q(INT_QA[99]));
   instance = rf2_32x128_wm1_bitcell memB100 (.CLK(CLKB), .WRITE(WRITEB[100]), .READ(READA[100]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[100]), .Xout(XoutBiff), .Q(INT_QA[100]));
   instance = rf2_32x128_wm1_bitcell memB101 (.CLK(CLKB), .WRITE(WRITEB[101]), .READ(READA[101]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[101]), .Xout(XoutBiff), .Q(INT_QA[101]));
   instance = rf2_32x128_wm1_bitcell memB102 (.CLK(CLKB), .WRITE(WRITEB[102]), .READ(READA[102]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[102]), .Xout(XoutBiff), .Q(INT_QA[102]));
   instance = rf2_32x128_wm1_bitcell memB103 (.CLK(CLKB), .WRITE(WRITEB[103]), .READ(READA[103]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[103]), .Xout(XoutBiff), .Q(INT_QA[103]));
   instance = rf2_32x128_wm1_bitcell memB104 (.CLK(CLKB), .WRITE(WRITEB[104]), .READ(READA[104]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[104]), .Xout(XoutBiff), .Q(INT_QA[104]));
   instance = rf2_32x128_wm1_bitcell memB105 (.CLK(CLKB), .WRITE(WRITEB[105]), .READ(READA[105]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[105]), .Xout(XoutBiff), .Q(INT_QA[105]));
   instance = rf2_32x128_wm1_bitcell memB106 (.CLK(CLKB), .WRITE(WRITEB[106]), .READ(READA[106]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[106]), .Xout(XoutBiff), .Q(INT_QA[106]));
   instance = rf2_32x128_wm1_bitcell memB107 (.CLK(CLKB), .WRITE(WRITEB[107]), .READ(READA[107]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[107]), .Xout(XoutBiff), .Q(INT_QA[107]));
   instance = rf2_32x128_wm1_bitcell memB108 (.CLK(CLKB), .WRITE(WRITEB[108]), .READ(READA[108]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[108]), .Xout(XoutBiff), .Q(INT_QA[108]));
   instance = rf2_32x128_wm1_bitcell memB109 (.CLK(CLKB), .WRITE(WRITEB[109]), .READ(READA[109]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[109]), .Xout(XoutBiff), .Q(INT_QA[109]));
   instance = rf2_32x128_wm1_bitcell memB110 (.CLK(CLKB), .WRITE(WRITEB[110]), .READ(READA[110]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[110]), .Xout(XoutBiff), .Q(INT_QA[110]));
   instance = rf2_32x128_wm1_bitcell memB111 (.CLK(CLKB), .WRITE(WRITEB[111]), .READ(READA[111]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[111]), .Xout(XoutBiff), .Q(INT_QA[111]));
   instance = rf2_32x128_wm1_bitcell memB112 (.CLK(CLKB), .WRITE(WRITEB[112]), .READ(READA[112]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[112]), .Xout(XoutBiff), .Q(INT_QA[112]));
   instance = rf2_32x128_wm1_bitcell memB113 (.CLK(CLKB), .WRITE(WRITEB[113]), .READ(READA[113]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[113]), .Xout(XoutBiff), .Q(INT_QA[113]));
   instance = rf2_32x128_wm1_bitcell memB114 (.CLK(CLKB), .WRITE(WRITEB[114]), .READ(READA[114]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[114]), .Xout(XoutBiff), .Q(INT_QA[114]));
   instance = rf2_32x128_wm1_bitcell memB115 (.CLK(CLKB), .WRITE(WRITEB[115]), .READ(READA[115]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[115]), .Xout(XoutBiff), .Q(INT_QA[115]));
   instance = rf2_32x128_wm1_bitcell memB116 (.CLK(CLKB), .WRITE(WRITEB[116]), .READ(READA[116]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[116]), .Xout(XoutBiff), .Q(INT_QA[116]));
   instance = rf2_32x128_wm1_bitcell memB117 (.CLK(CLKB), .WRITE(WRITEB[117]), .READ(READA[117]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[117]), .Xout(XoutBiff), .Q(INT_QA[117]));
   instance = rf2_32x128_wm1_bitcell memB118 (.CLK(CLKB), .WRITE(WRITEB[118]), .READ(READA[118]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[118]), .Xout(XoutBiff), .Q(INT_QA[118]));
   instance = rf2_32x128_wm1_bitcell memB119 (.CLK(CLKB), .WRITE(WRITEB[119]), .READ(READA[119]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[119]), .Xout(XoutBiff), .Q(INT_QA[119]));
   instance = rf2_32x128_wm1_bitcell memB120 (.CLK(CLKB), .WRITE(WRITEB[120]), .READ(READA[120]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[120]), .Xout(XoutBiff), .Q(INT_QA[120]));
   instance = rf2_32x128_wm1_bitcell memB121 (.CLK(CLKB), .WRITE(WRITEB[121]), .READ(READA[121]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[121]), .Xout(XoutBiff), .Q(INT_QA[121]));
   instance = rf2_32x128_wm1_bitcell memB122 (.CLK(CLKB), .WRITE(WRITEB[122]), .READ(READA[122]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[122]), .Xout(XoutBiff), .Q(INT_QA[122]));
   instance = rf2_32x128_wm1_bitcell memB123 (.CLK(CLKB), .WRITE(WRITEB[123]), .READ(READA[123]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[123]), .Xout(XoutBiff), .Q(INT_QA[123]));
   instance = rf2_32x128_wm1_bitcell memB124 (.CLK(CLKB), .WRITE(WRITEB[124]), .READ(READA[124]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[124]), .Xout(XoutBiff), .Q(INT_QA[124]));
   instance = rf2_32x128_wm1_bitcell memB125 (.CLK(CLKB), .WRITE(WRITEB[125]), .READ(READA[125]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[125]), .Xout(XoutBiff), .Q(INT_QA[125]));
   instance = rf2_32x128_wm1_bitcell memB126 (.CLK(CLKB), .WRITE(WRITEB[126]), .READ(READA[126]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[126]), .Xout(XoutBiff), .Q(INT_QA[126]));
   instance = rf2_32x128_wm1_bitcell memB127 (.CLK(CLKB), .WRITE(WRITEB[127]), .READ(READA[127]), .WA(BMUX_AB), .RA(BMUX_AA), .D(BMUX_DB[127]), .Xout(XoutBiff), .Q(INT_QA[127]));
  )
   intern (x_detection_CENB) (primitive = _xor xx_detection_CENB(BMUX_CENB, BMUX_CENB, x_detection_CENB);)
   intern (x_detection_CLKB) (primitive = _xor xx_detection_CLKB(CLKB, CLKB, x_detection_CLKB);)
   intern (aSEB) (primitive = _and  a1SEB ( SEB, DFTRAMBYPinv, aSEB );)
   intern (acendftB) (primitive = _and  a1cendft[B] (x_detection_CENB, DFTRAMBYPinv, acendftB );)
   intern (acendftCB) (primitive = _and  a1cendftCB ( x_detection_CLKB, DFTRAMBYPinv, acendftCB );)
   intern (XoutB) (primitive = _or  oXoutB ( aSEB, acendftB, acendftCA, acendftCB, XoutB );)
   intern (DFTRAMBYPinv) (primitive = _inv  imDFTRAMBYP ( DFTRAMBYP, DFTRAMBYPinv );)
   intern (DB_hold) (array = 127:0; 
     primitive = _mux  mDB_hold0 (BMUX_DB[0], QB_int[0], BMUX_CENB, DB_hold[0] );
     primitive = _mux  mDB_hold1 (BMUX_DB[1], QB_int[1], BMUX_CENB, DB_hold[1] );
     primitive = _mux  mDB_hold2 (BMUX_DB[2], QB_int[2], BMUX_CENB, DB_hold[2] );
     primitive = _mux  mDB_hold3 (BMUX_DB[3], QB_int[3], BMUX_CENB, DB_hold[3] );
     primitive = _mux  mDB_hold4 (BMUX_DB[4], QB_int[4], BMUX_CENB, DB_hold[4] );
     primitive = _mux  mDB_hold5 (BMUX_DB[5], QB_int[5], BMUX_CENB, DB_hold[5] );
     primitive = _mux  mDB_hold6 (BMUX_DB[6], QB_int[6], BMUX_CENB, DB_hold[6] );
     primitive = _mux  mDB_hold7 (BMUX_DB[7], QB_int[7], BMUX_CENB, DB_hold[7] );
     primitive = _mux  mDB_hold8 (BMUX_DB[8], QB_int[8], BMUX_CENB, DB_hold[8] );
     primitive = _mux  mDB_hold9 (BMUX_DB[9], QB_int[9], BMUX_CENB, DB_hold[9] );
     primitive = _mux  mDB_hold10 (BMUX_DB[10], QB_int[10], BMUX_CENB, DB_hold[10] );
     primitive = _mux  mDB_hold11 (BMUX_DB[11], QB_int[11], BMUX_CENB, DB_hold[11] );
     primitive = _mux  mDB_hold12 (BMUX_DB[12], QB_int[12], BMUX_CENB, DB_hold[12] );
     primitive = _mux  mDB_hold13 (BMUX_DB[13], QB_int[13], BMUX_CENB, DB_hold[13] );
     primitive = _mux  mDB_hold14 (BMUX_DB[14], QB_int[14], BMUX_CENB, DB_hold[14] );
     primitive = _mux  mDB_hold15 (BMUX_DB[15], QB_int[15], BMUX_CENB, DB_hold[15] );
     primitive = _mux  mDB_hold16 (BMUX_DB[16], QB_int[16], BMUX_CENB, DB_hold[16] );
     primitive = _mux  mDB_hold17 (BMUX_DB[17], QB_int[17], BMUX_CENB, DB_hold[17] );
     primitive = _mux  mDB_hold18 (BMUX_DB[18], QB_int[18], BMUX_CENB, DB_hold[18] );
     primitive = _mux  mDB_hold19 (BMUX_DB[19], QB_int[19], BMUX_CENB, DB_hold[19] );
     primitive = _mux  mDB_hold20 (BMUX_DB[20], QB_int[20], BMUX_CENB, DB_hold[20] );
     primitive = _mux  mDB_hold21 (BMUX_DB[21], QB_int[21], BMUX_CENB, DB_hold[21] );
     primitive = _mux  mDB_hold22 (BMUX_DB[22], QB_int[22], BMUX_CENB, DB_hold[22] );
     primitive = _mux  mDB_hold23 (BMUX_DB[23], QB_int[23], BMUX_CENB, DB_hold[23] );
     primitive = _mux  mDB_hold24 (BMUX_DB[24], QB_int[24], BMUX_CENB, DB_hold[24] );
     primitive = _mux  mDB_hold25 (BMUX_DB[25], QB_int[25], BMUX_CENB, DB_hold[25] );
     primitive = _mux  mDB_hold26 (BMUX_DB[26], QB_int[26], BMUX_CENB, DB_hold[26] );
     primitive = _mux  mDB_hold27 (BMUX_DB[27], QB_int[27], BMUX_CENB, DB_hold[27] );
     primitive = _mux  mDB_hold28 (BMUX_DB[28], QB_int[28], BMUX_CENB, DB_hold[28] );
     primitive = _mux  mDB_hold29 (BMUX_DB[29], QB_int[29], BMUX_CENB, DB_hold[29] );
     primitive = _mux  mDB_hold30 (BMUX_DB[30], QB_int[30], BMUX_CENB, DB_hold[30] );
     primitive = _mux  mDB_hold31 (BMUX_DB[31], QB_int[31], BMUX_CENB, DB_hold[31] );
     primitive = _mux  mDB_hold32 (BMUX_DB[32], QB_int[32], BMUX_CENB, DB_hold[32] );
     primitive = _mux  mDB_hold33 (BMUX_DB[33], QB_int[33], BMUX_CENB, DB_hold[33] );
     primitive = _mux  mDB_hold34 (BMUX_DB[34], QB_int[34], BMUX_CENB, DB_hold[34] );
     primitive = _mux  mDB_hold35 (BMUX_DB[35], QB_int[35], BMUX_CENB, DB_hold[35] );
     primitive = _mux  mDB_hold36 (BMUX_DB[36], QB_int[36], BMUX_CENB, DB_hold[36] );
     primitive = _mux  mDB_hold37 (BMUX_DB[37], QB_int[37], BMUX_CENB, DB_hold[37] );
     primitive = _mux  mDB_hold38 (BMUX_DB[38], QB_int[38], BMUX_CENB, DB_hold[38] );
     primitive = _mux  mDB_hold39 (BMUX_DB[39], QB_int[39], BMUX_CENB, DB_hold[39] );
     primitive = _mux  mDB_hold40 (BMUX_DB[40], QB_int[40], BMUX_CENB, DB_hold[40] );
     primitive = _mux  mDB_hold41 (BMUX_DB[41], QB_int[41], BMUX_CENB, DB_hold[41] );
     primitive = _mux  mDB_hold42 (BMUX_DB[42], QB_int[42], BMUX_CENB, DB_hold[42] );
     primitive = _mux  mDB_hold43 (BMUX_DB[43], QB_int[43], BMUX_CENB, DB_hold[43] );
     primitive = _mux  mDB_hold44 (BMUX_DB[44], QB_int[44], BMUX_CENB, DB_hold[44] );
     primitive = _mux  mDB_hold45 (BMUX_DB[45], QB_int[45], BMUX_CENB, DB_hold[45] );
     primitive = _mux  mDB_hold46 (BMUX_DB[46], QB_int[46], BMUX_CENB, DB_hold[46] );
     primitive = _mux  mDB_hold47 (BMUX_DB[47], QB_int[47], BMUX_CENB, DB_hold[47] );
     primitive = _mux  mDB_hold48 (BMUX_DB[48], QB_int[48], BMUX_CENB, DB_hold[48] );
     primitive = _mux  mDB_hold49 (BMUX_DB[49], QB_int[49], BMUX_CENB, DB_hold[49] );
     primitive = _mux  mDB_hold50 (BMUX_DB[50], QB_int[50], BMUX_CENB, DB_hold[50] );
     primitive = _mux  mDB_hold51 (BMUX_DB[51], QB_int[51], BMUX_CENB, DB_hold[51] );
     primitive = _mux  mDB_hold52 (BMUX_DB[52], QB_int[52], BMUX_CENB, DB_hold[52] );
     primitive = _mux  mDB_hold53 (BMUX_DB[53], QB_int[53], BMUX_CENB, DB_hold[53] );
     primitive = _mux  mDB_hold54 (BMUX_DB[54], QB_int[54], BMUX_CENB, DB_hold[54] );
     primitive = _mux  mDB_hold55 (BMUX_DB[55], QB_int[55], BMUX_CENB, DB_hold[55] );
     primitive = _mux  mDB_hold56 (BMUX_DB[56], QB_int[56], BMUX_CENB, DB_hold[56] );
     primitive = _mux  mDB_hold57 (BMUX_DB[57], QB_int[57], BMUX_CENB, DB_hold[57] );
     primitive = _mux  mDB_hold58 (BMUX_DB[58], QB_int[58], BMUX_CENB, DB_hold[58] );
     primitive = _mux  mDB_hold59 (BMUX_DB[59], QB_int[59], BMUX_CENB, DB_hold[59] );
     primitive = _mux  mDB_hold60 (BMUX_DB[60], QB_int[60], BMUX_CENB, DB_hold[60] );
     primitive = _mux  mDB_hold61 (BMUX_DB[61], QB_int[61], BMUX_CENB, DB_hold[61] );
     primitive = _mux  mDB_hold62 (BMUX_DB[62], QB_int[62], BMUX_CENB, DB_hold[62] );
     primitive = _mux  mDB_hold63 (BMUX_DB[63], QB_int[63], BMUX_CENB, DB_hold[63] );
     primitive = _mux  mDB_hold64 (BMUX_DB[64], QB_int[64], BMUX_CENB, DB_hold[64] );
     primitive = _mux  mDB_hold65 (BMUX_DB[65], QB_int[65], BMUX_CENB, DB_hold[65] );
     primitive = _mux  mDB_hold66 (BMUX_DB[66], QB_int[66], BMUX_CENB, DB_hold[66] );
     primitive = _mux  mDB_hold67 (BMUX_DB[67], QB_int[67], BMUX_CENB, DB_hold[67] );
     primitive = _mux  mDB_hold68 (BMUX_DB[68], QB_int[68], BMUX_CENB, DB_hold[68] );
     primitive = _mux  mDB_hold69 (BMUX_DB[69], QB_int[69], BMUX_CENB, DB_hold[69] );
     primitive = _mux  mDB_hold70 (BMUX_DB[70], QB_int[70], BMUX_CENB, DB_hold[70] );
     primitive = _mux  mDB_hold71 (BMUX_DB[71], QB_int[71], BMUX_CENB, DB_hold[71] );
     primitive = _mux  mDB_hold72 (BMUX_DB[72], QB_int[72], BMUX_CENB, DB_hold[72] );
     primitive = _mux  mDB_hold73 (BMUX_DB[73], QB_int[73], BMUX_CENB, DB_hold[73] );
     primitive = _mux  mDB_hold74 (BMUX_DB[74], QB_int[74], BMUX_CENB, DB_hold[74] );
     primitive = _mux  mDB_hold75 (BMUX_DB[75], QB_int[75], BMUX_CENB, DB_hold[75] );
     primitive = _mux  mDB_hold76 (BMUX_DB[76], QB_int[76], BMUX_CENB, DB_hold[76] );
     primitive = _mux  mDB_hold77 (BMUX_DB[77], QB_int[77], BMUX_CENB, DB_hold[77] );
     primitive = _mux  mDB_hold78 (BMUX_DB[78], QB_int[78], BMUX_CENB, DB_hold[78] );
     primitive = _mux  mDB_hold79 (BMUX_DB[79], QB_int[79], BMUX_CENB, DB_hold[79] );
     primitive = _mux  mDB_hold80 (BMUX_DB[80], QB_int[80], BMUX_CENB, DB_hold[80] );
     primitive = _mux  mDB_hold81 (BMUX_DB[81], QB_int[81], BMUX_CENB, DB_hold[81] );
     primitive = _mux  mDB_hold82 (BMUX_DB[82], QB_int[82], BMUX_CENB, DB_hold[82] );
     primitive = _mux  mDB_hold83 (BMUX_DB[83], QB_int[83], BMUX_CENB, DB_hold[83] );
     primitive = _mux  mDB_hold84 (BMUX_DB[84], QB_int[84], BMUX_CENB, DB_hold[84] );
     primitive = _mux  mDB_hold85 (BMUX_DB[85], QB_int[85], BMUX_CENB, DB_hold[85] );
     primitive = _mux  mDB_hold86 (BMUX_DB[86], QB_int[86], BMUX_CENB, DB_hold[86] );
     primitive = _mux  mDB_hold87 (BMUX_DB[87], QB_int[87], BMUX_CENB, DB_hold[87] );
     primitive = _mux  mDB_hold88 (BMUX_DB[88], QB_int[88], BMUX_CENB, DB_hold[88] );
     primitive = _mux  mDB_hold89 (BMUX_DB[89], QB_int[89], BMUX_CENB, DB_hold[89] );
     primitive = _mux  mDB_hold90 (BMUX_DB[90], QB_int[90], BMUX_CENB, DB_hold[90] );
     primitive = _mux  mDB_hold91 (BMUX_DB[91], QB_int[91], BMUX_CENB, DB_hold[91] );
     primitive = _mux  mDB_hold92 (BMUX_DB[92], QB_int[92], BMUX_CENB, DB_hold[92] );
     primitive = _mux  mDB_hold93 (BMUX_DB[93], QB_int[93], BMUX_CENB, DB_hold[93] );
     primitive = _mux  mDB_hold94 (BMUX_DB[94], QB_int[94], BMUX_CENB, DB_hold[94] );
     primitive = _mux  mDB_hold95 (BMUX_DB[95], QB_int[95], BMUX_CENB, DB_hold[95] );
     primitive = _mux  mDB_hold96 (BMUX_DB[96], QB_int[96], BMUX_CENB, DB_hold[96] );
     primitive = _mux  mDB_hold97 (BMUX_DB[97], QB_int[97], BMUX_CENB, DB_hold[97] );
     primitive = _mux  mDB_hold98 (BMUX_DB[98], QB_int[98], BMUX_CENB, DB_hold[98] );
     primitive = _mux  mDB_hold99 (BMUX_DB[99], QB_int[99], BMUX_CENB, DB_hold[99] );
     primitive = _mux  mDB_hold100 (BMUX_DB[100], QB_int[100], BMUX_CENB, DB_hold[100] );
     primitive = _mux  mDB_hold101 (BMUX_DB[101], QB_int[101], BMUX_CENB, DB_hold[101] );
     primitive = _mux  mDB_hold102 (BMUX_DB[102], QB_int[102], BMUX_CENB, DB_hold[102] );
     primitive = _mux  mDB_hold103 (BMUX_DB[103], QB_int[103], BMUX_CENB, DB_hold[103] );
     primitive = _mux  mDB_hold104 (BMUX_DB[104], QB_int[104], BMUX_CENB, DB_hold[104] );
     primitive = _mux  mDB_hold105 (BMUX_DB[105], QB_int[105], BMUX_CENB, DB_hold[105] );
     primitive = _mux  mDB_hold106 (BMUX_DB[106], QB_int[106], BMUX_CENB, DB_hold[106] );
     primitive = _mux  mDB_hold107 (BMUX_DB[107], QB_int[107], BMUX_CENB, DB_hold[107] );
     primitive = _mux  mDB_hold108 (BMUX_DB[108], QB_int[108], BMUX_CENB, DB_hold[108] );
     primitive = _mux  mDB_hold109 (BMUX_DB[109], QB_int[109], BMUX_CENB, DB_hold[109] );
     primitive = _mux  mDB_hold110 (BMUX_DB[110], QB_int[110], BMUX_CENB, DB_hold[110] );
     primitive = _mux  mDB_hold111 (BMUX_DB[111], QB_int[111], BMUX_CENB, DB_hold[111] );
     primitive = _mux  mDB_hold112 (BMUX_DB[112], QB_int[112], BMUX_CENB, DB_hold[112] );
     primitive = _mux  mDB_hold113 (BMUX_DB[113], QB_int[113], BMUX_CENB, DB_hold[113] );
     primitive = _mux  mDB_hold114 (BMUX_DB[114], QB_int[114], BMUX_CENB, DB_hold[114] );
     primitive = _mux  mDB_hold115 (BMUX_DB[115], QB_int[115], BMUX_CENB, DB_hold[115] );
     primitive = _mux  mDB_hold116 (BMUX_DB[116], QB_int[116], BMUX_CENB, DB_hold[116] );
     primitive = _mux  mDB_hold117 (BMUX_DB[117], QB_int[117], BMUX_CENB, DB_hold[117] );
     primitive = _mux  mDB_hold118 (BMUX_DB[118], QB_int[118], BMUX_CENB, DB_hold[118] );
     primitive = _mux  mDB_hold119 (BMUX_DB[119], QB_int[119], BMUX_CENB, DB_hold[119] );
     primitive = _mux  mDB_hold120 (BMUX_DB[120], QB_int[120], BMUX_CENB, DB_hold[120] );
     primitive = _mux  mDB_hold121 (BMUX_DB[121], QB_int[121], BMUX_CENB, DB_hold[121] );
     primitive = _mux  mDB_hold122 (BMUX_DB[122], QB_int[122], BMUX_CENB, DB_hold[122] );
     primitive = _mux  mDB_hold123 (BMUX_DB[123], QB_int[123], BMUX_CENB, DB_hold[123] );
     primitive = _mux  mDB_hold124 (BMUX_DB[124], QB_int[124], BMUX_CENB, DB_hold[124] );
     primitive = _mux  mDB_hold125 (BMUX_DB[125], QB_int[125], BMUX_CENB, DB_hold[125] );
     primitive = _mux  mDB_hold126 (BMUX_DB[126], QB_int[126], BMUX_CENB, DB_hold[126] );
     primitive = _mux  mDB_hold127 (BMUX_DB[127], QB_int[127], BMUX_CENB, DB_hold[127] );
  )
   intern (DB_scan) (array = 127:0; 
     primitive = _mux  mDB_scan0 (DB_hold[0], BMUX_DB[0], DFTRAMBYP, DB_scan[0] );
     primitive = _mux  mDB_scan1 (DB_hold[1], BMUX_DB[1], DFTRAMBYP, DB_scan[1] );
     primitive = _mux  mDB_scan2 (DB_hold[2], BMUX_DB[2], DFTRAMBYP, DB_scan[2] );
     primitive = _mux  mDB_scan3 (DB_hold[3], BMUX_DB[3], DFTRAMBYP, DB_scan[3] );
     primitive = _mux  mDB_scan4 (DB_hold[4], BMUX_DB[4], DFTRAMBYP, DB_scan[4] );
     primitive = _mux  mDB_scan5 (DB_hold[5], BMUX_DB[5], DFTRAMBYP, DB_scan[5] );
     primitive = _mux  mDB_scan6 (DB_hold[6], BMUX_DB[6], DFTRAMBYP, DB_scan[6] );
     primitive = _mux  mDB_scan7 (DB_hold[7], BMUX_DB[7], DFTRAMBYP, DB_scan[7] );
     primitive = _mux  mDB_scan8 (DB_hold[8], BMUX_DB[8], DFTRAMBYP, DB_scan[8] );
     primitive = _mux  mDB_scan9 (DB_hold[9], BMUX_DB[9], DFTRAMBYP, DB_scan[9] );
     primitive = _mux  mDB_scan10 (DB_hold[10], BMUX_DB[10], DFTRAMBYP, DB_scan[10] );
     primitive = _mux  mDB_scan11 (DB_hold[11], BMUX_DB[11], DFTRAMBYP, DB_scan[11] );
     primitive = _mux  mDB_scan12 (DB_hold[12], BMUX_DB[12], DFTRAMBYP, DB_scan[12] );
     primitive = _mux  mDB_scan13 (DB_hold[13], BMUX_DB[13], DFTRAMBYP, DB_scan[13] );
     primitive = _mux  mDB_scan14 (DB_hold[14], BMUX_DB[14], DFTRAMBYP, DB_scan[14] );
     primitive = _mux  mDB_scan15 (DB_hold[15], BMUX_DB[15], DFTRAMBYP, DB_scan[15] );
     primitive = _mux  mDB_scan16 (DB_hold[16], BMUX_DB[16], DFTRAMBYP, DB_scan[16] );
     primitive = _mux  mDB_scan17 (DB_hold[17], BMUX_DB[17], DFTRAMBYP, DB_scan[17] );
     primitive = _mux  mDB_scan18 (DB_hold[18], BMUX_DB[18], DFTRAMBYP, DB_scan[18] );
     primitive = _mux  mDB_scan19 (DB_hold[19], BMUX_DB[19], DFTRAMBYP, DB_scan[19] );
     primitive = _mux  mDB_scan20 (DB_hold[20], BMUX_DB[20], DFTRAMBYP, DB_scan[20] );
     primitive = _mux  mDB_scan21 (DB_hold[21], BMUX_DB[21], DFTRAMBYP, DB_scan[21] );
     primitive = _mux  mDB_scan22 (DB_hold[22], BMUX_DB[22], DFTRAMBYP, DB_scan[22] );
     primitive = _mux  mDB_scan23 (DB_hold[23], BMUX_DB[23], DFTRAMBYP, DB_scan[23] );
     primitive = _mux  mDB_scan24 (DB_hold[24], BMUX_DB[24], DFTRAMBYP, DB_scan[24] );
     primitive = _mux  mDB_scan25 (DB_hold[25], BMUX_DB[25], DFTRAMBYP, DB_scan[25] );
     primitive = _mux  mDB_scan26 (DB_hold[26], BMUX_DB[26], DFTRAMBYP, DB_scan[26] );
     primitive = _mux  mDB_scan27 (DB_hold[27], BMUX_DB[27], DFTRAMBYP, DB_scan[27] );
     primitive = _mux  mDB_scan28 (DB_hold[28], BMUX_DB[28], DFTRAMBYP, DB_scan[28] );
     primitive = _mux  mDB_scan29 (DB_hold[29], BMUX_DB[29], DFTRAMBYP, DB_scan[29] );
     primitive = _mux  mDB_scan30 (DB_hold[30], BMUX_DB[30], DFTRAMBYP, DB_scan[30] );
     primitive = _mux  mDB_scan31 (DB_hold[31], BMUX_DB[31], DFTRAMBYP, DB_scan[31] );
     primitive = _mux  mDB_scan32 (DB_hold[32], BMUX_DB[32], DFTRAMBYP, DB_scan[32] );
     primitive = _mux  mDB_scan33 (DB_hold[33], BMUX_DB[33], DFTRAMBYP, DB_scan[33] );
     primitive = _mux  mDB_scan34 (DB_hold[34], BMUX_DB[34], DFTRAMBYP, DB_scan[34] );
     primitive = _mux  mDB_scan35 (DB_hold[35], BMUX_DB[35], DFTRAMBYP, DB_scan[35] );
     primitive = _mux  mDB_scan36 (DB_hold[36], BMUX_DB[36], DFTRAMBYP, DB_scan[36] );
     primitive = _mux  mDB_scan37 (DB_hold[37], BMUX_DB[37], DFTRAMBYP, DB_scan[37] );
     primitive = _mux  mDB_scan38 (DB_hold[38], BMUX_DB[38], DFTRAMBYP, DB_scan[38] );
     primitive = _mux  mDB_scan39 (DB_hold[39], BMUX_DB[39], DFTRAMBYP, DB_scan[39] );
     primitive = _mux  mDB_scan40 (DB_hold[40], BMUX_DB[40], DFTRAMBYP, DB_scan[40] );
     primitive = _mux  mDB_scan41 (DB_hold[41], BMUX_DB[41], DFTRAMBYP, DB_scan[41] );
     primitive = _mux  mDB_scan42 (DB_hold[42], BMUX_DB[42], DFTRAMBYP, DB_scan[42] );
     primitive = _mux  mDB_scan43 (DB_hold[43], BMUX_DB[43], DFTRAMBYP, DB_scan[43] );
     primitive = _mux  mDB_scan44 (DB_hold[44], BMUX_DB[44], DFTRAMBYP, DB_scan[44] );
     primitive = _mux  mDB_scan45 (DB_hold[45], BMUX_DB[45], DFTRAMBYP, DB_scan[45] );
     primitive = _mux  mDB_scan46 (DB_hold[46], BMUX_DB[46], DFTRAMBYP, DB_scan[46] );
     primitive = _mux  mDB_scan47 (DB_hold[47], BMUX_DB[47], DFTRAMBYP, DB_scan[47] );
     primitive = _mux  mDB_scan48 (DB_hold[48], BMUX_DB[48], DFTRAMBYP, DB_scan[48] );
     primitive = _mux  mDB_scan49 (DB_hold[49], BMUX_DB[49], DFTRAMBYP, DB_scan[49] );
     primitive = _mux  mDB_scan50 (DB_hold[50], BMUX_DB[50], DFTRAMBYP, DB_scan[50] );
     primitive = _mux  mDB_scan51 (DB_hold[51], BMUX_DB[51], DFTRAMBYP, DB_scan[51] );
     primitive = _mux  mDB_scan52 (DB_hold[52], BMUX_DB[52], DFTRAMBYP, DB_scan[52] );
     primitive = _mux  mDB_scan53 (DB_hold[53], BMUX_DB[53], DFTRAMBYP, DB_scan[53] );
     primitive = _mux  mDB_scan54 (DB_hold[54], BMUX_DB[54], DFTRAMBYP, DB_scan[54] );
     primitive = _mux  mDB_scan55 (DB_hold[55], BMUX_DB[55], DFTRAMBYP, DB_scan[55] );
     primitive = _mux  mDB_scan56 (DB_hold[56], BMUX_DB[56], DFTRAMBYP, DB_scan[56] );
     primitive = _mux  mDB_scan57 (DB_hold[57], BMUX_DB[57], DFTRAMBYP, DB_scan[57] );
     primitive = _mux  mDB_scan58 (DB_hold[58], BMUX_DB[58], DFTRAMBYP, DB_scan[58] );
     primitive = _mux  mDB_scan59 (DB_hold[59], BMUX_DB[59], DFTRAMBYP, DB_scan[59] );
     primitive = _mux  mDB_scan60 (DB_hold[60], BMUX_DB[60], DFTRAMBYP, DB_scan[60] );
     primitive = _mux  mDB_scan61 (DB_hold[61], BMUX_DB[61], DFTRAMBYP, DB_scan[61] );
     primitive = _mux  mDB_scan62 (DB_hold[62], BMUX_DB[62], DFTRAMBYP, DB_scan[62] );
     primitive = _mux  mDB_scan63 (DB_hold[63], BMUX_DB[63], DFTRAMBYP, DB_scan[63] );
     primitive = _mux  mDB_scan64 (DB_hold[64], BMUX_DB[64], DFTRAMBYP, DB_scan[64] );
     primitive = _mux  mDB_scan65 (DB_hold[65], BMUX_DB[65], DFTRAMBYP, DB_scan[65] );
     primitive = _mux  mDB_scan66 (DB_hold[66], BMUX_DB[66], DFTRAMBYP, DB_scan[66] );
     primitive = _mux  mDB_scan67 (DB_hold[67], BMUX_DB[67], DFTRAMBYP, DB_scan[67] );
     primitive = _mux  mDB_scan68 (DB_hold[68], BMUX_DB[68], DFTRAMBYP, DB_scan[68] );
     primitive = _mux  mDB_scan69 (DB_hold[69], BMUX_DB[69], DFTRAMBYP, DB_scan[69] );
     primitive = _mux  mDB_scan70 (DB_hold[70], BMUX_DB[70], DFTRAMBYP, DB_scan[70] );
     primitive = _mux  mDB_scan71 (DB_hold[71], BMUX_DB[71], DFTRAMBYP, DB_scan[71] );
     primitive = _mux  mDB_scan72 (DB_hold[72], BMUX_DB[72], DFTRAMBYP, DB_scan[72] );
     primitive = _mux  mDB_scan73 (DB_hold[73], BMUX_DB[73], DFTRAMBYP, DB_scan[73] );
     primitive = _mux  mDB_scan74 (DB_hold[74], BMUX_DB[74], DFTRAMBYP, DB_scan[74] );
     primitive = _mux  mDB_scan75 (DB_hold[75], BMUX_DB[75], DFTRAMBYP, DB_scan[75] );
     primitive = _mux  mDB_scan76 (DB_hold[76], BMUX_DB[76], DFTRAMBYP, DB_scan[76] );
     primitive = _mux  mDB_scan77 (DB_hold[77], BMUX_DB[77], DFTRAMBYP, DB_scan[77] );
     primitive = _mux  mDB_scan78 (DB_hold[78], BMUX_DB[78], DFTRAMBYP, DB_scan[78] );
     primitive = _mux  mDB_scan79 (DB_hold[79], BMUX_DB[79], DFTRAMBYP, DB_scan[79] );
     primitive = _mux  mDB_scan80 (DB_hold[80], BMUX_DB[80], DFTRAMBYP, DB_scan[80] );
     primitive = _mux  mDB_scan81 (DB_hold[81], BMUX_DB[81], DFTRAMBYP, DB_scan[81] );
     primitive = _mux  mDB_scan82 (DB_hold[82], BMUX_DB[82], DFTRAMBYP, DB_scan[82] );
     primitive = _mux  mDB_scan83 (DB_hold[83], BMUX_DB[83], DFTRAMBYP, DB_scan[83] );
     primitive = _mux  mDB_scan84 (DB_hold[84], BMUX_DB[84], DFTRAMBYP, DB_scan[84] );
     primitive = _mux  mDB_scan85 (DB_hold[85], BMUX_DB[85], DFTRAMBYP, DB_scan[85] );
     primitive = _mux  mDB_scan86 (DB_hold[86], BMUX_DB[86], DFTRAMBYP, DB_scan[86] );
     primitive = _mux  mDB_scan87 (DB_hold[87], BMUX_DB[87], DFTRAMBYP, DB_scan[87] );
     primitive = _mux  mDB_scan88 (DB_hold[88], BMUX_DB[88], DFTRAMBYP, DB_scan[88] );
     primitive = _mux  mDB_scan89 (DB_hold[89], BMUX_DB[89], DFTRAMBYP, DB_scan[89] );
     primitive = _mux  mDB_scan90 (DB_hold[90], BMUX_DB[90], DFTRAMBYP, DB_scan[90] );
     primitive = _mux  mDB_scan91 (DB_hold[91], BMUX_DB[91], DFTRAMBYP, DB_scan[91] );
     primitive = _mux  mDB_scan92 (DB_hold[92], BMUX_DB[92], DFTRAMBYP, DB_scan[92] );
     primitive = _mux  mDB_scan93 (DB_hold[93], BMUX_DB[93], DFTRAMBYP, DB_scan[93] );
     primitive = _mux  mDB_scan94 (DB_hold[94], BMUX_DB[94], DFTRAMBYP, DB_scan[94] );
     primitive = _mux  mDB_scan95 (DB_hold[95], BMUX_DB[95], DFTRAMBYP, DB_scan[95] );
     primitive = _mux  mDB_scan96 (DB_hold[96], BMUX_DB[96], DFTRAMBYP, DB_scan[96] );
     primitive = _mux  mDB_scan97 (DB_hold[97], BMUX_DB[97], DFTRAMBYP, DB_scan[97] );
     primitive = _mux  mDB_scan98 (DB_hold[98], BMUX_DB[98], DFTRAMBYP, DB_scan[98] );
     primitive = _mux  mDB_scan99 (DB_hold[99], BMUX_DB[99], DFTRAMBYP, DB_scan[99] );
     primitive = _mux  mDB_scan100 (DB_hold[100], BMUX_DB[100], DFTRAMBYP, DB_scan[100] );
     primitive = _mux  mDB_scan101 (DB_hold[101], BMUX_DB[101], DFTRAMBYP, DB_scan[101] );
     primitive = _mux  mDB_scan102 (DB_hold[102], BMUX_DB[102], DFTRAMBYP, DB_scan[102] );
     primitive = _mux  mDB_scan103 (DB_hold[103], BMUX_DB[103], DFTRAMBYP, DB_scan[103] );
     primitive = _mux  mDB_scan104 (DB_hold[104], BMUX_DB[104], DFTRAMBYP, DB_scan[104] );
     primitive = _mux  mDB_scan105 (DB_hold[105], BMUX_DB[105], DFTRAMBYP, DB_scan[105] );
     primitive = _mux  mDB_scan106 (DB_hold[106], BMUX_DB[106], DFTRAMBYP, DB_scan[106] );
     primitive = _mux  mDB_scan107 (DB_hold[107], BMUX_DB[107], DFTRAMBYP, DB_scan[107] );
     primitive = _mux  mDB_scan108 (DB_hold[108], BMUX_DB[108], DFTRAMBYP, DB_scan[108] );
     primitive = _mux  mDB_scan109 (DB_hold[109], BMUX_DB[109], DFTRAMBYP, DB_scan[109] );
     primitive = _mux  mDB_scan110 (DB_hold[110], BMUX_DB[110], DFTRAMBYP, DB_scan[110] );
     primitive = _mux  mDB_scan111 (DB_hold[111], BMUX_DB[111], DFTRAMBYP, DB_scan[111] );
     primitive = _mux  mDB_scan112 (DB_hold[112], BMUX_DB[112], DFTRAMBYP, DB_scan[112] );
     primitive = _mux  mDB_scan113 (DB_hold[113], BMUX_DB[113], DFTRAMBYP, DB_scan[113] );
     primitive = _mux  mDB_scan114 (DB_hold[114], BMUX_DB[114], DFTRAMBYP, DB_scan[114] );
     primitive = _mux  mDB_scan115 (DB_hold[115], BMUX_DB[115], DFTRAMBYP, DB_scan[115] );
     primitive = _mux  mDB_scan116 (DB_hold[116], BMUX_DB[116], DFTRAMBYP, DB_scan[116] );
     primitive = _mux  mDB_scan117 (DB_hold[117], BMUX_DB[117], DFTRAMBYP, DB_scan[117] );
     primitive = _mux  mDB_scan118 (DB_hold[118], BMUX_DB[118], DFTRAMBYP, DB_scan[118] );
     primitive = _mux  mDB_scan119 (DB_hold[119], BMUX_DB[119], DFTRAMBYP, DB_scan[119] );
     primitive = _mux  mDB_scan120 (DB_hold[120], BMUX_DB[120], DFTRAMBYP, DB_scan[120] );
     primitive = _mux  mDB_scan121 (DB_hold[121], BMUX_DB[121], DFTRAMBYP, DB_scan[121] );
     primitive = _mux  mDB_scan122 (DB_hold[122], BMUX_DB[122], DFTRAMBYP, DB_scan[122] );
     primitive = _mux  mDB_scan123 (DB_hold[123], BMUX_DB[123], DFTRAMBYP, DB_scan[123] );
     primitive = _mux  mDB_scan124 (DB_hold[124], BMUX_DB[124], DFTRAMBYP, DB_scan[124] );
     primitive = _mux  mDB_scan125 (DB_hold[125], BMUX_DB[125], DFTRAMBYP, DB_scan[125] );
     primitive = _mux  mDB_scan126 (DB_hold[126], BMUX_DB[126], DFTRAMBYP, DB_scan[126] );
     primitive = _mux  mDB_scan127 (DB_hold[127], BMUX_DB[127], DFTRAMBYP, DB_scan[127] );
  )
   intern (QB_int) (array = 127 : 0;
     instance = rf2_32x128_wm1_scanflop uDQB0 (.CLK(CLKB), .SE(SEB), .SI(QB_int[1]), .D(DB_scan[0]), .Q(QB_int[0]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB1 (.CLK(CLKB), .SE(SEB), .SI(QB_int[2]), .D(DB_scan[1]), .Q(QB_int[1]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB2 (.CLK(CLKB), .SE(SEB), .SI(QB_int[3]), .D(DB_scan[2]), .Q(QB_int[2]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB3 (.CLK(CLKB), .SE(SEB), .SI(QB_int[4]), .D(DB_scan[3]), .Q(QB_int[3]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB4 (.CLK(CLKB), .SE(SEB), .SI(QB_int[5]), .D(DB_scan[4]), .Q(QB_int[4]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB5 (.CLK(CLKB), .SE(SEB), .SI(QB_int[6]), .D(DB_scan[5]), .Q(QB_int[5]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB6 (.CLK(CLKB), .SE(SEB), .SI(QB_int[7]), .D(DB_scan[6]), .Q(QB_int[6]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB7 (.CLK(CLKB), .SE(SEB), .SI(QB_int[8]), .D(DB_scan[7]), .Q(QB_int[7]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB8 (.CLK(CLKB), .SE(SEB), .SI(QB_int[9]), .D(DB_scan[8]), .Q(QB_int[8]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB9 (.CLK(CLKB), .SE(SEB), .SI(QB_int[10]), .D(DB_scan[9]), .Q(QB_int[9]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB10 (.CLK(CLKB), .SE(SEB), .SI(QB_int[11]), .D(DB_scan[10]), .Q(QB_int[10]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB11 (.CLK(CLKB), .SE(SEB), .SI(QB_int[12]), .D(DB_scan[11]), .Q(QB_int[11]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB12 (.CLK(CLKB), .SE(SEB), .SI(QB_int[13]), .D(DB_scan[12]), .Q(QB_int[12]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB13 (.CLK(CLKB), .SE(SEB), .SI(QB_int[14]), .D(DB_scan[13]), .Q(QB_int[13]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB14 (.CLK(CLKB), .SE(SEB), .SI(QB_int[15]), .D(DB_scan[14]), .Q(QB_int[14]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB15 (.CLK(CLKB), .SE(SEB), .SI(QB_int[16]), .D(DB_scan[15]), .Q(QB_int[15]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB16 (.CLK(CLKB), .SE(SEB), .SI(QB_int[17]), .D(DB_scan[16]), .Q(QB_int[16]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB17 (.CLK(CLKB), .SE(SEB), .SI(QB_int[18]), .D(DB_scan[17]), .Q(QB_int[17]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB18 (.CLK(CLKB), .SE(SEB), .SI(QB_int[19]), .D(DB_scan[18]), .Q(QB_int[18]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB19 (.CLK(CLKB), .SE(SEB), .SI(QB_int[20]), .D(DB_scan[19]), .Q(QB_int[19]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB20 (.CLK(CLKB), .SE(SEB), .SI(QB_int[21]), .D(DB_scan[20]), .Q(QB_int[20]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB21 (.CLK(CLKB), .SE(SEB), .SI(QB_int[22]), .D(DB_scan[21]), .Q(QB_int[21]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB22 (.CLK(CLKB), .SE(SEB), .SI(QB_int[23]), .D(DB_scan[22]), .Q(QB_int[22]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB23 (.CLK(CLKB), .SE(SEB), .SI(QB_int[24]), .D(DB_scan[23]), .Q(QB_int[23]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB24 (.CLK(CLKB), .SE(SEB), .SI(QB_int[25]), .D(DB_scan[24]), .Q(QB_int[24]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB25 (.CLK(CLKB), .SE(SEB), .SI(QB_int[26]), .D(DB_scan[25]), .Q(QB_int[25]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB26 (.CLK(CLKB), .SE(SEB), .SI(QB_int[27]), .D(DB_scan[26]), .Q(QB_int[26]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB27 (.CLK(CLKB), .SE(SEB), .SI(QB_int[28]), .D(DB_scan[27]), .Q(QB_int[27]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB28 (.CLK(CLKB), .SE(SEB), .SI(QB_int[29]), .D(DB_scan[28]), .Q(QB_int[28]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB29 (.CLK(CLKB), .SE(SEB), .SI(QB_int[30]), .D(DB_scan[29]), .Q(QB_int[29]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB30 (.CLK(CLKB), .SE(SEB), .SI(QB_int[31]), .D(DB_scan[30]), .Q(QB_int[30]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB31 (.CLK(CLKB), .SE(SEB), .SI(QB_int[32]), .D(DB_scan[31]), .Q(QB_int[31]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB32 (.CLK(CLKB), .SE(SEB), .SI(QB_int[33]), .D(DB_scan[32]), .Q(QB_int[32]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB33 (.CLK(CLKB), .SE(SEB), .SI(QB_int[34]), .D(DB_scan[33]), .Q(QB_int[33]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB34 (.CLK(CLKB), .SE(SEB), .SI(QB_int[35]), .D(DB_scan[34]), .Q(QB_int[34]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB35 (.CLK(CLKB), .SE(SEB), .SI(QB_int[36]), .D(DB_scan[35]), .Q(QB_int[35]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB36 (.CLK(CLKB), .SE(SEB), .SI(QB_int[37]), .D(DB_scan[36]), .Q(QB_int[36]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB37 (.CLK(CLKB), .SE(SEB), .SI(QB_int[38]), .D(DB_scan[37]), .Q(QB_int[37]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB38 (.CLK(CLKB), .SE(SEB), .SI(QB_int[39]), .D(DB_scan[38]), .Q(QB_int[38]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB39 (.CLK(CLKB), .SE(SEB), .SI(QB_int[40]), .D(DB_scan[39]), .Q(QB_int[39]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB40 (.CLK(CLKB), .SE(SEB), .SI(QB_int[41]), .D(DB_scan[40]), .Q(QB_int[40]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB41 (.CLK(CLKB), .SE(SEB), .SI(QB_int[42]), .D(DB_scan[41]), .Q(QB_int[41]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB42 (.CLK(CLKB), .SE(SEB), .SI(QB_int[43]), .D(DB_scan[42]), .Q(QB_int[42]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB43 (.CLK(CLKB), .SE(SEB), .SI(QB_int[44]), .D(DB_scan[43]), .Q(QB_int[43]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB44 (.CLK(CLKB), .SE(SEB), .SI(QB_int[45]), .D(DB_scan[44]), .Q(QB_int[44]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB45 (.CLK(CLKB), .SE(SEB), .SI(QB_int[46]), .D(DB_scan[45]), .Q(QB_int[45]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB46 (.CLK(CLKB), .SE(SEB), .SI(QB_int[47]), .D(DB_scan[46]), .Q(QB_int[46]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB47 (.CLK(CLKB), .SE(SEB), .SI(QB_int[48]), .D(DB_scan[47]), .Q(QB_int[47]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB48 (.CLK(CLKB), .SE(SEB), .SI(QB_int[49]), .D(DB_scan[48]), .Q(QB_int[48]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB49 (.CLK(CLKB), .SE(SEB), .SI(QB_int[50]), .D(DB_scan[49]), .Q(QB_int[49]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB50 (.CLK(CLKB), .SE(SEB), .SI(QB_int[51]), .D(DB_scan[50]), .Q(QB_int[50]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB51 (.CLK(CLKB), .SE(SEB), .SI(QB_int[52]), .D(DB_scan[51]), .Q(QB_int[51]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB52 (.CLK(CLKB), .SE(SEB), .SI(QB_int[53]), .D(DB_scan[52]), .Q(QB_int[52]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB53 (.CLK(CLKB), .SE(SEB), .SI(QB_int[54]), .D(DB_scan[53]), .Q(QB_int[53]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB54 (.CLK(CLKB), .SE(SEB), .SI(QB_int[55]), .D(DB_scan[54]), .Q(QB_int[54]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB55 (.CLK(CLKB), .SE(SEB), .SI(QB_int[56]), .D(DB_scan[55]), .Q(QB_int[55]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB56 (.CLK(CLKB), .SE(SEB), .SI(QB_int[57]), .D(DB_scan[56]), .Q(QB_int[56]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB57 (.CLK(CLKB), .SE(SEB), .SI(QB_int[58]), .D(DB_scan[57]), .Q(QB_int[57]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB58 (.CLK(CLKB), .SE(SEB), .SI(QB_int[59]), .D(DB_scan[58]), .Q(QB_int[58]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB59 (.CLK(CLKB), .SE(SEB), .SI(QB_int[60]), .D(DB_scan[59]), .Q(QB_int[59]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB60 (.CLK(CLKB), .SE(SEB), .SI(QB_int[61]), .D(DB_scan[60]), .Q(QB_int[60]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB61 (.CLK(CLKB), .SE(SEB), .SI(QB_int[62]), .D(DB_scan[61]), .Q(QB_int[61]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB62 (.CLK(CLKB), .SE(SEB), .SI(QB_int[63]), .D(DB_scan[62]), .Q(QB_int[62]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB63 (.CLK(CLKB), .SE(SEB), .SI(BUS_SIB[0]), .D(DB_scan[63]), .Q(QB_int[63]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB64 (.CLK(CLKB), .SE(SEB), .SI(BUS_SIB[1]), .D(DB_scan[64]), .Q(QB_int[64]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB65 (.CLK(CLKB), .SE(SEB), .SI(QB_int[64]), .D(DB_scan[65]), .Q(QB_int[65]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB66 (.CLK(CLKB), .SE(SEB), .SI(QB_int[65]), .D(DB_scan[66]), .Q(QB_int[66]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB67 (.CLK(CLKB), .SE(SEB), .SI(QB_int[66]), .D(DB_scan[67]), .Q(QB_int[67]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB68 (.CLK(CLKB), .SE(SEB), .SI(QB_int[67]), .D(DB_scan[68]), .Q(QB_int[68]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB69 (.CLK(CLKB), .SE(SEB), .SI(QB_int[68]), .D(DB_scan[69]), .Q(QB_int[69]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB70 (.CLK(CLKB), .SE(SEB), .SI(QB_int[69]), .D(DB_scan[70]), .Q(QB_int[70]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB71 (.CLK(CLKB), .SE(SEB), .SI(QB_int[70]), .D(DB_scan[71]), .Q(QB_int[71]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB72 (.CLK(CLKB), .SE(SEB), .SI(QB_int[71]), .D(DB_scan[72]), .Q(QB_int[72]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB73 (.CLK(CLKB), .SE(SEB), .SI(QB_int[72]), .D(DB_scan[73]), .Q(QB_int[73]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB74 (.CLK(CLKB), .SE(SEB), .SI(QB_int[73]), .D(DB_scan[74]), .Q(QB_int[74]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB75 (.CLK(CLKB), .SE(SEB), .SI(QB_int[74]), .D(DB_scan[75]), .Q(QB_int[75]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB76 (.CLK(CLKB), .SE(SEB), .SI(QB_int[75]), .D(DB_scan[76]), .Q(QB_int[76]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB77 (.CLK(CLKB), .SE(SEB), .SI(QB_int[76]), .D(DB_scan[77]), .Q(QB_int[77]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB78 (.CLK(CLKB), .SE(SEB), .SI(QB_int[77]), .D(DB_scan[78]), .Q(QB_int[78]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB79 (.CLK(CLKB), .SE(SEB), .SI(QB_int[78]), .D(DB_scan[79]), .Q(QB_int[79]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB80 (.CLK(CLKB), .SE(SEB), .SI(QB_int[79]), .D(DB_scan[80]), .Q(QB_int[80]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB81 (.CLK(CLKB), .SE(SEB), .SI(QB_int[80]), .D(DB_scan[81]), .Q(QB_int[81]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB82 (.CLK(CLKB), .SE(SEB), .SI(QB_int[81]), .D(DB_scan[82]), .Q(QB_int[82]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB83 (.CLK(CLKB), .SE(SEB), .SI(QB_int[82]), .D(DB_scan[83]), .Q(QB_int[83]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB84 (.CLK(CLKB), .SE(SEB), .SI(QB_int[83]), .D(DB_scan[84]), .Q(QB_int[84]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB85 (.CLK(CLKB), .SE(SEB), .SI(QB_int[84]), .D(DB_scan[85]), .Q(QB_int[85]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB86 (.CLK(CLKB), .SE(SEB), .SI(QB_int[85]), .D(DB_scan[86]), .Q(QB_int[86]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB87 (.CLK(CLKB), .SE(SEB), .SI(QB_int[86]), .D(DB_scan[87]), .Q(QB_int[87]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB88 (.CLK(CLKB), .SE(SEB), .SI(QB_int[87]), .D(DB_scan[88]), .Q(QB_int[88]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB89 (.CLK(CLKB), .SE(SEB), .SI(QB_int[88]), .D(DB_scan[89]), .Q(QB_int[89]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB90 (.CLK(CLKB), .SE(SEB), .SI(QB_int[89]), .D(DB_scan[90]), .Q(QB_int[90]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB91 (.CLK(CLKB), .SE(SEB), .SI(QB_int[90]), .D(DB_scan[91]), .Q(QB_int[91]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB92 (.CLK(CLKB), .SE(SEB), .SI(QB_int[91]), .D(DB_scan[92]), .Q(QB_int[92]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB93 (.CLK(CLKB), .SE(SEB), .SI(QB_int[92]), .D(DB_scan[93]), .Q(QB_int[93]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB94 (.CLK(CLKB), .SE(SEB), .SI(QB_int[93]), .D(DB_scan[94]), .Q(QB_int[94]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB95 (.CLK(CLKB), .SE(SEB), .SI(QB_int[94]), .D(DB_scan[95]), .Q(QB_int[95]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB96 (.CLK(CLKB), .SE(SEB), .SI(QB_int[95]), .D(DB_scan[96]), .Q(QB_int[96]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB97 (.CLK(CLKB), .SE(SEB), .SI(QB_int[96]), .D(DB_scan[97]), .Q(QB_int[97]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB98 (.CLK(CLKB), .SE(SEB), .SI(QB_int[97]), .D(DB_scan[98]), .Q(QB_int[98]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB99 (.CLK(CLKB), .SE(SEB), .SI(QB_int[98]), .D(DB_scan[99]), .Q(QB_int[99]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB100 (.CLK(CLKB), .SE(SEB), .SI(QB_int[99]), .D(DB_scan[100]), .Q(QB_int[100]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB101 (.CLK(CLKB), .SE(SEB), .SI(QB_int[100]), .D(DB_scan[101]), .Q(QB_int[101]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB102 (.CLK(CLKB), .SE(SEB), .SI(QB_int[101]), .D(DB_scan[102]), .Q(QB_int[102]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB103 (.CLK(CLKB), .SE(SEB), .SI(QB_int[102]), .D(DB_scan[103]), .Q(QB_int[103]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB104 (.CLK(CLKB), .SE(SEB), .SI(QB_int[103]), .D(DB_scan[104]), .Q(QB_int[104]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB105 (.CLK(CLKB), .SE(SEB), .SI(QB_int[104]), .D(DB_scan[105]), .Q(QB_int[105]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB106 (.CLK(CLKB), .SE(SEB), .SI(QB_int[105]), .D(DB_scan[106]), .Q(QB_int[106]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB107 (.CLK(CLKB), .SE(SEB), .SI(QB_int[106]), .D(DB_scan[107]), .Q(QB_int[107]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB108 (.CLK(CLKB), .SE(SEB), .SI(QB_int[107]), .D(DB_scan[108]), .Q(QB_int[108]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB109 (.CLK(CLKB), .SE(SEB), .SI(QB_int[108]), .D(DB_scan[109]), .Q(QB_int[109]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB110 (.CLK(CLKB), .SE(SEB), .SI(QB_int[109]), .D(DB_scan[110]), .Q(QB_int[110]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB111 (.CLK(CLKB), .SE(SEB), .SI(QB_int[110]), .D(DB_scan[111]), .Q(QB_int[111]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB112 (.CLK(CLKB), .SE(SEB), .SI(QB_int[111]), .D(DB_scan[112]), .Q(QB_int[112]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB113 (.CLK(CLKB), .SE(SEB), .SI(QB_int[112]), .D(DB_scan[113]), .Q(QB_int[113]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB114 (.CLK(CLKB), .SE(SEB), .SI(QB_int[113]), .D(DB_scan[114]), .Q(QB_int[114]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB115 (.CLK(CLKB), .SE(SEB), .SI(QB_int[114]), .D(DB_scan[115]), .Q(QB_int[115]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB116 (.CLK(CLKB), .SE(SEB), .SI(QB_int[115]), .D(DB_scan[116]), .Q(QB_int[116]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB117 (.CLK(CLKB), .SE(SEB), .SI(QB_int[116]), .D(DB_scan[117]), .Q(QB_int[117]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB118 (.CLK(CLKB), .SE(SEB), .SI(QB_int[117]), .D(DB_scan[118]), .Q(QB_int[118]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB119 (.CLK(CLKB), .SE(SEB), .SI(QB_int[118]), .D(DB_scan[119]), .Q(QB_int[119]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB120 (.CLK(CLKB), .SE(SEB), .SI(QB_int[119]), .D(DB_scan[120]), .Q(QB_int[120]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB121 (.CLK(CLKB), .SE(SEB), .SI(QB_int[120]), .D(DB_scan[121]), .Q(QB_int[121]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB122 (.CLK(CLKB), .SE(SEB), .SI(QB_int[121]), .D(DB_scan[122]), .Q(QB_int[122]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB123 (.CLK(CLKB), .SE(SEB), .SI(QB_int[122]), .D(DB_scan[123]), .Q(QB_int[123]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB124 (.CLK(CLKB), .SE(SEB), .SI(QB_int[123]), .D(DB_scan[124]), .Q(QB_int[124]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB125 (.CLK(CLKB), .SE(SEB), .SI(QB_int[124]), .D(DB_scan[125]), .Q(QB_int[125]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB126 (.CLK(CLKB), .SE(SEB), .SI(QB_int[125]), .D(DB_scan[126]), .Q(QB_int[126]), .Xout(XoutBiff));
     instance = rf2_32x128_wm1_scanflop uDQB127 (.CLK(CLKB), .SE(SEB), .SI(QB_int[126]), .D(DB_scan[127]), .Q(QB_int[127]), .Xout(XoutBiff));
  )
  output (SOB) ( array = 1 : 0;
     primitive = _buf  bSOB0 (QB_int[0], SOB[0] );
     primitive = _buf  bSOB1 (QB_int[127], SOB[1] );
 )
  )
