# Copyright Â© 2019-2023
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Toolchain Directory
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: tools
          key: ${{ runner.os }}-toolchain-v0.1
          restore-keys: |
            ${{ runner.os }}-toolchain-

      - name: Cache Third Party Directory
        id: cache-thirdparty
        uses: actions/cache@v2
        with:
          path: third_party
          key: ${{ runner.os }}-thirdparty-v0.1
          restore-keys: |
            ${{ runner.os }}-thirdparty-

      - name: Install Dependencies
        if: steps.cache-toolchain.outputs.cache-hit != 'true' || steps.cache-thirdparty.outputs.cache-hit != 'true'
        run: |
          sudo bash ./ci/system_updates.sh

      - name: Setup Toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          TOOLDIR=$PWD/tools
          mkdir -p build
          cd build
          ../configure --tooldir=$TOOLDIR
          ci/toolchain_install.sh --all

      - name: Setup Third Party
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        run: |
          make -C third_party > /dev/null

  build:
    runs-on: ubuntu-20.04
    needs: setup
    strategy:
      matrix:
        xlen: [32, 64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo bash ./ci/system_updates.sh

      - name: Cache Toolchain Directory
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: tools
          key: ${{ runner.os }}-toolchain-v0.1
          restore-keys: |
            ${{ runner.os }}-toolchain-

      - name: Cache Third Party Directory
        id: cache-thirdparty
        uses: actions/cache@v2
        with:
          path: third_party
          key: ${{ runner.os }}-thirdparty-v0.1
          restore-keys: |
            ${{ runner.os }}-thirdparty-

      - name: Run Build
        run: |
          TOOLDIR=$PWD/tools
          mkdir -p build${{ matrix.xlen }}
          cd build${{ matrix.xlen }}
          ../configure --tooldir=$TOOLDIR --xlen=${{ matrix.xlen }}
          source ci/toolchain_env.sh
          make software -s > /dev/null
          make tests -s > /dev/null

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.xlen }}
          path: build${{ matrix.xlen }}

  tests:
    runs-on: ubuntu-20.04
    needs: build
    strategy:
      fail-fast: false
      matrix:
        name: [regression, opencl, cache, config1, config2, debug, stress]
        xlen: [32, 64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo bash ./ci/system_updates.sh

      - name: Cache Toolchain Directory
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: tools
          key: ${{ runner.os }}-toolchain-v0.1
          restore-keys: |
            ${{ runner.os }}-toolchain-

      - name: Cache Third Party Directory
        id: cache-thirdparty
        uses: actions/cache@v2
        with:
          path: third_party
          key: ${{ runner.os }}-thirdparty-v0.1
          restore-keys: |
            ${{ runner.os }}-thirdparty-

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.xlen }}
          path: build${{ matrix.xlen }}

      - name: Run tests
        run: |
          cd build${{ matrix.xlen }}
          source ci/toolchain_env.sh
          chmod -R +x . # Ensure all files have executable permissions
          if [ "${{ matrix.name }}" == "regression" ]; then
            ./ci/regression.sh --unittest
            ./ci/regression.sh --isa
            ./ci/regression.sh --kernel
            ./ci/regression.sh --synthesis
            ./ci/regression.sh --regression
          else
            ./ci/regression.sh --${{ matrix.name }}
          fi

  complete:
    runs-on: ubuntu-20.04
    needs: tests

    steps:
      - name: Check Completion
        run: echo "All matrix jobs passed"