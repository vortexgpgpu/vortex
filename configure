#!/bin/bash

# Copyright Â© 2019-2023
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Function to detect current OS
detect_os() {
    local osdir="unsupported"
    if [ -f /etc/os-release ]; then
        . /etc/os-release  # Source the os-release file to get OS information
        case "$ID" in
            ubuntu)
                case "$VERSION_CODENAME" in
                    bionic) osdir="ubuntu/bionic";;
                    focal) osdir="ubuntu/focal";;
                    # Add new versions as needed
                esac
                ;;
            centos)
                case "$VERSION_ID" in
                    7) osdir="centos/7";;
                    # Add new versions as needed
                esac
                ;;
        esac
    fi
    echo "$osdir"
}

# Function to recursively copy files, skipping the current directory
copy_files() {
    local source_dir="$1"
    local target_dir="$2"
    #echo "source_dir=$source_dir, target_dir=$target_dir"

    local same_dir=0
    if [ "$(realpath "$source_dir")" == "$(realpath "$target_dir")" ]; then
        same_dir=1
    fi  
            
    # Function to copy and update file
    copy_and_update() {
        local src_pattern="$1"
        local dest_dir="$2"
        for file in $src_pattern; do
            #echo "*** $file > $dest_dir"
            if [ -f "$file" ]; then                
                if [[ "$file" == *.in ]]; then
                    filename=$(basename -- "$file")
                    filename_no_ext="${filename%.in}"
                    dest_file="$dest_dir/$filename_no_ext"
                    mkdir -p "$dest_dir"
                    sed "s|@VORTEX_HOME@|$SCRIPT_DIR|g; s|@XLEN@|$XLEN|g; s|@TOOLDIR@|$TOOLDIR|g; s|@OSDIR@|$OSDIR|g" "$file" > "$dest_file"
                    # apply permissions to bash scripts
                    read -r firstline < "$dest_file"
                    if [[ "$firstline" =~ ^#!.*bash ]]; then
                        chmod +x "$dest_file"
                    fi
                else
                    if [ $same_dir -eq 0 ]; then
                        mkdir -p "$dest_dir"
                        cp -p "$file" "$dest_dir"
                    fi
                fi
            fi
        done
    }
    
    for pattern in "${SUBDIRS[@]}"; do
        local full_copy=0
        if [[ "$pattern" == !* ]]; then
            full_copy=1
            pattern=${pattern:1}
        fi
        local source_pattern="$source_dir/$pattern"
        if [[ "$pattern" == "." ]]; then
            source_pattern=$source_dir
        fi
        find "$source_dir" -type d -path "$source_pattern" 2>/dev/null | while read dir; do
            # Compute the relative path of the directory
            local rel_path="${dir#$source_dir}"
            rel_path="${rel_path#/}" # Remove leading slash, if present
            local full_target_dir="$target_dir/$rel_path"

            # Copy and update Makefile and common.mk if they exist
            if [ $full_copy -eq 1 ]; then
                copy_and_update "$dir/*" "$full_target_dir"
            else
                copy_and_update "$dir/Makefile" "$full_target_dir"
                copy_and_update "$dir/common.mk" "$full_target_dir"
                copy_and_update "$dir/*.in" "$full_target_dir"
            fi
        done
    done
}

###############################################################################

# options
XLEN=${XLEN:=32}
TOOLDIR=${TOOLDIR:=/opt}
OSDIR=${OSDIR:=$(detect_os)}

# check OS
if [ "$OSDIR" == "unsupported" ]; then
    echo "Error: Unsupported OS."
    exit -1
fi

# project subdirectories to build
SUBDIRS=("." "!ci" "!perf" "hw*" "kernel*" "runtime*" "sim*" "tests*")

# Get the directory of the script
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Determine the current working directory
CURRENT_DIR=$(pwd)

THIRD_PARTY_DIR=$SCRIPT_DIR/third_party

copy_files "$SCRIPT_DIR" "$CURRENT_DIR"
